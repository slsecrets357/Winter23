
lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a990  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  0800ab50  0800ab50  0001ab50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0dc  0800b0dc  00020260  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0dc  0800b0dc  0001b0dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0e4  0800b0e4  00020260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0e4  0800b0e4  0001b0e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0e8  0800b0e8  0001b0e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  0800b0ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c4  20000260  0800b34c  00020260  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001424  0800b34c  00021424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fa7b  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000447c  00000000  00000000  0003fd0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b48  00000000  00000000  00044188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001950  00000000  00000000  00045cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002daa4  00000000  00000000  00047620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000201e3  00000000  00000000  000750c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011be6b  00000000  00000000  000952a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b1112  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008260  00000000  00000000  001b1164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000260 	.word	0x20000260
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800ab38 	.word	0x0800ab38

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000264 	.word	0x20000264
 80001fc:	0800ab38 	.word	0x0800ab38

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2120      	movs	r1, #32
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 ffb5 	bl	8001e5c <SENSOR_IO_Read>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	f023 0304 	bic.w	r3, r3, #4
 8000efc:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	f043 0304 	orr.w	r3, r3, #4
 8000f04:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	f023 0303 	bic.w	r3, r3, #3
 8000f0c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f1c:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	7bfa      	ldrb	r2, [r7, #15]
 8000f24:	2120      	movs	r1, #32
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 ff7e 	bl	8001e28 <SENSOR_IO_Write>
}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8000f42:	f000 ff67 	bl	8001e14 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8000f46:	88fb      	ldrh	r3, [r7, #6]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	210f      	movs	r1, #15
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 ff85 	bl	8001e5c <SENSOR_IO_Read>
 8000f52:	4603      	mov	r3, r0
 8000f54:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	b2d8      	uxtb	r0, r3
 8000f6e:	f107 020c 	add.w	r2, r7, #12
 8000f72:	2302      	movs	r3, #2
 8000f74:	21b0      	movs	r1, #176	; 0xb0
 8000f76:	f000 ff8f 	bl	8001e98 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8000f7a:	7b3b      	ldrb	r3, [r7, #12]
 8000f7c:	085b      	lsrs	r3, r3, #1
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8000f82:	7b7b      	ldrb	r3, [r7, #13]
 8000f84:	085b      	lsrs	r3, r3, #1
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	b2d8      	uxtb	r0, r3
 8000f8e:	f107 020c 	add.w	r2, r7, #12
 8000f92:	2302      	movs	r3, #2
 8000f94:	21b6      	movs	r1, #182	; 0xb6
 8000f96:	f000 ff7f 	bl	8001e98 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000f9a:	7b7b      	ldrb	r3, [r7, #13]
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	b21a      	sxth	r2, r3
 8000fa0:	7b3b      	ldrb	r3, [r7, #12]
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	b2d8      	uxtb	r0, r3
 8000fac:	f107 020c 	add.w	r2, r7, #12
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	21ba      	movs	r1, #186	; 0xba
 8000fb4:	f000 ff70 	bl	8001e98 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000fb8:	7b7b      	ldrb	r3, [r7, #13]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	7b3b      	ldrb	r3, [r7, #12]
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	b2d8      	uxtb	r0, r3
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2302      	movs	r3, #2
 8000fd0:	21a8      	movs	r1, #168	; 0xa8
 8000fd2:	f000 ff61 	bl	8001e98 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000fd6:	7b7b      	ldrb	r3, [r7, #13]
 8000fd8:	021b      	lsls	r3, r3, #8
 8000fda:	b21a      	sxth	r2, r3
 8000fdc:	7b3b      	ldrb	r3, [r7, #12]
 8000fde:	b21b      	sxth	r3, r3
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8000fe4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000fe8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	ee07 3a90 	vmov	s15, r3
 8000ff2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000ffa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	ee07 3a90 	vmov	s15, r3
 8001004:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001008:	ee67 6a27 	vmul.f32	s13, s14, s15
 800100c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001010:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	ee07 3a90 	vmov	s15, r3
 800101a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800101e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001022:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001026:	ee07 3a90 	vmov	s15, r3
 800102a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800102e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001032:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8001036:	edd7 7a04 	vldr	s15, [r7, #16]
 800103a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800103e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001042:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8001046:	edd7 7a04 	vldr	s15, [r7, #16]
 800104a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001090 <HTS221_H_ReadHumidity+0x130>
 800104e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001056:	dd01      	ble.n	800105c <HTS221_H_ReadHumidity+0xfc>
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HTS221_H_ReadHumidity+0x134>)
 800105a:	e00a      	b.n	8001072 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 800105c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001060:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001068:	d502      	bpl.n	8001070 <HTS221_H_ReadHumidity+0x110>
 800106a:	f04f 0300 	mov.w	r3, #0
 800106e:	e000      	b.n	8001072 <HTS221_H_ReadHumidity+0x112>
 8001070:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8001072:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8001074:	edd7 7a04 	vldr	s15, [r7, #16]
 8001078:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800107c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001080:	eef0 7a66 	vmov.f32	s15, s13
}
 8001084:	eeb0 0a67 	vmov.f32	s0, s15
 8001088:	3720      	adds	r7, #32
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	447a0000 	.word	0x447a0000
 8001094:	447a0000 	.word	0x447a0000

08001098 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	463b      	mov	r3, r7
 80010a0:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 80010a4:	783b      	ldrb	r3, [r7, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	2120      	movs	r1, #32
 80010aa:	203c      	movs	r0, #60	; 0x3c
 80010ac:	f000 febc 	bl	8001e28 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 80010b0:	787b      	ldrb	r3, [r7, #1]
 80010b2:	461a      	mov	r2, r3
 80010b4:	2121      	movs	r1, #33	; 0x21
 80010b6:	203c      	movs	r0, #60	; 0x3c
 80010b8:	f000 feb6 	bl	8001e28 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 80010bc:	78bb      	ldrb	r3, [r7, #2]
 80010be:	461a      	mov	r2, r3
 80010c0:	2122      	movs	r1, #34	; 0x22
 80010c2:	203c      	movs	r0, #60	; 0x3c
 80010c4:	f000 feb0 	bl	8001e28 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 80010c8:	78fb      	ldrb	r3, [r7, #3]
 80010ca:	461a      	mov	r2, r3
 80010cc:	2123      	movs	r1, #35	; 0x23
 80010ce:	203c      	movs	r0, #60	; 0x3c
 80010d0:	f000 feaa 	bl	8001e28 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 80010d4:	793b      	ldrb	r3, [r7, #4]
 80010d6:	461a      	mov	r2, r3
 80010d8:	2124      	movs	r1, #36	; 0x24
 80010da:	203c      	movs	r0, #60	; 0x3c
 80010dc:	f000 fea4 	bl	8001e28 <SENSOR_IO_Write>
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80010ee:	2300      	movs	r3, #0
 80010f0:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80010f2:	2122      	movs	r1, #34	; 0x22
 80010f4:	203c      	movs	r0, #60	; 0x3c
 80010f6:	f000 feb1 	bl	8001e5c <SENSOR_IO_Read>
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	f023 0303 	bic.w	r3, r3, #3
 8001104:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	f043 0303 	orr.w	r3, r3, #3
 800110c:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	461a      	mov	r2, r3
 8001112:	2122      	movs	r1, #34	; 0x22
 8001114:	203c      	movs	r0, #60	; 0x3c
 8001116:	f000 fe87 	bl	8001e28 <SENSOR_IO_Write>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001126:	f000 fe75 	bl	8001e14 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 800112a:	210f      	movs	r1, #15
 800112c:	203c      	movs	r0, #60	; 0x3c
 800112e:	f000 fe95 	bl	8001e5c <SENSOR_IO_Read>
 8001132:	4603      	mov	r3, r0
}
 8001134:	4618      	mov	r0, r3
 8001136:	bd80      	pop	{r7, pc}

08001138 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8001146:	2122      	movs	r1, #34	; 0x22
 8001148:	203c      	movs	r0, #60	; 0x3c
 800114a:	f000 fe87 	bl	8001e5c <SENSOR_IO_Read>
 800114e:	4603      	mov	r3, r0
 8001150:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	f023 0320 	bic.w	r3, r3, #32
 8001158:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800115a:	88fb      	ldrh	r3, [r7, #6]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	f043 0320 	orr.w	r3, r3, #32
 8001166:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	461a      	mov	r2, r3
 800116c:	2122      	movs	r1, #34	; 0x22
 800116e:	203c      	movs	r0, #60	; 0x3c
 8001170:	f000 fe5a 	bl	8001e28 <SENSOR_IO_Write>
}
 8001174:	bf00      	nop
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8001184:	2300      	movs	r3, #0
 8001186:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800118c:	f04f 0300 	mov.w	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8001192:	2121      	movs	r1, #33	; 0x21
 8001194:	203c      	movs	r0, #60	; 0x3c
 8001196:	f000 fe61 	bl	8001e5c <SENSOR_IO_Read>
 800119a:	4603      	mov	r3, r0
 800119c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 800119e:	f107 0208 	add.w	r2, r7, #8
 80011a2:	2306      	movs	r3, #6
 80011a4:	21a8      	movs	r1, #168	; 0xa8
 80011a6:	203c      	movs	r0, #60	; 0x3c
 80011a8:	f000 fe76 	bl	8001e98 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	77fb      	strb	r3, [r7, #31]
 80011b0:	e01c      	b.n	80011ec <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80011b2:	7ffb      	ldrb	r3, [r7, #31]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	3301      	adds	r3, #1
 80011b8:	3320      	adds	r3, #32
 80011ba:	443b      	add	r3, r7
 80011bc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	7ffb      	ldrb	r3, [r7, #31]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	3320      	adds	r3, #32
 80011cc:	443b      	add	r3, r7
 80011ce:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	4413      	add	r3, r2
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	7ffb      	ldrb	r3, [r7, #31]
 80011da:	b212      	sxth	r2, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	3320      	adds	r3, #32
 80011e0:	443b      	add	r3, r7
 80011e2:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80011e6:	7ffb      	ldrb	r3, [r7, #31]
 80011e8:	3301      	adds	r3, #1
 80011ea:	77fb      	strb	r3, [r7, #31]
 80011ec:	7ffb      	ldrb	r3, [r7, #31]
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d9df      	bls.n	80011b2 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 80011f2:	7dfb      	ldrb	r3, [r7, #23]
 80011f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80011f8:	2b60      	cmp	r3, #96	; 0x60
 80011fa:	d013      	beq.n	8001224 <LIS3MDL_MagReadXYZ+0xa8>
 80011fc:	2b60      	cmp	r3, #96	; 0x60
 80011fe:	dc14      	bgt.n	800122a <LIS3MDL_MagReadXYZ+0xae>
 8001200:	2b40      	cmp	r3, #64	; 0x40
 8001202:	d00c      	beq.n	800121e <LIS3MDL_MagReadXYZ+0xa2>
 8001204:	2b40      	cmp	r3, #64	; 0x40
 8001206:	dc10      	bgt.n	800122a <LIS3MDL_MagReadXYZ+0xae>
 8001208:	2b00      	cmp	r3, #0
 800120a:	d002      	beq.n	8001212 <LIS3MDL_MagReadXYZ+0x96>
 800120c:	2b20      	cmp	r3, #32
 800120e:	d003      	beq.n	8001218 <LIS3MDL_MagReadXYZ+0x9c>
 8001210:	e00b      	b.n	800122a <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <LIS3MDL_MagReadXYZ+0xfc>)
 8001214:	61bb      	str	r3, [r7, #24]
    break;
 8001216:	e008      	b.n	800122a <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8001218:	4b18      	ldr	r3, [pc, #96]	; (800127c <LIS3MDL_MagReadXYZ+0x100>)
 800121a:	61bb      	str	r3, [r7, #24]
    break;
 800121c:	e005      	b.n	800122a <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 800121e:	4b18      	ldr	r3, [pc, #96]	; (8001280 <LIS3MDL_MagReadXYZ+0x104>)
 8001220:	61bb      	str	r3, [r7, #24]
    break;
 8001222:	e002      	b.n	800122a <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <LIS3MDL_MagReadXYZ+0x108>)
 8001226:	61bb      	str	r3, [r7, #24]
    break;    
 8001228:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 800122a:	2300      	movs	r3, #0
 800122c:	77fb      	strb	r3, [r7, #31]
 800122e:	e01a      	b.n	8001266 <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001230:	7ffb      	ldrb	r3, [r7, #31]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	3320      	adds	r3, #32
 8001236:	443b      	add	r3, r7
 8001238:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800123c:	ee07 3a90 	vmov	s15, r3
 8001240:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001244:	edd7 7a06 	vldr	s15, [r7, #24]
 8001248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800124c:	7ffb      	ldrb	r3, [r7, #31]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	4413      	add	r3, r2
 8001254:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001258:	ee17 2a90 	vmov	r2, s15
 800125c:	b212      	sxth	r2, r2
 800125e:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001260:	7ffb      	ldrb	r3, [r7, #31]
 8001262:	3301      	adds	r3, #1
 8001264:	77fb      	strb	r3, [r7, #31]
 8001266:	7ffb      	ldrb	r3, [r7, #31]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d9e1      	bls.n	8001230 <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	3720      	adds	r7, #32
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	3e0f5c29 	.word	0x3e0f5c29
 800127c:	3e947ae1 	.word	0x3e947ae1
 8001280:	3edc28f6 	.word	0x3edc28f6
 8001284:	3f147ae1 	.word	0x3f147ae1

08001288 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8001292:	88fb      	ldrh	r3, [r7, #6]
 8001294:	4618      	mov	r0, r3
 8001296:	f000 f879 	bl	800138c <LPS22HB_Init>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b084      	sub	sp, #16
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80012ac:	2300      	movs	r3, #0
 80012ae:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 80012b0:	f000 fdb0 	bl	8001e14 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80012b4:	88fb      	ldrh	r3, [r7, #6]
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	210f      	movs	r1, #15
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 fdce 	bl	8001e5c <SENSOR_IO_Read>
 80012c0:	4603      	mov	r3, r0
 80012c2:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b087      	sub	sp, #28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 80012de:	2300      	movs	r3, #0
 80012e0:	74fb      	strb	r3, [r7, #19]
 80012e2:	e013      	b.n	800130c <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80012e4:	88fb      	ldrh	r3, [r7, #6]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	7cfb      	ldrb	r3, [r7, #19]
 80012ea:	3328      	adds	r3, #40	; 0x28
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	7cfc      	ldrb	r4, [r7, #19]
 80012f0:	4619      	mov	r1, r3
 80012f2:	4610      	mov	r0, r2
 80012f4:	f000 fdb2 	bl	8001e5c <SENSOR_IO_Read>
 80012f8:	4603      	mov	r3, r0
 80012fa:	461a      	mov	r2, r3
 80012fc:	f104 0318 	add.w	r3, r4, #24
 8001300:	443b      	add	r3, r7
 8001302:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8001306:	7cfb      	ldrb	r3, [r7, #19]
 8001308:	3301      	adds	r3, #1
 800130a:	74fb      	strb	r3, [r7, #19]
 800130c:	7cfb      	ldrb	r3, [r7, #19]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d9e8      	bls.n	80012e4 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8001312:	2300      	movs	r3, #0
 8001314:	74fb      	strb	r3, [r7, #19]
 8001316:	e00f      	b.n	8001338 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8001318:	7cfb      	ldrb	r3, [r7, #19]
 800131a:	3318      	adds	r3, #24
 800131c:	443b      	add	r3, r7
 800131e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001322:	461a      	mov	r2, r3
 8001324:	7cfb      	ldrb	r3, [r7, #19]
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	4313      	orrs	r3, r2
 8001330:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8001332:	7cfb      	ldrb	r3, [r7, #19]
 8001334:	3301      	adds	r3, #1
 8001336:	74fb      	strb	r3, [r7, #19]
 8001338:	7cfb      	ldrb	r3, [r7, #19]
 800133a:	2b02      	cmp	r3, #2
 800133c:	d9ec      	bls.n	8001318 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800134e:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2264      	movs	r2, #100	; 0x64
 8001358:	fb02 f303 	mul.w	r3, r2, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	da01      	bge.n	8001364 <LPS22HB_P_ReadPressure+0x94>
 8001360:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001364:	131b      	asrs	r3, r3, #12
 8001366:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	ee07 3a90 	vmov	s15, r3
 800136e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001372:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001388 <LPS22HB_P_ReadPressure+0xb8>
 8001376:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800137a:	eef0 7a66 	vmov.f32	s15, s13
}
 800137e:	eeb0 0a67 	vmov.f32	s0, s15
 8001382:	371c      	adds	r7, #28
 8001384:	46bd      	mov	sp, r7
 8001386:	bd90      	pop	{r4, r7, pc}
 8001388:	42c80000 	.word	0x42c80000

0800138c <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8001396:	88fb      	ldrh	r3, [r7, #6]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	211a      	movs	r1, #26
 800139c:	4618      	mov	r0, r3
 800139e:	f000 fd5d 	bl	8001e5c <SENSOR_IO_Read>
 80013a2:	4603      	mov	r3, r0
 80013a4:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	f023 0301 	bic.w	r3, r3, #1
 80013ac:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	7bfa      	ldrb	r2, [r7, #15]
 80013bc:	211a      	movs	r1, #26
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 fd32 	bl	8001e28 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2110      	movs	r1, #16
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 fd46 	bl	8001e5c <SENSOR_IO_Read>
 80013d0:	4603      	mov	r3, r0
 80013d2:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013da:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80013e2:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	f023 0302 	bic.w	r3, r3, #2
 80013ea:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	f043 0302 	orr.w	r3, r3, #2
 80013f2:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80013f4:	88fb      	ldrh	r3, [r7, #6]
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	7bfa      	ldrb	r2, [r7, #15]
 80013fa:	2110      	movs	r1, #16
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 fd13 	bl	8001e28 <SENSOR_IO_Write>
}  
 8001402:	bf00      	nop
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 800140a:	b580      	push	{r7, lr}
 800140c:	b084      	sub	sp, #16
 800140e:	af00      	add	r7, sp, #0
 8001410:	4603      	mov	r3, r0
 8001412:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001414:	2300      	movs	r3, #0
 8001416:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001418:	2111      	movs	r1, #17
 800141a:	20d4      	movs	r0, #212	; 0xd4
 800141c:	f000 fd1e 	bl	8001e5c <SENSOR_IO_Read>
 8001420:	4603      	mov	r3, r0
 8001422:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001428:	7bbb      	ldrb	r3, [r7, #14]
 800142a:	f003 0303 	and.w	r3, r3, #3
 800142e:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001430:	7bba      	ldrb	r2, [r7, #14]
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	4313      	orrs	r3, r2
 8001436:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8001438:	7bbb      	ldrb	r3, [r7, #14]
 800143a:	461a      	mov	r2, r3
 800143c:	2111      	movs	r1, #17
 800143e:	20d4      	movs	r0, #212	; 0xd4
 8001440:	f000 fcf2 	bl	8001e28 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001444:	2112      	movs	r1, #18
 8001446:	20d4      	movs	r0, #212	; 0xd4
 8001448:	f000 fd08 	bl	8001e5c <SENSOR_IO_Read>
 800144c:	4603      	mov	r3, r0
 800144e:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	0a1b      	lsrs	r3, r3, #8
 8001454:	b29b      	uxth	r3, r3
 8001456:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001458:	7bbb      	ldrb	r3, [r7, #14]
 800145a:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800145e:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001460:	7bba      	ldrb	r2, [r7, #14]
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	4313      	orrs	r3, r2
 8001466:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001468:	7bbb      	ldrb	r3, [r7, #14]
 800146a:	461a      	mov	r2, r3
 800146c:	2112      	movs	r1, #18
 800146e:	20d4      	movs	r0, #212	; 0xd4
 8001470:	f000 fcda 	bl	8001e28 <SENSOR_IO_Write>
}
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001482:	2300      	movs	r3, #0
 8001484:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001486:	2111      	movs	r1, #17
 8001488:	20d4      	movs	r0, #212	; 0xd4
 800148a:	f000 fce7 	bl	8001e5c <SENSOR_IO_Read>
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	f003 030f 	and.w	r3, r3, #15
 8001498:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	461a      	mov	r2, r3
 800149e:	2111      	movs	r1, #17
 80014a0:	20d4      	movs	r0, #212	; 0xd4
 80014a2:	f000 fcc1 	bl	8001e28 <SENSOR_IO_Write>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80014b2:	f000 fcaf 	bl	8001e14 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 80014b6:	210f      	movs	r1, #15
 80014b8:	20d4      	movs	r0, #212	; 0xd4
 80014ba:	f000 fccf 	bl	8001e5c <SENSOR_IO_Read>
 80014be:	4603      	mov	r3, r0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80014ce:	2300      	movs	r3, #0
 80014d0:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 80014d2:	2116      	movs	r1, #22
 80014d4:	20d4      	movs	r0, #212	; 0xd4
 80014d6:	f000 fcc1 	bl	8001e5c <SENSOR_IO_Read>
 80014da:	4603      	mov	r3, r0
 80014dc:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014e4:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80014e6:	88fb      	ldrh	r3, [r7, #6]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014f2:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	461a      	mov	r2, r3
 80014f8:	2116      	movs	r1, #22
 80014fa:	20d4      	movs	r0, #212	; 0xd4
 80014fc:	f000 fc94 	bl	8001e28 <SENSOR_IO_Write>
}
 8001500:	bf00      	nop
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8001510:	2300      	movs	r3, #0
 8001512:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001518:	f04f 0300 	mov.w	r3, #0
 800151c:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800151e:	2111      	movs	r1, #17
 8001520:	20d4      	movs	r0, #212	; 0xd4
 8001522:	f000 fc9b 	bl	8001e5c <SENSOR_IO_Read>
 8001526:	4603      	mov	r3, r0
 8001528:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 800152a:	f107 0208 	add.w	r2, r7, #8
 800152e:	2306      	movs	r3, #6
 8001530:	2122      	movs	r1, #34	; 0x22
 8001532:	20d4      	movs	r0, #212	; 0xd4
 8001534:	f000 fcb0 	bl	8001e98 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001538:	2300      	movs	r3, #0
 800153a:	77fb      	strb	r3, [r7, #31]
 800153c:	e01c      	b.n	8001578 <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800153e:	7ffb      	ldrb	r3, [r7, #31]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	3301      	adds	r3, #1
 8001544:	3320      	adds	r3, #32
 8001546:	443b      	add	r3, r7
 8001548:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800154c:	b29b      	uxth	r3, r3
 800154e:	021b      	lsls	r3, r3, #8
 8001550:	b29a      	uxth	r2, r3
 8001552:	7ffb      	ldrb	r3, [r7, #31]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	3320      	adds	r3, #32
 8001558:	443b      	add	r3, r7
 800155a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800155e:	b29b      	uxth	r3, r3
 8001560:	4413      	add	r3, r2
 8001562:	b29a      	uxth	r2, r3
 8001564:	7ffb      	ldrb	r3, [r7, #31]
 8001566:	b212      	sxth	r2, r2
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	3320      	adds	r3, #32
 800156c:	443b      	add	r3, r7
 800156e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001572:	7ffb      	ldrb	r3, [r7, #31]
 8001574:	3301      	adds	r3, #1
 8001576:	77fb      	strb	r3, [r7, #31]
 8001578:	7ffb      	ldrb	r3, [r7, #31]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d9df      	bls.n	800153e <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 800157e:	7dfb      	ldrb	r3, [r7, #23]
 8001580:	f003 030c 	and.w	r3, r3, #12
 8001584:	2b0c      	cmp	r3, #12
 8001586:	d829      	bhi.n	80015dc <LSM6DSL_GyroReadXYZAngRate+0xd4>
 8001588:	a201      	add	r2, pc, #4	; (adr r2, 8001590 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 800158a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158e:	bf00      	nop
 8001590:	080015c5 	.word	0x080015c5
 8001594:	080015dd 	.word	0x080015dd
 8001598:	080015dd 	.word	0x080015dd
 800159c:	080015dd 	.word	0x080015dd
 80015a0:	080015cb 	.word	0x080015cb
 80015a4:	080015dd 	.word	0x080015dd
 80015a8:	080015dd 	.word	0x080015dd
 80015ac:	080015dd 	.word	0x080015dd
 80015b0:	080015d1 	.word	0x080015d1
 80015b4:	080015dd 	.word	0x080015dd
 80015b8:	080015dd 	.word	0x080015dd
 80015bc:	080015dd 	.word	0x080015dd
 80015c0:	080015d7 	.word	0x080015d7
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 80015c4:	4b16      	ldr	r3, [pc, #88]	; (8001620 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 80015c6:	61bb      	str	r3, [r7, #24]
    break;
 80015c8:	e008      	b.n	80015dc <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 80015cc:	61bb      	str	r3, [r7, #24]
    break;
 80015ce:	e005      	b.n	80015dc <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 80015d0:	4b15      	ldr	r3, [pc, #84]	; (8001628 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 80015d2:	61bb      	str	r3, [r7, #24]
    break;
 80015d4:	e002      	b.n	80015dc <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <LSM6DSL_GyroReadXYZAngRate+0x124>)
 80015d8:	61bb      	str	r3, [r7, #24]
    break;    
 80015da:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80015dc:	2300      	movs	r3, #0
 80015de:	77fb      	strb	r3, [r7, #31]
 80015e0:	e016      	b.n	8001610 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 80015e2:	7ffb      	ldrb	r3, [r7, #31]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	3320      	adds	r3, #32
 80015e8:	443b      	add	r3, r7
 80015ea:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80015ee:	ee07 3a90 	vmov	s15, r3
 80015f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f6:	7ffb      	ldrb	r3, [r7, #31]
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8001602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001606:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800160a:	7ffb      	ldrb	r3, [r7, #31]
 800160c:	3301      	adds	r3, #1
 800160e:	77fb      	strb	r3, [r7, #31]
 8001610:	7ffb      	ldrb	r3, [r7, #31]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d9e5      	bls.n	80015e2 <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 8001616:	bf00      	nop
 8001618:	bf00      	nop
 800161a:	3720      	adds	r7, #32
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	410c0000 	.word	0x410c0000
 8001624:	418c0000 	.word	0x418c0000
 8001628:	420c0000 	.word	0x420c0000
 800162c:	428c0000 	.word	0x428c0000

08001630 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4a07      	ldr	r2, [pc, #28]	; (800165c <vApplicationGetIdleTaskMemory+0x2c>)
 8001640:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	4a06      	ldr	r2, [pc, #24]	; (8001660 <vApplicationGetIdleTaskMemory+0x30>)
 8001646:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2280      	movs	r2, #128	; 0x80
 800164c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	2000027c 	.word	0x2000027c
 8001660:	200002d0 	.word	0x200002d0

08001664 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800166c:	1d39      	adds	r1, r7, #4
 800166e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001672:	2201      	movs	r2, #1
 8001674:	4803      	ldr	r0, [pc, #12]	; (8001684 <__io_putchar+0x20>)
 8001676:	f004 fa97 	bl	8005ba8 <HAL_UART_Transmit>
  return ch;
 800167a:	687b      	ldr	r3, [r7, #4]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	2000051c 	.word	0x2000051c

08001688 <ReadSensorValues>:
//	}
//	if(currentSensor%4==0) currentSensor = 0;
//}

void ReadSensorValues(int sensorIndex)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
//	printf("hello");
  switch (sensorIndex)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b03      	cmp	r3, #3
 8001694:	d822      	bhi.n	80016dc <ReadSensorValues+0x54>
 8001696:	a201      	add	r2, pc, #4	; (adr r2, 800169c <ReadSensorValues+0x14>)
 8001698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169c:	080016ad 	.word	0x080016ad
 80016a0:	080016bd 	.word	0x080016bd
 80016a4:	080016c5 	.word	0x080016c5
 80016a8:	080016cd 	.word	0x080016cd
  {
    case 0: // Display humidity from HTS221
      humidity = BSP_HSENSOR_ReadHumidity();
 80016ac:	f000 fc8c 	bl	8001fc8 <BSP_HSENSOR_ReadHumidity>
 80016b0:	eef0 7a40 	vmov.f32	s15, s0
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <ReadSensorValues+0x60>)
 80016b6:	edc3 7a00 	vstr	s15, [r3]
      break;
 80016ba:	e010      	b.n	80016de <ReadSensorValues+0x56>

    case 1: // Display magnetic field (X-axis) from LIS3MDL
      BSP_MAGNETO_GetXYZ(magnetometer);
 80016bc:	480b      	ldr	r0, [pc, #44]	; (80016ec <ReadSensorValues+0x64>)
 80016be:	f000 fcbd 	bl	800203c <BSP_MAGNETO_GetXYZ>
      break;
 80016c2:	e00c      	b.n	80016de <ReadSensorValues+0x56>

    case 2: // Display gyroscope (X-axis) from LSM6DSL
      BSP_GYRO_GetXYZ(gyroscope);
 80016c4:	480a      	ldr	r0, [pc, #40]	; (80016f0 <ReadSensorValues+0x68>)
 80016c6:	f000 fc47 	bl	8001f58 <BSP_GYRO_GetXYZ>
      break;
 80016ca:	e008      	b.n	80016de <ReadSensorValues+0x56>

    case 3: // Display pressure from LPS22HB
      pressure = BSP_PSENSOR_ReadPressure();
 80016cc:	f000 fcee 	bl	80020ac <BSP_PSENSOR_ReadPressure>
 80016d0:	eef0 7a40 	vmov.f32	s15, s0
 80016d4:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <ReadSensorValues+0x6c>)
 80016d6:	edc3 7a00 	vstr	s15, [r3]
      break;
 80016da:	e000      	b.n	80016de <ReadSensorValues+0x56>

    default:
      break;
 80016dc:	bf00      	nop
  }
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000630 	.word	0x20000630
 80016ec:	20000634 	.word	0x20000634
 80016f0:	20000640 	.word	0x20000640
 80016f4:	2000064c 	.word	0x2000064c

080016f8 <PrintAllSensorValues>:
  // Read pressure from LPS22HB
  pressure = BSP_PSENSOR_ReadPressure();


}
void PrintAllSensorValues(void) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	  printf("Humidity: %.2f %%\r\n", humidity);
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <PrintAllSensorValues+0x58>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe ff39 	bl	8000578 <__aeabi_f2d>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4812      	ldr	r0, [pc, #72]	; (8001754 <PrintAllSensorValues+0x5c>)
 800170c:	f006 ff90 	bl	8008630 <iprintf>
	  printf("Magnetometer X: %.2f mG\r\n", magnetometer[0]);
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <PrintAllSensorValues+0x60>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ff2f 	bl	8000578 <__aeabi_f2d>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	480f      	ldr	r0, [pc, #60]	; (800175c <PrintAllSensorValues+0x64>)
 8001720:	f006 ff86 	bl	8008630 <iprintf>
	  printf("Gyroscope X: %.2f dps\r\n", gyroscope[0]);
 8001724:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <PrintAllSensorValues+0x68>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe ff25 	bl	8000578 <__aeabi_f2d>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	480c      	ldr	r0, [pc, #48]	; (8001764 <PrintAllSensorValues+0x6c>)
 8001734:	f006 ff7c 	bl	8008630 <iprintf>
	  printf("Pressure: %.2f hPa\r\n", pressure);
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <PrintAllSensorValues+0x70>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe ff1b 	bl	8000578 <__aeabi_f2d>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4809      	ldr	r0, [pc, #36]	; (800176c <PrintAllSensorValues+0x74>)
 8001748:	f006 ff72 	bl	8008630 <iprintf>
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000630 	.word	0x20000630
 8001754:	0800abd0 	.word	0x0800abd0
 8001758:	20000634 	.word	0x20000634
 800175c:	0800abe4 	.word	0x0800abe4
 8001760:	20000640 	.word	0x20000640
 8001764:	0800ac00 	.word	0x0800ac00
 8001768:	2000064c 	.word	0x2000064c
 800176c:	0800ac18 	.word	0x0800ac18

08001770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001770:	b5b0      	push	{r4, r5, r7, lr}
 8001772:	b096      	sub	sp, #88	; 0x58
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	for (int int1=0; int1<100; int1++){
 8001776:	2300      	movs	r3, #0
 8001778:	657b      	str	r3, [r7, #84]	; 0x54
 800177a:	e007      	b.n	800178c <main+0x1c>
		str[int1]='\0';
 800177c:	4a30      	ldr	r2, [pc, #192]	; (8001840 <main+0xd0>)
 800177e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001780:	4413      	add	r3, r2
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
	for (int int1=0; int1<100; int1++){
 8001786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001788:	3301      	adds	r3, #1
 800178a:	657b      	str	r3, [r7, #84]	; 0x54
 800178c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800178e:	2b63      	cmp	r3, #99	; 0x63
 8001790:	ddf4      	ble.n	800177c <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001792:	f000 fef0 	bl	8002576 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001796:	f000 f863 	bl	8001860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800179a:	f000 f94d 	bl	8001a38 <MX_GPIO_Init>
  MX_TIM2_Init();
 800179e:	f000 f8b1 	bl	8001904 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80017a2:	f000 f8fd 	bl	80019a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_HSENSOR_Init(); // Initialize HTS221 (humidity sensor)
 80017a6:	f000 fbef 	bl	8001f88 <BSP_HSENSOR_Init>
  BSP_MAGNETO_Init(); // Initialize LIS3MDL (magnetometer)
 80017aa:	f000 fc1b 	bl	8001fe4 <BSP_MAGNETO_Init>
  BSP_GYRO_Init();    // Initialize LSM6DSL (gyroscope)
 80017ae:	f000 fb91 	bl	8001ed4 <BSP_GYRO_Init>
  BSP_PSENSOR_Init(); // Initialize LPS22HB (pressure sensor)
 80017b2:	f000 fc5b 	bl	800206c <BSP_PSENSOR_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80017b6:	4b23      	ldr	r3, [pc, #140]	; (8001844 <main+0xd4>)
 80017b8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80017bc:	461d      	mov	r5, r3
 80017be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80017ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017ce:	2100      	movs	r1, #0
 80017d0:	4618      	mov	r0, r3
 80017d2:	f005 f854 	bl	800687e <osThreadCreate>
 80017d6:	4603      	mov	r3, r0
 80017d8:	4a1b      	ldr	r2, [pc, #108]	; (8001848 <main+0xd8>)
 80017da:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 80017dc:	4b1b      	ldr	r3, [pc, #108]	; (800184c <main+0xdc>)
 80017de:	f107 041c 	add.w	r4, r7, #28
 80017e2:	461d      	mov	r5, r3
 80017e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80017f0:	f107 031c 	add.w	r3, r7, #28
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f005 f841 	bl	800687e <osThreadCreate>
 80017fc:	4603      	mov	r3, r0
 80017fe:	4a14      	ldr	r2, [pc, #80]	; (8001850 <main+0xe0>)
 8001800:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 8001802:	4b14      	ldr	r3, [pc, #80]	; (8001854 <main+0xe4>)
 8001804:	463c      	mov	r4, r7
 8001806:	461d      	mov	r5, r3
 8001808:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800180a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800180c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001810:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8001814:	463b      	mov	r3, r7
 8001816:	2100      	movs	r1, #0
 8001818:	4618      	mov	r0, r3
 800181a:	f005 f830 	bl	800687e <osThreadCreate>
 800181e:	4603      	mov	r3, r0
 8001820:	4a0d      	ldr	r2, [pc, #52]	; (8001858 <main+0xe8>)
 8001822:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
//  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001824:	f005 f824 	bl	8006870 <osKernelStart>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

//	  ReadAllSensorValues();
	  ReadSensorValues(currentSensor);
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <main+0xec>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff2b 	bl	8001688 <ReadSensorValues>
//	  PrintSensorValues(currentSensor);
	  PrintAllSensorValues();
 8001832:	f7ff ff61 	bl	80016f8 <PrintAllSensorValues>
	  HAL_Delay(100); // 10 Hz sampling rate (100 ms delay between reads)
 8001836:	2064      	movs	r0, #100	; 0x64
 8001838:	f000 fed6 	bl	80025e8 <HAL_Delay>
	  ReadSensorValues(currentSensor);
 800183c:	e7f4      	b.n	8001828 <main+0xb8>
 800183e:	bf00      	nop
 8001840:	200005b8 	.word	0x200005b8
 8001844:	0800ac30 	.word	0x0800ac30
 8001848:	200005ac 	.word	0x200005ac
 800184c:	0800ac4c 	.word	0x0800ac4c
 8001850:	200005b0 	.word	0x200005b0
 8001854:	0800ac68 	.word	0x0800ac68
 8001858:	200005b4 	.word	0x200005b4
 800185c:	2000061c 	.word	0x2000061c

08001860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b096      	sub	sp, #88	; 0x58
 8001864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	2244      	movs	r2, #68	; 0x44
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f006 fa6c 	bl	8007d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001874:	463b      	mov	r3, r7
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
 8001880:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001882:	2000      	movs	r0, #0
 8001884:	f001 ffc8 	bl	8003818 <HAL_PWREx_ControlVoltageScaling>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800188e:	f000 f9cb 	bl	8001c28 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001892:	2310      	movs	r3, #16
 8001894:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001896:	2301      	movs	r3, #1
 8001898:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800189a:	2300      	movs	r3, #0
 800189c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800189e:	2360      	movs	r3, #96	; 0x60
 80018a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a2:	2302      	movs	r3, #2
 80018a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80018a6:	2301      	movs	r3, #1
 80018a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80018aa:	2301      	movs	r3, #1
 80018ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80018ae:	233c      	movs	r3, #60	; 0x3c
 80018b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018b2:	2302      	movs	r3, #2
 80018b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018b6:	2302      	movs	r3, #2
 80018b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018ba:	2302      	movs	r3, #2
 80018bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4618      	mov	r0, r3
 80018c4:	f002 f84c 	bl	8003960 <HAL_RCC_OscConfig>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80018ce:	f000 f9ab 	bl	8001c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d2:	230f      	movs	r3, #15
 80018d4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d6:	2303      	movs	r3, #3
 80018d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018da:	2300      	movs	r3, #0
 80018dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018e6:	463b      	mov	r3, r7
 80018e8:	2105      	movs	r1, #5
 80018ea:	4618      	mov	r0, r3
 80018ec:	f002 fc52 	bl	8004194 <HAL_RCC_ClockConfig>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80018f6:	f000 f997 	bl	8001c28 <Error_Handler>
  }
}
 80018fa:	bf00      	nop
 80018fc:	3758      	adds	r7, #88	; 0x58
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800190a:	f107 0310 	add.w	r3, r7, #16
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001922:	4b1e      	ldr	r3, [pc, #120]	; (800199c <MX_TIM2_Init+0x98>)
 8001924:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001928:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800192a:	4b1c      	ldr	r3, [pc, #112]	; (800199c <MX_TIM2_Init+0x98>)
 800192c:	2200      	movs	r2, #0
 800192e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001930:	4b1a      	ldr	r3, [pc, #104]	; (800199c <MX_TIM2_Init+0x98>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2721;
 8001936:	4b19      	ldr	r3, [pc, #100]	; (800199c <MX_TIM2_Init+0x98>)
 8001938:	f640 22a1 	movw	r2, #2721	; 0xaa1
 800193c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193e:	4b17      	ldr	r3, [pc, #92]	; (800199c <MX_TIM2_Init+0x98>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001944:	4b15      	ldr	r3, [pc, #84]	; (800199c <MX_TIM2_Init+0x98>)
 8001946:	2200      	movs	r2, #0
 8001948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800194a:	4814      	ldr	r0, [pc, #80]	; (800199c <MX_TIM2_Init+0x98>)
 800194c:	f003 fc2a 	bl	80051a4 <HAL_TIM_Base_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001956:	f000 f967 	bl	8001c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800195a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800195e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001960:	f107 0310 	add.w	r3, r7, #16
 8001964:	4619      	mov	r1, r3
 8001966:	480d      	ldr	r0, [pc, #52]	; (800199c <MX_TIM2_Init+0x98>)
 8001968:	f003 fe03 	bl	8005572 <HAL_TIM_ConfigClockSource>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001972:	f000 f959 	bl	8001c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001976:	2300      	movs	r3, #0
 8001978:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	4619      	mov	r1, r3
 8001982:	4806      	ldr	r0, [pc, #24]	; (800199c <MX_TIM2_Init+0x98>)
 8001984:	f004 f81a 	bl	80059bc <HAL_TIMEx_MasterConfigSynchronization>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800198e:	f000 f94b 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001992:	bf00      	nop
 8001994:	3720      	adds	r7, #32
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	200004d0 	.word	0x200004d0

080019a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019a4:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <MX_USART1_UART_Init+0x90>)
 80019a6:	4a23      	ldr	r2, [pc, #140]	; (8001a34 <MX_USART1_UART_Init+0x94>)
 80019a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019aa:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <MX_USART1_UART_Init+0x90>)
 80019ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019b2:	4b1f      	ldr	r3, [pc, #124]	; (8001a30 <MX_USART1_UART_Init+0x90>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019b8:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <MX_USART1_UART_Init+0x90>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019be:	4b1c      	ldr	r3, [pc, #112]	; (8001a30 <MX_USART1_UART_Init+0x90>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019c4:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <MX_USART1_UART_Init+0x90>)
 80019c6:	220c      	movs	r2, #12
 80019c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ca:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <MX_USART1_UART_Init+0x90>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d0:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <MX_USART1_UART_Init+0x90>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019d6:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <MX_USART1_UART_Init+0x90>)
 80019d8:	2200      	movs	r2, #0
 80019da:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019dc:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <MX_USART1_UART_Init+0x90>)
 80019de:	2200      	movs	r2, #0
 80019e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019e2:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <MX_USART1_UART_Init+0x90>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019e8:	4811      	ldr	r0, [pc, #68]	; (8001a30 <MX_USART1_UART_Init+0x90>)
 80019ea:	f004 f88d 	bl	8005b08 <HAL_UART_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80019f4:	f000 f918 	bl	8001c28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019f8:	2100      	movs	r1, #0
 80019fa:	480d      	ldr	r0, [pc, #52]	; (8001a30 <MX_USART1_UART_Init+0x90>)
 80019fc:	f004 fe56 	bl	80066ac <HAL_UARTEx_SetTxFifoThreshold>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a06:	f000 f90f 	bl	8001c28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4808      	ldr	r0, [pc, #32]	; (8001a30 <MX_USART1_UART_Init+0x90>)
 8001a0e:	f004 fe8b 	bl	8006728 <HAL_UARTEx_SetRxFifoThreshold>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a18:	f000 f906 	bl	8001c28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a1c:	4804      	ldr	r0, [pc, #16]	; (8001a30 <MX_USART1_UART_Init+0x90>)
 8001a1e:	f004 fe0c 	bl	800663a <HAL_UARTEx_DisableFifoMode>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001a28:	f000 f8fe 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	2000051c 	.word	0x2000051c
 8001a34:	40013800 	.word	0x40013800

08001a38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3e:	f107 030c 	add.w	r3, r7, #12
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
 8001a4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a4e:	4b23      	ldr	r3, [pc, #140]	; (8001adc <MX_GPIO_Init+0xa4>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a52:	4a22      	ldr	r2, [pc, #136]	; (8001adc <MX_GPIO_Init+0xa4>)
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a5a:	4b20      	ldr	r3, [pc, #128]	; (8001adc <MX_GPIO_Init+0xa4>)
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a66:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <MX_GPIO_Init+0xa4>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6a:	4a1c      	ldr	r2, [pc, #112]	; (8001adc <MX_GPIO_Init+0xa4>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a72:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <MX_GPIO_Init+0xa4>)
 8001a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	607b      	str	r3, [r7, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(myled_GPIO_Port, myled_Pin, GPIO_PIN_RESET);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a84:	4816      	ldr	r0, [pc, #88]	; (8001ae0 <MX_GPIO_Init+0xa8>)
 8001a86:	f001 f85f 	bl	8002b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : mybutton_Pin */
  GPIO_InitStruct.Pin = mybutton_Pin;
 8001a8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a90:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(mybutton_GPIO_Port, &GPIO_InitStruct);
 8001a9a:	f107 030c 	add.w	r3, r7, #12
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4810      	ldr	r0, [pc, #64]	; (8001ae4 <MX_GPIO_Init+0xac>)
 8001aa2:	f000 fea7 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : myled_Pin */
  GPIO_InitStruct.Pin = myled_Pin;
 8001aa6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001aaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aac:	2301      	movs	r3, #1
 8001aae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(myled_GPIO_Port, &GPIO_InitStruct);
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	4619      	mov	r1, r3
 8001abe:	4808      	ldr	r0, [pc, #32]	; (8001ae0 <MX_GPIO_Init+0xa8>)
 8001ac0:	f000 fe98 	bl	80027f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2105      	movs	r1, #5
 8001ac8:	2028      	movs	r0, #40	; 0x28
 8001aca:	f000 fe69 	bl	80027a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ace:	2028      	movs	r0, #40	; 0x28
 8001ad0:	f000 fe82 	bl	80027d8 <HAL_NVIC_EnableIRQ>

}
 8001ad4:	bf00      	nop
 8001ad6:	3720      	adds	r7, #32
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	48000400 	.word	0x48000400
 8001ae4:	48000800 	.word	0x48000800

08001ae8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osDelay(100);
 8001af0:	2064      	movs	r0, #100	; 0x64
 8001af2:	f004 ff10 	bl	8006916 <osDelay>
	test++;
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <StartDefaultTask+0x48>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	3301      	adds	r3, #1
 8001afc:	4a0c      	ldr	r2, [pc, #48]	; (8001b30 <StartDefaultTask+0x48>)
 8001afe:	6013      	str	r3, [r2, #0]
	ReadSensorValues(currentSensor);
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <StartDefaultTask+0x4c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fdbf 	bl	8001688 <ReadSensorValues>
//	printf("test2: %d\n", test2);
//	printf("humidity: %d\n", (int)humidity);
	sprintf(str, "%f", humidity);
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <StartDefaultTask+0x50>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe fd32 	bl	8000578 <__aeabi_f2d>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4908      	ldr	r1, [pc, #32]	; (8001b3c <StartDefaultTask+0x54>)
 8001b1a:	4809      	ldr	r0, [pc, #36]	; (8001b40 <StartDefaultTask+0x58>)
 8001b1c:	f006 fda0 	bl	8008660 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)&str, sizeof(str), HAL_MAX_DELAY);
 8001b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b24:	2264      	movs	r2, #100	; 0x64
 8001b26:	4906      	ldr	r1, [pc, #24]	; (8001b40 <StartDefaultTask+0x58>)
 8001b28:	4806      	ldr	r0, [pc, #24]	; (8001b44 <StartDefaultTask+0x5c>)
 8001b2a:	f004 f83d 	bl	8005ba8 <HAL_UART_Transmit>
	osDelay(100);
 8001b2e:	e7df      	b.n	8001af0 <StartDefaultTask+0x8>
 8001b30:	20000620 	.word	0x20000620
 8001b34:	2000061c 	.word	0x2000061c
 8001b38:	20000630 	.word	0x20000630
 8001b3c:	0800ac84 	.word	0x0800ac84
 8001b40:	200005b8 	.word	0x200005b8
 8001b44:	2000051c 	.word	0x2000051c

08001b48 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(2);
 8001b50:	2002      	movs	r0, #2
 8001b52:	f004 fee0 	bl	8006916 <osDelay>
    status = HAL_GPIO_ReadPin(mybutton_GPIO_Port, mybutton_Pin);
 8001b56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b5a:	481b      	ldr	r0, [pc, #108]	; (8001bc8 <StartTask02+0x80>)
 8001b5c:	f000 ffdc 	bl	8002b18 <HAL_GPIO_ReadPin>
 8001b60:	4603      	mov	r3, r0
 8001b62:	461a      	mov	r2, r3
 8001b64:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <StartTask02+0x84>)
 8001b66:	701a      	strb	r2, [r3, #0]
    	if(status != prev){ // button was pressed or released
 8001b68:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <StartTask02+0x84>)
 8001b6a:	781a      	ldrb	r2, [r3, #0]
 8001b6c:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <StartTask02+0x88>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d018      	beq.n	8001ba6 <StartTask02+0x5e>
    		if(status == GPIO_PIN_RESET){ // button was pressed SET=1, RESET=0
 8001b74:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <StartTask02+0x84>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d110      	bne.n	8001b9e <StartTask02+0x56>
    			HAL_GPIO_TogglePin(myled_GPIO_Port, myled_Pin); // Toggle LED
 8001b7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b80:	4814      	ldr	r0, [pc, #80]	; (8001bd4 <StartTask02+0x8c>)
 8001b82:	f000 fff9 	bl	8002b78 <HAL_GPIO_TogglePin>
    			currentSensor = (currentSensor+1)%4;
 8001b86:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <StartTask02+0x90>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	425a      	negs	r2, r3
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	f002 0203 	and.w	r2, r2, #3
 8001b96:	bf58      	it	pl
 8001b98:	4253      	negpl	r3, r2
 8001b9a:	4a0f      	ldr	r2, [pc, #60]	; (8001bd8 <StartTask02+0x90>)
 8001b9c:	6013      	str	r3, [r2, #0]
    		}
    		prev = status; // update previous status
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <StartTask02+0x84>)
 8001ba0:	781a      	ldrb	r2, [r3, #0]
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <StartTask02+0x88>)
 8001ba4:	701a      	strb	r2, [r3, #0]
    	}
    test2 = (test2+1)%1000;
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <StartTask02+0x94>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <StartTask02+0x98>)
 8001bae:	fb83 1302 	smull	r1, r3, r3, r2
 8001bb2:	1199      	asrs	r1, r3, #6
 8001bb4:	17d3      	asrs	r3, r2, #31
 8001bb6:	1acb      	subs	r3, r1, r3
 8001bb8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bbc:	fb01 f303 	mul.w	r3, r1, r3
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	4a06      	ldr	r2, [pc, #24]	; (8001bdc <StartTask02+0x94>)
 8001bc4:	6013      	str	r3, [r2, #0]
    osDelay(2);
 8001bc6:	e7c3      	b.n	8001b50 <StartTask02+0x8>
 8001bc8:	48000800 	.word	0x48000800
 8001bcc:	2000062d 	.word	0x2000062d
 8001bd0:	2000062c 	.word	0x2000062c
 8001bd4:	48000400 	.word	0x48000400
 8001bd8:	2000061c 	.word	0x2000061c
 8001bdc:	20000624 	.word	0x20000624
 8001be0:	10624dd3 	.word	0x10624dd3

08001be4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8001bec:	2064      	movs	r0, #100	; 0x64
 8001bee:	f004 fe92 	bl	8006916 <osDelay>
//    PrintSensorValues(currentSensor);
//    PrintAllSensorValues();
//    printf("hello me\n");
    test3++;
 8001bf2:	4b03      	ldr	r3, [pc, #12]	; (8001c00 <StartTask03+0x1c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	4a01      	ldr	r2, [pc, #4]	; (8001c00 <StartTask03+0x1c>)
 8001bfa:	6013      	str	r3, [r2, #0]
    osDelay(100);
 8001bfc:	e7f6      	b.n	8001bec <StartTask03+0x8>
 8001bfe:	bf00      	nop
 8001c00:	20000628 	.word	0x20000628

08001c04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d101      	bne.n	8001c1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c16:	f000 fcc7 	bl	80025a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40001400 	.word	0x40001400

08001c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c2c:	b672      	cpsid	i
}
 8001c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <Error_Handler+0x8>
	...

08001c34 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001c3c:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <I2Cx_MspInit+0xa8>)
 8001c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c40:	4a26      	ldr	r2, [pc, #152]	; (8001cdc <I2Cx_MspInit+0xa8>)
 8001c42:	f043 0302 	orr.w	r3, r3, #2
 8001c46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c48:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <I2Cx_MspInit+0xa8>)
 8001c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001c54:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c58:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001c5a:	2312      	movs	r3, #18
 8001c5c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c62:	2303      	movs	r3, #3
 8001c64:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001c66:	2304      	movs	r3, #4
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	4619      	mov	r1, r3
 8001c70:	481b      	ldr	r0, [pc, #108]	; (8001ce0 <I2Cx_MspInit+0xac>)
 8001c72:	f000 fdbf 	bl	80027f4 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001c76:	f107 0314 	add.w	r3, r7, #20
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4818      	ldr	r0, [pc, #96]	; (8001ce0 <I2Cx_MspInit+0xac>)
 8001c7e:	f000 fdb9 	bl	80027f4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001c82:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <I2Cx_MspInit+0xa8>)
 8001c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c86:	4a15      	ldr	r2, [pc, #84]	; (8001cdc <I2Cx_MspInit+0xa8>)
 8001c88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c8c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c8e:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <I2Cx_MspInit+0xa8>)
 8001c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <I2Cx_MspInit+0xa8>)
 8001c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9e:	4a0f      	ldr	r2, [pc, #60]	; (8001cdc <I2Cx_MspInit+0xa8>)
 8001ca0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ca4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001ca6:	4b0d      	ldr	r3, [pc, #52]	; (8001cdc <I2Cx_MspInit+0xa8>)
 8001ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001caa:	4a0c      	ldr	r2, [pc, #48]	; (8001cdc <I2Cx_MspInit+0xa8>)
 8001cac:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001cb0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	210f      	movs	r1, #15
 8001cb6:	2021      	movs	r0, #33	; 0x21
 8001cb8:	f000 fd72 	bl	80027a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001cbc:	2021      	movs	r0, #33	; 0x21
 8001cbe:	f000 fd8b 	bl	80027d8 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	210f      	movs	r1, #15
 8001cc6:	2022      	movs	r0, #34	; 0x22
 8001cc8:	f000 fd6a 	bl	80027a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001ccc:	2022      	movs	r0, #34	; 0x22
 8001cce:	f000 fd83 	bl	80027d8 <HAL_NVIC_EnableIRQ>
}
 8001cd2:	bf00      	nop
 8001cd4:	3728      	adds	r7, #40	; 0x28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	48000400 	.word	0x48000400

08001ce4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a12      	ldr	r2, [pc, #72]	; (8001d38 <I2Cx_Init+0x54>)
 8001cf0:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a11      	ldr	r2, [pc, #68]	; (8001d3c <I2Cx_Init+0x58>)
 8001cf6:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff ff89 	bl	8001c34 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 ff65 	bl	8002bf2 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001d28:	2100      	movs	r1, #0
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f001 fd08 	bl	8003740 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40005800 	.word	0x40005800
 8001d3c:	00702681 	.word	0x00702681

08001d40 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08a      	sub	sp, #40	; 0x28
 8001d44:	af04      	add	r7, sp, #16
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	4608      	mov	r0, r1
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4603      	mov	r3, r0
 8001d50:	72fb      	strb	r3, [r7, #11]
 8001d52:	460b      	mov	r3, r1
 8001d54:	813b      	strh	r3, [r7, #8]
 8001d56:	4613      	mov	r3, r2
 8001d58:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001d5e:	7afb      	ldrb	r3, [r7, #11]
 8001d60:	b299      	uxth	r1, r3
 8001d62:	88f8      	ldrh	r0, [r7, #6]
 8001d64:	893a      	ldrh	r2, [r7, #8]
 8001d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d6a:	9302      	str	r3, [sp, #8]
 8001d6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d6e:	9301      	str	r3, [sp, #4]
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	4603      	mov	r3, r0
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f001 f922 	bl	8002fc0 <HAL_I2C_Mem_Read>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001d80:	7dfb      	ldrb	r3, [r7, #23]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d004      	beq.n	8001d90 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001d86:	7afb      	ldrb	r3, [r7, #11]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f000 f832 	bl	8001df4 <I2Cx_Error>
  }
  return status;
 8001d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b08a      	sub	sp, #40	; 0x28
 8001d9e:	af04      	add	r7, sp, #16
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	4608      	mov	r0, r1
 8001da4:	4611      	mov	r1, r2
 8001da6:	461a      	mov	r2, r3
 8001da8:	4603      	mov	r3, r0
 8001daa:	72fb      	strb	r3, [r7, #11]
 8001dac:	460b      	mov	r3, r1
 8001dae:	813b      	strh	r3, [r7, #8]
 8001db0:	4613      	mov	r3, r2
 8001db2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001db8:	7afb      	ldrb	r3, [r7, #11]
 8001dba:	b299      	uxth	r1, r3
 8001dbc:	88f8      	ldrh	r0, [r7, #6]
 8001dbe:	893a      	ldrh	r2, [r7, #8]
 8001dc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc4:	9302      	str	r3, [sp, #8]
 8001dc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001dc8:	9301      	str	r3, [sp, #4]
 8001dca:	6a3b      	ldr	r3, [r7, #32]
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	4603      	mov	r3, r0
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f000 ffe1 	bl	8002d98 <HAL_I2C_Mem_Write>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001dda:	7dfb      	ldrb	r3, [r7, #23]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d004      	beq.n	8001dea <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001de0:	7afb      	ldrb	r3, [r7, #11]
 8001de2:	4619      	mov	r1, r3
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f000 f805 	bl	8001df4 <I2Cx_Error>
  }
  return status;
 8001dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 ff85 	bl	8002d10 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff ff6c 	bl	8001ce4 <I2Cx_Init>
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001e18:	4802      	ldr	r0, [pc, #8]	; (8001e24 <SENSOR_IO_Init+0x10>)
 8001e1a:	f7ff ff63 	bl	8001ce4 <I2Cx_Init>
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000650 	.word	0x20000650

08001e28 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af02      	add	r7, sp, #8
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]
 8001e32:	460b      	mov	r3, r1
 8001e34:	71bb      	strb	r3, [r7, #6]
 8001e36:	4613      	mov	r3, r2
 8001e38:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001e3a:	79bb      	ldrb	r3, [r7, #6]
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	79f9      	ldrb	r1, [r7, #7]
 8001e40:	2301      	movs	r3, #1
 8001e42:	9301      	str	r3, [sp, #4]
 8001e44:	1d7b      	adds	r3, r7, #5
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	2301      	movs	r3, #1
 8001e4a:	4803      	ldr	r0, [pc, #12]	; (8001e58 <SENSOR_IO_Write+0x30>)
 8001e4c:	f7ff ffa5 	bl	8001d9a <I2Cx_WriteMultiple>
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000650 	.word	0x20000650

08001e5c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af02      	add	r7, sp, #8
 8001e62:	4603      	mov	r3, r0
 8001e64:	460a      	mov	r2, r1
 8001e66:	71fb      	strb	r3, [r7, #7]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001e70:	79bb      	ldrb	r3, [r7, #6]
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	79f9      	ldrb	r1, [r7, #7]
 8001e76:	2301      	movs	r3, #1
 8001e78:	9301      	str	r3, [sp, #4]
 8001e7a:	f107 030f 	add.w	r3, r7, #15
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	2301      	movs	r3, #1
 8001e82:	4804      	ldr	r0, [pc, #16]	; (8001e94 <SENSOR_IO_Read+0x38>)
 8001e84:	f7ff ff5c 	bl	8001d40 <I2Cx_ReadMultiple>

  return read_value;
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000650 	.word	0x20000650

08001e98 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af02      	add	r7, sp, #8
 8001e9e:	603a      	str	r2, [r7, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	71bb      	strb	r3, [r7, #6]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001eae:	79bb      	ldrb	r3, [r7, #6]
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	79f9      	ldrb	r1, [r7, #7]
 8001eb4:	88bb      	ldrh	r3, [r7, #4]
 8001eb6:	9301      	str	r3, [sp, #4]
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	4804      	ldr	r0, [pc, #16]	; (8001ed0 <SENSOR_IO_ReadMultiple+0x38>)
 8001ec0:	f7ff ff3e 	bl	8001d40 <I2Cx_ReadMultiple>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	b29b      	uxth	r3, r3
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20000650 	.word	0x20000650

08001ed4 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001ee2:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <BSP_GYRO_Init+0x7c>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	4798      	blx	r3
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b6a      	cmp	r3, #106	; 0x6a
 8001eec:	d002      	beq.n	8001ef4 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	73fb      	strb	r3, [r7, #15]
 8001ef2:	e028      	b.n	8001f46 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8001ef4:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <BSP_GYRO_Init+0x80>)
 8001ef6:	4a16      	ldr	r2, [pc, #88]	; (8001f50 <BSP_GYRO_Init+0x7c>)
 8001ef8:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8001efe:	2330      	movs	r3, #48	; 0x30
 8001f00:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001f0a:	2340      	movs	r3, #64	; 0x40
 8001f0c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8001f12:	230c      	movs	r3, #12
 8001f14:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8001f16:	7aba      	ldrb	r2, [r7, #10]
 8001f18:	797b      	ldrb	r3, [r7, #5]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001f20:	7a3b      	ldrb	r3, [r7, #8]
 8001f22:	f043 0304 	orr.w	r3, r3, #4
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	021b      	lsls	r3, r3, #8
 8001f2a:	b21a      	sxth	r2, r3
 8001f2c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	b21b      	sxth	r3, r3
 8001f34:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8001f36:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <BSP_GYRO_Init+0x80>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	89ba      	ldrh	r2, [r7, #12]
 8001f3e:	4610      	mov	r0, r2
 8001f40:	4798      	blx	r3
    
    ret = GYRO_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	2000004c 	.word	0x2000004c
 8001f54:	200006a4 	.word	0x200006a4

08001f58 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8001f60:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <BSP_GYRO_GetXYZ+0x2c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d009      	beq.n	8001f7c <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <BSP_GYRO_GetXYZ+0x2c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d004      	beq.n	8001f7c <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8001f72:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <BSP_GYRO_GetXYZ+0x2c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	4798      	blx	r3
    }
  }
}
 8001f7c:	bf00      	nop
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	200006a4 	.word	0x200006a4

08001f88 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8001f8e:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <BSP_HSENSOR_Init+0x38>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	20be      	movs	r0, #190	; 0xbe
 8001f94:	4798      	blx	r3
 8001f96:	4603      	mov	r3, r0
 8001f98:	2bbc      	cmp	r3, #188	; 0xbc
 8001f9a:	d002      	beq.n	8001fa2 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	607b      	str	r3, [r7, #4]
 8001fa0:	e009      	b.n	8001fb6 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <BSP_HSENSOR_Init+0x3c>)
 8001fa4:	4a06      	ldr	r2, [pc, #24]	; (8001fc0 <BSP_HSENSOR_Init+0x38>)
 8001fa6:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <BSP_HSENSOR_Init+0x3c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	20be      	movs	r0, #190	; 0xbe
 8001fb0:	4798      	blx	r3
    ret = HSENSOR_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001fb6:	687b      	ldr	r3, [r7, #4]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	200006a8 	.word	0x200006a8

08001fc8 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8001fcc:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <BSP_HSENSOR_ReadHumidity+0x18>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	20be      	movs	r0, #190	; 0xbe
 8001fd4:	4798      	blx	r3
 8001fd6:	eef0 7a40 	vmov.f32	s15, s0
}
 8001fda:	eeb0 0a67 	vmov.f32	s0, s15
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	200006a8 	.word	0x200006a8

08001fe4 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <BSP_MAGNETO_Init+0x50>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	4798      	blx	r3
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b3d      	cmp	r3, #61	; 0x3d
 8001ff8:	d002      	beq.n	8002000 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	71fb      	strb	r3, [r7, #7]
 8001ffe:	e013      	b.n	8002028 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8002000:	4b0d      	ldr	r3, [pc, #52]	; (8002038 <BSP_MAGNETO_Init+0x54>)
 8002002:	4a0c      	ldr	r2, [pc, #48]	; (8002034 <BSP_MAGNETO_Init+0x50>)
 8002004:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8002006:	2358      	movs	r3, #88	; 0x58
 8002008:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 800200a:	2300      	movs	r3, #0
 800200c:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 800200e:	2300      	movs	r3, #0
 8002010:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8002012:	2308      	movs	r3, #8
 8002014:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8002016:	2340      	movs	r3, #64	; 0x40
 8002018:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 800201a:	4b07      	ldr	r3, [pc, #28]	; (8002038 <BSP_MAGNETO_Init+0x54>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	463a      	mov	r2, r7
 8002022:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002026:	4798      	blx	r3
  } 

  return ret;  
 8002028:	79fb      	ldrb	r3, [r7, #7]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	2000000c 	.word	0x2000000c
 8002038:	200006ac 	.word	0x200006ac

0800203c <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <BSP_MAGNETO_GetXYZ+0x2c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d009      	beq.n	8002060 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <BSP_MAGNETO_GetXYZ+0x2c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	2b00      	cmp	r3, #0
 8002054:	d004      	beq.n	8002060 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8002056:	4b04      	ldr	r3, [pc, #16]	; (8002068 <BSP_MAGNETO_GetXYZ+0x2c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	4798      	blx	r3
    }
  }
}
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	200006ac 	.word	0x200006ac

0800206c <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8002072:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <BSP_PSENSOR_Init+0x38>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	20ba      	movs	r0, #186	; 0xba
 8002078:	4798      	blx	r3
 800207a:	4603      	mov	r3, r0
 800207c:	2bb1      	cmp	r3, #177	; 0xb1
 800207e:	d002      	beq.n	8002086 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	e009      	b.n	800209a <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8002086:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <BSP_PSENSOR_Init+0x3c>)
 8002088:	4a06      	ldr	r2, [pc, #24]	; (80020a4 <BSP_PSENSOR_Init+0x38>)
 800208a:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <BSP_PSENSOR_Init+0x3c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	20ba      	movs	r0, #186	; 0xba
 8002094:	4798      	blx	r3
    ret = PSENSOR_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800209a:	687b      	ldr	r3, [r7, #4]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20000040 	.word	0x20000040
 80020a8:	200006b0 	.word	0x200006b0

080020ac <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 80020b0:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <BSP_PSENSOR_ReadPressure+0x18>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	20ba      	movs	r0, #186	; 0xba
 80020b8:	4798      	blx	r3
 80020ba:	eef0 7a40 	vmov.f32	s15, s0
}
 80020be:	eeb0 0a67 	vmov.f32	s0, s15
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	200006b0 	.word	0x200006b0

080020c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ce:	4b11      	ldr	r3, [pc, #68]	; (8002114 <HAL_MspInit+0x4c>)
 80020d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d2:	4a10      	ldr	r2, [pc, #64]	; (8002114 <HAL_MspInit+0x4c>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6613      	str	r3, [r2, #96]	; 0x60
 80020da:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <HAL_MspInit+0x4c>)
 80020dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	607b      	str	r3, [r7, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020e6:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_MspInit+0x4c>)
 80020e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ea:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <HAL_MspInit+0x4c>)
 80020ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f0:	6593      	str	r3, [r2, #88]	; 0x58
 80020f2:	4b08      	ldr	r3, [pc, #32]	; (8002114 <HAL_MspInit+0x4c>)
 80020f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fa:	603b      	str	r3, [r7, #0]
 80020fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020fe:	2200      	movs	r2, #0
 8002100:	210f      	movs	r1, #15
 8002102:	f06f 0001 	mvn.w	r0, #1
 8002106:	f000 fb4b 	bl	80027a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40021000 	.word	0x40021000

08002118 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002128:	d113      	bne.n	8002152 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800212a:	4b0c      	ldr	r3, [pc, #48]	; (800215c <HAL_TIM_Base_MspInit+0x44>)
 800212c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212e:	4a0b      	ldr	r2, [pc, #44]	; (800215c <HAL_TIM_Base_MspInit+0x44>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6593      	str	r3, [r2, #88]	; 0x58
 8002136:	4b09      	ldr	r3, [pc, #36]	; (800215c <HAL_TIM_Base_MspInit+0x44>)
 8002138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002142:	2200      	movs	r2, #0
 8002144:	2105      	movs	r1, #5
 8002146:	201c      	movs	r0, #28
 8002148:	f000 fb2a 	bl	80027a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800214c:	201c      	movs	r0, #28
 800214e:	f000 fb43 	bl	80027d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002152:	bf00      	nop
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40021000 	.word	0x40021000

08002160 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b0ae      	sub	sp, #184	; 0xb8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002178:	f107 0310 	add.w	r3, r7, #16
 800217c:	2294      	movs	r2, #148	; 0x94
 800217e:	2100      	movs	r1, #0
 8002180:	4618      	mov	r0, r3
 8002182:	f005 fde3 	bl	8007d4c <memset>
  if(huart->Instance==USART1)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a21      	ldr	r2, [pc, #132]	; (8002210 <HAL_UART_MspInit+0xb0>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d13a      	bne.n	8002206 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002190:	2301      	movs	r3, #1
 8002192:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002194:	2300      	movs	r3, #0
 8002196:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002198:	f107 0310 	add.w	r3, r7, #16
 800219c:	4618      	mov	r0, r3
 800219e:	f002 fae9 	bl	8004774 <HAL_RCCEx_PeriphCLKConfig>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021a8:	f7ff fd3e 	bl	8001c28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021ac:	4b19      	ldr	r3, [pc, #100]	; (8002214 <HAL_UART_MspInit+0xb4>)
 80021ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b0:	4a18      	ldr	r2, [pc, #96]	; (8002214 <HAL_UART_MspInit+0xb4>)
 80021b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021b6:	6613      	str	r3, [r2, #96]	; 0x60
 80021b8:	4b16      	ldr	r3, [pc, #88]	; (8002214 <HAL_UART_MspInit+0xb4>)
 80021ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c4:	4b13      	ldr	r3, [pc, #76]	; (8002214 <HAL_UART_MspInit+0xb4>)
 80021c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c8:	4a12      	ldr	r2, [pc, #72]	; (8002214 <HAL_UART_MspInit+0xb4>)
 80021ca:	f043 0302 	orr.w	r3, r3, #2
 80021ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021d0:	4b10      	ldr	r3, [pc, #64]	; (8002214 <HAL_UART_MspInit+0xb4>)
 80021d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021dc:	23c0      	movs	r3, #192	; 0xc0
 80021de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e2:	2302      	movs	r3, #2
 80021e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ee:	2303      	movs	r3, #3
 80021f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021f4:	2307      	movs	r3, #7
 80021f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021fe:	4619      	mov	r1, r3
 8002200:	4805      	ldr	r0, [pc, #20]	; (8002218 <HAL_UART_MspInit+0xb8>)
 8002202:	f000 faf7 	bl	80027f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002206:	bf00      	nop
 8002208:	37b8      	adds	r7, #184	; 0xb8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40013800 	.word	0x40013800
 8002214:	40021000 	.word	0x40021000
 8002218:	48000400 	.word	0x48000400

0800221c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08e      	sub	sp, #56	; 0x38
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800222a:	4b34      	ldr	r3, [pc, #208]	; (80022fc <HAL_InitTick+0xe0>)
 800222c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222e:	4a33      	ldr	r2, [pc, #204]	; (80022fc <HAL_InitTick+0xe0>)
 8002230:	f043 0320 	orr.w	r3, r3, #32
 8002234:	6593      	str	r3, [r2, #88]	; 0x58
 8002236:	4b31      	ldr	r3, [pc, #196]	; (80022fc <HAL_InitTick+0xe0>)
 8002238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223a:	f003 0320 	and.w	r3, r3, #32
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002242:	f107 0210 	add.w	r2, r7, #16
 8002246:	f107 0314 	add.w	r3, r7, #20
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f002 f99f 	bl	8004590 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002258:	2b00      	cmp	r3, #0
 800225a:	d103      	bne.n	8002264 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800225c:	f002 f96c 	bl	8004538 <HAL_RCC_GetPCLK1Freq>
 8002260:	6378      	str	r0, [r7, #52]	; 0x34
 8002262:	e004      	b.n	800226e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002264:	f002 f968 	bl	8004538 <HAL_RCC_GetPCLK1Freq>
 8002268:	4603      	mov	r3, r0
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800226e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002270:	4a23      	ldr	r2, [pc, #140]	; (8002300 <HAL_InitTick+0xe4>)
 8002272:	fba2 2303 	umull	r2, r3, r2, r3
 8002276:	0c9b      	lsrs	r3, r3, #18
 8002278:	3b01      	subs	r3, #1
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800227c:	4b21      	ldr	r3, [pc, #132]	; (8002304 <HAL_InitTick+0xe8>)
 800227e:	4a22      	ldr	r2, [pc, #136]	; (8002308 <HAL_InitTick+0xec>)
 8002280:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002282:	4b20      	ldr	r3, [pc, #128]	; (8002304 <HAL_InitTick+0xe8>)
 8002284:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002288:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800228a:	4a1e      	ldr	r2, [pc, #120]	; (8002304 <HAL_InitTick+0xe8>)
 800228c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002290:	4b1c      	ldr	r3, [pc, #112]	; (8002304 <HAL_InitTick+0xe8>)
 8002292:	2200      	movs	r2, #0
 8002294:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002296:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <HAL_InitTick+0xe8>)
 8002298:	2200      	movs	r2, #0
 800229a:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800229c:	4b19      	ldr	r3, [pc, #100]	; (8002304 <HAL_InitTick+0xe8>)
 800229e:	2200      	movs	r2, #0
 80022a0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 80022a2:	4818      	ldr	r0, [pc, #96]	; (8002304 <HAL_InitTick+0xe8>)
 80022a4:	f002 ff7e 	bl	80051a4 <HAL_TIM_Base_Init>
 80022a8:	4603      	mov	r3, r0
 80022aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80022ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d11b      	bne.n	80022ee <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80022b6:	4813      	ldr	r0, [pc, #76]	; (8002304 <HAL_InitTick+0xe8>)
 80022b8:	f002 ffcc 	bl	8005254 <HAL_TIM_Base_Start_IT>
 80022bc:	4603      	mov	r3, r0
 80022be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80022c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d111      	bne.n	80022ee <HAL_InitTick+0xd2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80022ca:	2037      	movs	r0, #55	; 0x37
 80022cc:	f000 fa84 	bl	80027d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b0f      	cmp	r3, #15
 80022d4:	d808      	bhi.n	80022e8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80022d6:	2200      	movs	r2, #0
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	2037      	movs	r0, #55	; 0x37
 80022dc:	f000 fa60 	bl	80027a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022e0:	4a0a      	ldr	r2, [pc, #40]	; (800230c <HAL_InitTick+0xf0>)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	e002      	b.n	80022ee <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80022ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3738      	adds	r7, #56	; 0x38
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40021000 	.word	0x40021000
 8002300:	431bde83 	.word	0x431bde83
 8002304:	200006b4 	.word	0x200006b4
 8002308:	40001400 	.word	0x40001400
 800230c:	20000084 	.word	0x20000084

08002310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002314:	e7fe      	b.n	8002314 <NMI_Handler+0x4>

08002316 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002316:	b480      	push	{r7}
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800231a:	e7fe      	b.n	800231a <HardFault_Handler+0x4>

0800231c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002320:	e7fe      	b.n	8002320 <MemManage_Handler+0x4>

08002322 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002322:	b480      	push	{r7}
 8002324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002326:	e7fe      	b.n	8002326 <BusFault_Handler+0x4>

08002328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800232c:	e7fe      	b.n	800232c <UsageFault_Handler+0x4>

0800232e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002340:	4802      	ldr	r0, [pc, #8]	; (800234c <TIM2_IRQHandler+0x10>)
 8002342:	f002 fff7 	bl	8005334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	200004d0 	.word	0x200004d0

08002350 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(mybutton_Pin);
 8002354:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002358:	f000 fc28 	bl	8002bac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800235c:	bf00      	nop
 800235e:	bd80      	pop	{r7, pc}

08002360 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002364:	4802      	ldr	r0, [pc, #8]	; (8002370 <TIM7_IRQHandler+0x10>)
 8002366:	f002 ffe5 	bl	8005334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	200006b4 	.word	0x200006b4

08002374 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return 1;
 8002378:	2301      	movs	r3, #1
}
 800237a:	4618      	mov	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <_kill>:

int _kill(int pid, int sig)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800238e:	f005 fca5 	bl	8007cdc <__errno>
 8002392:	4603      	mov	r3, r0
 8002394:	2216      	movs	r2, #22
 8002396:	601a      	str	r2, [r3, #0]
  return -1;
 8002398:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800239c:	4618      	mov	r0, r3
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <_exit>:

void _exit (int status)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff ffe7 	bl	8002384 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023b6:	e7fe      	b.n	80023b6 <_exit+0x12>

080023b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	e00a      	b.n	80023e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023ca:	f3af 8000 	nop.w
 80023ce:	4601      	mov	r1, r0
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	60ba      	str	r2, [r7, #8]
 80023d6:	b2ca      	uxtb	r2, r1
 80023d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	3301      	adds	r3, #1
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	dbf0      	blt.n	80023ca <_read+0x12>
  }

  return len;
 80023e8:	687b      	ldr	r3, [r7, #4]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b086      	sub	sp, #24
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	e009      	b.n	8002418 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	60ba      	str	r2, [r7, #8]
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff f929 	bl	8001664 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	3301      	adds	r3, #1
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	429a      	cmp	r2, r3
 800241e:	dbf1      	blt.n	8002404 <_write+0x12>
  }
  return len;
 8002420:	687b      	ldr	r3, [r7, #4]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <_close>:

int _close(int file)
{
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002452:	605a      	str	r2, [r3, #4]
  return 0;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <_isatty>:

int _isatty(int file)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800246a:	2301      	movs	r3, #1
}
 800246c:	4618      	mov	r0, r3
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800249c:	4a14      	ldr	r2, [pc, #80]	; (80024f0 <_sbrk+0x5c>)
 800249e:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <_sbrk+0x60>)
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024a8:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <_sbrk+0x64>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d102      	bne.n	80024b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024b0:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <_sbrk+0x64>)
 80024b2:	4a12      	ldr	r2, [pc, #72]	; (80024fc <_sbrk+0x68>)
 80024b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024b6:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <_sbrk+0x64>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d207      	bcs.n	80024d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024c4:	f005 fc0a 	bl	8007cdc <__errno>
 80024c8:	4603      	mov	r3, r0
 80024ca:	220c      	movs	r2, #12
 80024cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024d2:	e009      	b.n	80024e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024d4:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <_sbrk+0x64>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024da:	4b07      	ldr	r3, [pc, #28]	; (80024f8 <_sbrk+0x64>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4413      	add	r3, r2
 80024e2:	4a05      	ldr	r2, [pc, #20]	; (80024f8 <_sbrk+0x64>)
 80024e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024e6:	68fb      	ldr	r3, [r7, #12]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	200a0000 	.word	0x200a0000
 80024f4:	00000400 	.word	0x00000400
 80024f8:	20000700 	.word	0x20000700
 80024fc:	20001428 	.word	0x20001428

08002500 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002504:	4b06      	ldr	r3, [pc, #24]	; (8002520 <SystemInit+0x20>)
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250a:	4a05      	ldr	r2, [pc, #20]	; (8002520 <SystemInit+0x20>)
 800250c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002510:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002524:	f8df d034 	ldr.w	sp, [pc, #52]	; 800255c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002528:	f7ff ffea 	bl	8002500 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800252c:	480c      	ldr	r0, [pc, #48]	; (8002560 <LoopForever+0x6>)
  ldr r1, =_edata
 800252e:	490d      	ldr	r1, [pc, #52]	; (8002564 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002530:	4a0d      	ldr	r2, [pc, #52]	; (8002568 <LoopForever+0xe>)
  movs r3, #0
 8002532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002534:	e002      	b.n	800253c <LoopCopyDataInit>

08002536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800253a:	3304      	adds	r3, #4

0800253c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800253c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800253e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002540:	d3f9      	bcc.n	8002536 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002542:	4a0a      	ldr	r2, [pc, #40]	; (800256c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002544:	4c0a      	ldr	r4, [pc, #40]	; (8002570 <LoopForever+0x16>)
  movs r3, #0
 8002546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002548:	e001      	b.n	800254e <LoopFillZerobss>

0800254a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800254a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800254c:	3204      	adds	r2, #4

0800254e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800254e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002550:	d3fb      	bcc.n	800254a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002552:	f005 fbc9 	bl	8007ce8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002556:	f7ff f90b 	bl	8001770 <main>

0800255a <LoopForever>:

LoopForever:
    b LoopForever
 800255a:	e7fe      	b.n	800255a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800255c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002564:	20000260 	.word	0x20000260
  ldr r2, =_sidata
 8002568:	0800b0ec 	.word	0x0800b0ec
  ldr r2, =_sbss
 800256c:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 8002570:	20001424 	.word	0x20001424

08002574 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002574:	e7fe      	b.n	8002574 <ADC1_IRQHandler>

08002576 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002580:	2003      	movs	r0, #3
 8002582:	f000 f902 	bl	800278a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002586:	200f      	movs	r0, #15
 8002588:	f7ff fe48 	bl	800221c <HAL_InitTick>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	71fb      	strb	r3, [r7, #7]
 8002596:	e001      	b.n	800259c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002598:	f7ff fd96 	bl	80020c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800259c:	79fb      	ldrb	r3, [r7, #7]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_IncTick+0x20>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	461a      	mov	r2, r3
 80025b2:	4b06      	ldr	r3, [pc, #24]	; (80025cc <HAL_IncTick+0x24>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4413      	add	r3, r2
 80025b8:	4a04      	ldr	r2, [pc, #16]	; (80025cc <HAL_IncTick+0x24>)
 80025ba:	6013      	str	r3, [r2, #0]
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	20000088 	.word	0x20000088
 80025cc:	20000704 	.word	0x20000704

080025d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return uwTick;
 80025d4:	4b03      	ldr	r3, [pc, #12]	; (80025e4 <HAL_GetTick+0x14>)
 80025d6:	681b      	ldr	r3, [r3, #0]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	20000704 	.word	0x20000704

080025e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025f0:	f7ff ffee 	bl	80025d0 <HAL_GetTick>
 80025f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002600:	d005      	beq.n	800260e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002602:	4b0a      	ldr	r3, [pc, #40]	; (800262c <HAL_Delay+0x44>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4413      	add	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800260e:	bf00      	nop
 8002610:	f7ff ffde 	bl	80025d0 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	429a      	cmp	r2, r3
 800261e:	d8f7      	bhi.n	8002610 <HAL_Delay+0x28>
  {
  }
}
 8002620:	bf00      	nop
 8002622:	bf00      	nop
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20000088 	.word	0x20000088

08002630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002640:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <__NVIC_SetPriorityGrouping+0x44>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800264c:	4013      	ands	r3, r2
 800264e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800265c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002662:	4a04      	ldr	r2, [pc, #16]	; (8002674 <__NVIC_SetPriorityGrouping+0x44>)
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	60d3      	str	r3, [r2, #12]
}
 8002668:	bf00      	nop
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800267c:	4b04      	ldr	r3, [pc, #16]	; (8002690 <__NVIC_GetPriorityGrouping+0x18>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	0a1b      	lsrs	r3, r3, #8
 8002682:	f003 0307 	and.w	r3, r3, #7
}
 8002686:	4618      	mov	r0, r3
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	db0b      	blt.n	80026be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	f003 021f 	and.w	r2, r3, #31
 80026ac:	4907      	ldr	r1, [pc, #28]	; (80026cc <__NVIC_EnableIRQ+0x38>)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	2001      	movs	r0, #1
 80026b6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	e000e100 	.word	0xe000e100

080026d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	6039      	str	r1, [r7, #0]
 80026da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	db0a      	blt.n	80026fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	490c      	ldr	r1, [pc, #48]	; (800271c <__NVIC_SetPriority+0x4c>)
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	0112      	lsls	r2, r2, #4
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	440b      	add	r3, r1
 80026f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026f8:	e00a      	b.n	8002710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	4908      	ldr	r1, [pc, #32]	; (8002720 <__NVIC_SetPriority+0x50>)
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	3b04      	subs	r3, #4
 8002708:	0112      	lsls	r2, r2, #4
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	440b      	add	r3, r1
 800270e:	761a      	strb	r2, [r3, #24]
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	e000e100 	.word	0xe000e100
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002724:	b480      	push	{r7}
 8002726:	b089      	sub	sp, #36	; 0x24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f1c3 0307 	rsb	r3, r3, #7
 800273e:	2b04      	cmp	r3, #4
 8002740:	bf28      	it	cs
 8002742:	2304      	movcs	r3, #4
 8002744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	3304      	adds	r3, #4
 800274a:	2b06      	cmp	r3, #6
 800274c:	d902      	bls.n	8002754 <NVIC_EncodePriority+0x30>
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3b03      	subs	r3, #3
 8002752:	e000      	b.n	8002756 <NVIC_EncodePriority+0x32>
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43da      	mvns	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	401a      	ands	r2, r3
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800276c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	fa01 f303 	lsl.w	r3, r1, r3
 8002776:	43d9      	mvns	r1, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800277c:	4313      	orrs	r3, r2
         );
}
 800277e:	4618      	mov	r0, r3
 8002780:	3724      	adds	r7, #36	; 0x24
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff ff4c 	bl	8002630 <__NVIC_SetPriorityGrouping>
}
 8002798:	bf00      	nop
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
 80027ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027b2:	f7ff ff61 	bl	8002678 <__NVIC_GetPriorityGrouping>
 80027b6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	68b9      	ldr	r1, [r7, #8]
 80027bc:	6978      	ldr	r0, [r7, #20]
 80027be:	f7ff ffb1 	bl	8002724 <NVIC_EncodePriority>
 80027c2:	4602      	mov	r2, r0
 80027c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c8:	4611      	mov	r1, r2
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff ff80 	bl	80026d0 <__NVIC_SetPriority>
}
 80027d0:	bf00      	nop
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff ff54 	bl	8002694 <__NVIC_EnableIRQ>
}
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002802:	e166      	b.n	8002ad2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	2101      	movs	r1, #1
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	fa01 f303 	lsl.w	r3, r1, r3
 8002810:	4013      	ands	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 8158 	beq.w	8002acc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	2b01      	cmp	r3, #1
 8002826:	d005      	beq.n	8002834 <HAL_GPIO_Init+0x40>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d130      	bne.n	8002896 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	2203      	movs	r2, #3
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4313      	orrs	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800286a:	2201      	movs	r2, #1
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43db      	mvns	r3, r3
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	4013      	ands	r3, r2
 8002878:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	091b      	lsrs	r3, r3, #4
 8002880:	f003 0201 	and.w	r2, r3, #1
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	4313      	orrs	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d017      	beq.n	80028d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	2203      	movs	r2, #3
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43db      	mvns	r3, r3
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	4013      	ands	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d123      	bne.n	8002926 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	08da      	lsrs	r2, r3, #3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3208      	adds	r2, #8
 80028e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	220f      	movs	r2, #15
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4013      	ands	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	691a      	ldr	r2, [r3, #16]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	08da      	lsrs	r2, r3, #3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3208      	adds	r2, #8
 8002920:	6939      	ldr	r1, [r7, #16]
 8002922:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	2203      	movs	r2, #3
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4013      	ands	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 0203 	and.w	r2, r3, #3
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 80b2 	beq.w	8002acc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002968:	4b61      	ldr	r3, [pc, #388]	; (8002af0 <HAL_GPIO_Init+0x2fc>)
 800296a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296c:	4a60      	ldr	r2, [pc, #384]	; (8002af0 <HAL_GPIO_Init+0x2fc>)
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	6613      	str	r3, [r2, #96]	; 0x60
 8002974:	4b5e      	ldr	r3, [pc, #376]	; (8002af0 <HAL_GPIO_Init+0x2fc>)
 8002976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002980:	4a5c      	ldr	r2, [pc, #368]	; (8002af4 <HAL_GPIO_Init+0x300>)
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	089b      	lsrs	r3, r3, #2
 8002986:	3302      	adds	r3, #2
 8002988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800298c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	220f      	movs	r2, #15
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4013      	ands	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029aa:	d02b      	beq.n	8002a04 <HAL_GPIO_Init+0x210>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a52      	ldr	r2, [pc, #328]	; (8002af8 <HAL_GPIO_Init+0x304>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d025      	beq.n	8002a00 <HAL_GPIO_Init+0x20c>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a51      	ldr	r2, [pc, #324]	; (8002afc <HAL_GPIO_Init+0x308>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d01f      	beq.n	80029fc <HAL_GPIO_Init+0x208>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a50      	ldr	r2, [pc, #320]	; (8002b00 <HAL_GPIO_Init+0x30c>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d019      	beq.n	80029f8 <HAL_GPIO_Init+0x204>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a4f      	ldr	r2, [pc, #316]	; (8002b04 <HAL_GPIO_Init+0x310>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d013      	beq.n	80029f4 <HAL_GPIO_Init+0x200>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a4e      	ldr	r2, [pc, #312]	; (8002b08 <HAL_GPIO_Init+0x314>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d00d      	beq.n	80029f0 <HAL_GPIO_Init+0x1fc>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a4d      	ldr	r2, [pc, #308]	; (8002b0c <HAL_GPIO_Init+0x318>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d007      	beq.n	80029ec <HAL_GPIO_Init+0x1f8>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a4c      	ldr	r2, [pc, #304]	; (8002b10 <HAL_GPIO_Init+0x31c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d101      	bne.n	80029e8 <HAL_GPIO_Init+0x1f4>
 80029e4:	2307      	movs	r3, #7
 80029e6:	e00e      	b.n	8002a06 <HAL_GPIO_Init+0x212>
 80029e8:	2308      	movs	r3, #8
 80029ea:	e00c      	b.n	8002a06 <HAL_GPIO_Init+0x212>
 80029ec:	2306      	movs	r3, #6
 80029ee:	e00a      	b.n	8002a06 <HAL_GPIO_Init+0x212>
 80029f0:	2305      	movs	r3, #5
 80029f2:	e008      	b.n	8002a06 <HAL_GPIO_Init+0x212>
 80029f4:	2304      	movs	r3, #4
 80029f6:	e006      	b.n	8002a06 <HAL_GPIO_Init+0x212>
 80029f8:	2303      	movs	r3, #3
 80029fa:	e004      	b.n	8002a06 <HAL_GPIO_Init+0x212>
 80029fc:	2302      	movs	r3, #2
 80029fe:	e002      	b.n	8002a06 <HAL_GPIO_Init+0x212>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <HAL_GPIO_Init+0x212>
 8002a04:	2300      	movs	r3, #0
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	f002 0203 	and.w	r2, r2, #3
 8002a0c:	0092      	lsls	r2, r2, #2
 8002a0e:	4093      	lsls	r3, r2
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a16:	4937      	ldr	r1, [pc, #220]	; (8002af4 <HAL_GPIO_Init+0x300>)
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	089b      	lsrs	r3, r3, #2
 8002a1c:	3302      	adds	r3, #2
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a24:	4b3b      	ldr	r3, [pc, #236]	; (8002b14 <HAL_GPIO_Init+0x320>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4013      	ands	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a48:	4a32      	ldr	r2, [pc, #200]	; (8002b14 <HAL_GPIO_Init+0x320>)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a4e:	4b31      	ldr	r3, [pc, #196]	; (8002b14 <HAL_GPIO_Init+0x320>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	43db      	mvns	r3, r3
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a72:	4a28      	ldr	r2, [pc, #160]	; (8002b14 <HAL_GPIO_Init+0x320>)
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a78:	4b26      	ldr	r3, [pc, #152]	; (8002b14 <HAL_GPIO_Init+0x320>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4013      	ands	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a9c:	4a1d      	ldr	r2, [pc, #116]	; (8002b14 <HAL_GPIO_Init+0x320>)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002aa2:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <HAL_GPIO_Init+0x320>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ac6:	4a13      	ldr	r2, [pc, #76]	; (8002b14 <HAL_GPIO_Init+0x320>)
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f47f ae91 	bne.w	8002804 <HAL_GPIO_Init+0x10>
  }
}
 8002ae2:	bf00      	nop
 8002ae4:	bf00      	nop
 8002ae6:	371c      	adds	r7, #28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40010000 	.word	0x40010000
 8002af8:	48000400 	.word	0x48000400
 8002afc:	48000800 	.word	0x48000800
 8002b00:	48000c00 	.word	0x48000c00
 8002b04:	48001000 	.word	0x48001000
 8002b08:	48001400 	.word	0x48001400
 8002b0c:	48001800 	.word	0x48001800
 8002b10:	48001c00 	.word	0x48001c00
 8002b14:	40010400 	.word	0x40010400

08002b18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	887b      	ldrh	r3, [r7, #2]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d002      	beq.n	8002b36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b30:	2301      	movs	r3, #1
 8002b32:	73fb      	strb	r3, [r7, #15]
 8002b34:	e001      	b.n	8002b3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b36:	2300      	movs	r3, #0
 8002b38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	807b      	strh	r3, [r7, #2]
 8002b54:	4613      	mov	r3, r2
 8002b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b58:	787b      	ldrb	r3, [r7, #1]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b5e:	887a      	ldrh	r2, [r7, #2]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b64:	e002      	b.n	8002b6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b66:	887a      	ldrh	r2, [r7, #2]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b8a:	887a      	ldrh	r2, [r7, #2]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	041a      	lsls	r2, r3, #16
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	43d9      	mvns	r1, r3
 8002b96:	887b      	ldrh	r3, [r7, #2]
 8002b98:	400b      	ands	r3, r1
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	619a      	str	r2, [r3, #24]
}
 8002ba0:	bf00      	nop
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002bb6:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	88fb      	ldrh	r3, [r7, #6]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d006      	beq.n	8002bd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bc2:	4a05      	ldr	r2, [pc, #20]	; (8002bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bc4:	88fb      	ldrh	r3, [r7, #6]
 8002bc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bc8:	88fb      	ldrh	r3, [r7, #6]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 f806 	bl	8002bdc <HAL_GPIO_EXTI_Callback>
  }
}
 8002bd0:	bf00      	nop
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40010400 	.word	0x40010400

08002bdc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e081      	b.n	8002d08 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d106      	bne.n	8002c1e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 f8a8 	bl	8002d6e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2224      	movs	r2, #36	; 0x24
 8002c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0201 	bic.w	r2, r2, #1
 8002c34:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c42:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c52:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d107      	bne.n	8002c6c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c68:	609a      	str	r2, [r3, #8]
 8002c6a:	e006      	b.n	8002c7a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c78:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d104      	bne.n	8002c8c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c8a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6812      	ldr	r2, [r2, #0]
 8002c96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c9e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68da      	ldr	r2, [r3, #12]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69d9      	ldr	r1, [r3, #28]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1a      	ldr	r2, [r3, #32]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f042 0201 	orr.w	r2, r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e021      	b.n	8002d66 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2224      	movs	r2, #36	; 0x24
 8002d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0201 	bic.w	r2, r2, #1
 8002d38:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f821 	bl	8002d82 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
	...

08002d98 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b088      	sub	sp, #32
 8002d9c:	af02      	add	r7, sp, #8
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	4608      	mov	r0, r1
 8002da2:	4611      	mov	r1, r2
 8002da4:	461a      	mov	r2, r3
 8002da6:	4603      	mov	r3, r0
 8002da8:	817b      	strh	r3, [r7, #10]
 8002daa:	460b      	mov	r3, r1
 8002dac:	813b      	strh	r3, [r7, #8]
 8002dae:	4613      	mov	r3, r2
 8002db0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b20      	cmp	r3, #32
 8002dbc:	f040 80f9 	bne.w	8002fb2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d002      	beq.n	8002dcc <HAL_I2C_Mem_Write+0x34>
 8002dc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d105      	bne.n	8002dd8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dd2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0ed      	b.n	8002fb4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_I2C_Mem_Write+0x4e>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e0e6      	b.n	8002fb4 <HAL_I2C_Mem_Write+0x21c>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dee:	f7ff fbef 	bl	80025d0 <HAL_GetTick>
 8002df2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	2319      	movs	r3, #25
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 fac3 	bl	800338c <I2C_WaitOnFlagUntilTimeout>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e0d1      	b.n	8002fb4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2221      	movs	r2, #33	; 0x21
 8002e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2240      	movs	r2, #64	; 0x40
 8002e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a3a      	ldr	r2, [r7, #32]
 8002e2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e38:	88f8      	ldrh	r0, [r7, #6]
 8002e3a:	893a      	ldrh	r2, [r7, #8]
 8002e3c:	8979      	ldrh	r1, [r7, #10]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	9301      	str	r3, [sp, #4]
 8002e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	4603      	mov	r3, r0
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 f9d3 	bl	80031f4 <I2C_RequestMemoryWrite>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d005      	beq.n	8002e60 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0a9      	b.n	8002fb4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	2bff      	cmp	r3, #255	; 0xff
 8002e68:	d90e      	bls.n	8002e88 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	22ff      	movs	r2, #255	; 0xff
 8002e6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	8979      	ldrh	r1, [r7, #10]
 8002e78:	2300      	movs	r3, #0
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 fc2b 	bl	80036dc <I2C_TransferConfig>
 8002e86:	e00f      	b.n	8002ea8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	8979      	ldrh	r1, [r7, #10]
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 fc1a 	bl	80036dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 faad 	bl	800340c <I2C_WaitOnTXISFlagUntilTimeout>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e07b      	b.n	8002fb4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	781a      	ldrb	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d034      	beq.n	8002f60 <HAL_I2C_Mem_Write+0x1c8>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d130      	bne.n	8002f60 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f04:	2200      	movs	r2, #0
 8002f06:	2180      	movs	r1, #128	; 0x80
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 fa3f 	bl	800338c <I2C_WaitOnFlagUntilTimeout>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e04d      	b.n	8002fb4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2bff      	cmp	r3, #255	; 0xff
 8002f20:	d90e      	bls.n	8002f40 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	22ff      	movs	r2, #255	; 0xff
 8002f26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	8979      	ldrh	r1, [r7, #10]
 8002f30:	2300      	movs	r3, #0
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 fbcf 	bl	80036dc <I2C_TransferConfig>
 8002f3e:	e00f      	b.n	8002f60 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	8979      	ldrh	r1, [r7, #10]
 8002f52:	2300      	movs	r3, #0
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 fbbe 	bl	80036dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d19e      	bne.n	8002ea8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 fa8c 	bl	800348c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e01a      	b.n	8002fb4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2220      	movs	r2, #32
 8002f84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6859      	ldr	r1, [r3, #4]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <HAL_I2C_Mem_Write+0x224>)
 8002f92:	400b      	ands	r3, r1
 8002f94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	e000      	b.n	8002fb4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002fb2:	2302      	movs	r3, #2
  }
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	fe00e800 	.word	0xfe00e800

08002fc0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af02      	add	r7, sp, #8
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	4608      	mov	r0, r1
 8002fca:	4611      	mov	r1, r2
 8002fcc:	461a      	mov	r2, r3
 8002fce:	4603      	mov	r3, r0
 8002fd0:	817b      	strh	r3, [r7, #10]
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	813b      	strh	r3, [r7, #8]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b20      	cmp	r3, #32
 8002fe4:	f040 80fd 	bne.w	80031e2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d002      	beq.n	8002ff4 <HAL_I2C_Mem_Read+0x34>
 8002fee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d105      	bne.n	8003000 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ffa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e0f1      	b.n	80031e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_I2C_Mem_Read+0x4e>
 800300a:	2302      	movs	r3, #2
 800300c:	e0ea      	b.n	80031e4 <HAL_I2C_Mem_Read+0x224>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003016:	f7ff fadb 	bl	80025d0 <HAL_GetTick>
 800301a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	2319      	movs	r3, #25
 8003022:	2201      	movs	r2, #1
 8003024:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 f9af 	bl	800338c <I2C_WaitOnFlagUntilTimeout>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0d5      	b.n	80031e4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2222      	movs	r2, #34	; 0x22
 800303c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2240      	movs	r2, #64	; 0x40
 8003044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6a3a      	ldr	r2, [r7, #32]
 8003052:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003058:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003060:	88f8      	ldrh	r0, [r7, #6]
 8003062:	893a      	ldrh	r2, [r7, #8]
 8003064:	8979      	ldrh	r1, [r7, #10]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	9301      	str	r3, [sp, #4]
 800306a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	4603      	mov	r3, r0
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 f913 	bl	800329c <I2C_RequestMemoryRead>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0ad      	b.n	80031e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308c:	b29b      	uxth	r3, r3
 800308e:	2bff      	cmp	r3, #255	; 0xff
 8003090:	d90e      	bls.n	80030b0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	22ff      	movs	r2, #255	; 0xff
 8003096:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309c:	b2da      	uxtb	r2, r3
 800309e:	8979      	ldrh	r1, [r7, #10]
 80030a0:	4b52      	ldr	r3, [pc, #328]	; (80031ec <HAL_I2C_Mem_Read+0x22c>)
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 fb17 	bl	80036dc <I2C_TransferConfig>
 80030ae:	e00f      	b.n	80030d0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	8979      	ldrh	r1, [r7, #10]
 80030c2:	4b4a      	ldr	r3, [pc, #296]	; (80031ec <HAL_I2C_Mem_Read+0x22c>)
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 fb06 	bl	80036dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d6:	2200      	movs	r2, #0
 80030d8:	2104      	movs	r1, #4
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f956 	bl	800338c <I2C_WaitOnFlagUntilTimeout>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e07c      	b.n	80031e4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	1c5a      	adds	r2, r3, #1
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003106:	3b01      	subs	r3, #1
 8003108:	b29a      	uxth	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003112:	b29b      	uxth	r3, r3
 8003114:	3b01      	subs	r3, #1
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003120:	b29b      	uxth	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d034      	beq.n	8003190 <HAL_I2C_Mem_Read+0x1d0>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312a:	2b00      	cmp	r3, #0
 800312c:	d130      	bne.n	8003190 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003134:	2200      	movs	r2, #0
 8003136:	2180      	movs	r1, #128	; 0x80
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 f927 	bl	800338c <I2C_WaitOnFlagUntilTimeout>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e04d      	b.n	80031e4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314c:	b29b      	uxth	r3, r3
 800314e:	2bff      	cmp	r3, #255	; 0xff
 8003150:	d90e      	bls.n	8003170 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	22ff      	movs	r2, #255	; 0xff
 8003156:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315c:	b2da      	uxtb	r2, r3
 800315e:	8979      	ldrh	r1, [r7, #10]
 8003160:	2300      	movs	r3, #0
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 fab7 	bl	80036dc <I2C_TransferConfig>
 800316e:	e00f      	b.n	8003190 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317e:	b2da      	uxtb	r2, r3
 8003180:	8979      	ldrh	r1, [r7, #10]
 8003182:	2300      	movs	r3, #0
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 faa6 	bl	80036dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d19a      	bne.n	80030d0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 f974 	bl	800348c <I2C_WaitOnSTOPFlagUntilTimeout>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e01a      	b.n	80031e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2220      	movs	r2, #32
 80031b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6859      	ldr	r1, [r3, #4]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <HAL_I2C_Mem_Read+0x230>)
 80031c2:	400b      	ands	r3, r1
 80031c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2220      	movs	r2, #32
 80031ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	e000      	b.n	80031e4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80031e2:	2302      	movs	r3, #2
  }
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	80002400 	.word	0x80002400
 80031f0:	fe00e800 	.word	0xfe00e800

080031f4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af02      	add	r7, sp, #8
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	4608      	mov	r0, r1
 80031fe:	4611      	mov	r1, r2
 8003200:	461a      	mov	r2, r3
 8003202:	4603      	mov	r3, r0
 8003204:	817b      	strh	r3, [r7, #10]
 8003206:	460b      	mov	r3, r1
 8003208:	813b      	strh	r3, [r7, #8]
 800320a:	4613      	mov	r3, r2
 800320c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800320e:	88fb      	ldrh	r3, [r7, #6]
 8003210:	b2da      	uxtb	r2, r3
 8003212:	8979      	ldrh	r1, [r7, #10]
 8003214:	4b20      	ldr	r3, [pc, #128]	; (8003298 <I2C_RequestMemoryWrite+0xa4>)
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 fa5d 	bl	80036dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003222:	69fa      	ldr	r2, [r7, #28]
 8003224:	69b9      	ldr	r1, [r7, #24]
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 f8f0 	bl	800340c <I2C_WaitOnTXISFlagUntilTimeout>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e02c      	b.n	8003290 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003236:	88fb      	ldrh	r3, [r7, #6]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d105      	bne.n	8003248 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800323c:	893b      	ldrh	r3, [r7, #8]
 800323e:	b2da      	uxtb	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	629a      	str	r2, [r3, #40]	; 0x28
 8003246:	e015      	b.n	8003274 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003248:	893b      	ldrh	r3, [r7, #8]
 800324a:	0a1b      	lsrs	r3, r3, #8
 800324c:	b29b      	uxth	r3, r3
 800324e:	b2da      	uxtb	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003256:	69fa      	ldr	r2, [r7, #28]
 8003258:	69b9      	ldr	r1, [r7, #24]
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 f8d6 	bl	800340c <I2C_WaitOnTXISFlagUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e012      	b.n	8003290 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800326a:	893b      	ldrh	r3, [r7, #8]
 800326c:	b2da      	uxtb	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	2200      	movs	r2, #0
 800327c:	2180      	movs	r1, #128	; 0x80
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 f884 	bl	800338c <I2C_WaitOnFlagUntilTimeout>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e000      	b.n	8003290 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	80002000 	.word	0x80002000

0800329c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af02      	add	r7, sp, #8
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	4608      	mov	r0, r1
 80032a6:	4611      	mov	r1, r2
 80032a8:	461a      	mov	r2, r3
 80032aa:	4603      	mov	r3, r0
 80032ac:	817b      	strh	r3, [r7, #10]
 80032ae:	460b      	mov	r3, r1
 80032b0:	813b      	strh	r3, [r7, #8]
 80032b2:	4613      	mov	r3, r2
 80032b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	8979      	ldrh	r1, [r7, #10]
 80032bc:	4b20      	ldr	r3, [pc, #128]	; (8003340 <I2C_RequestMemoryRead+0xa4>)
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	2300      	movs	r3, #0
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 fa0a 	bl	80036dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	69b9      	ldr	r1, [r7, #24]
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 f89d 	bl	800340c <I2C_WaitOnTXISFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e02c      	b.n	8003336 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032dc:	88fb      	ldrh	r3, [r7, #6]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d105      	bne.n	80032ee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032e2:	893b      	ldrh	r3, [r7, #8]
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	629a      	str	r2, [r3, #40]	; 0x28
 80032ec:	e015      	b.n	800331a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80032ee:	893b      	ldrh	r3, [r7, #8]
 80032f0:	0a1b      	lsrs	r3, r3, #8
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032fc:	69fa      	ldr	r2, [r7, #28]
 80032fe:	69b9      	ldr	r1, [r7, #24]
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 f883 	bl	800340c <I2C_WaitOnTXISFlagUntilTimeout>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e012      	b.n	8003336 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003310:	893b      	ldrh	r3, [r7, #8]
 8003312:	b2da      	uxtb	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	2200      	movs	r2, #0
 8003322:	2140      	movs	r1, #64	; 0x40
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 f831 	bl	800338c <I2C_WaitOnFlagUntilTimeout>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	80002000 	.word	0x80002000

08003344 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b02      	cmp	r3, #2
 8003358:	d103      	bne.n	8003362 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2200      	movs	r2, #0
 8003360:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b01      	cmp	r3, #1
 800336e:	d007      	beq.n	8003380 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699a      	ldr	r2, [r3, #24]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0201 	orr.w	r2, r2, #1
 800337e:	619a      	str	r2, [r3, #24]
  }
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	4613      	mov	r3, r2
 800339a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800339c:	e022      	b.n	80033e4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033a4:	d01e      	beq.n	80033e4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033a6:	f7ff f913 	bl	80025d0 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d302      	bcc.n	80033bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d113      	bne.n	80033e4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c0:	f043 0220 	orr.w	r2, r3, #32
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e00f      	b.n	8003404 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699a      	ldr	r2, [r3, #24]
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	4013      	ands	r3, r2
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	bf0c      	ite	eq
 80033f4:	2301      	moveq	r3, #1
 80033f6:	2300      	movne	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	461a      	mov	r2, r3
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d0cd      	beq.n	800339e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003418:	e02c      	b.n	8003474 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	68b9      	ldr	r1, [r7, #8]
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 f870 	bl	8003504 <I2C_IsErrorOccurred>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e02a      	b.n	8003484 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003434:	d01e      	beq.n	8003474 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003436:	f7ff f8cb 	bl	80025d0 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	429a      	cmp	r2, r3
 8003444:	d302      	bcc.n	800344c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d113      	bne.n	8003474 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003450:	f043 0220 	orr.w	r2, r3, #32
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e007      	b.n	8003484 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b02      	cmp	r3, #2
 8003480:	d1cb      	bne.n	800341a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003498:	e028      	b.n	80034ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	68b9      	ldr	r1, [r7, #8]
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 f830 	bl	8003504 <I2C_IsErrorOccurred>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e026      	b.n	80034fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ae:	f7ff f88f 	bl	80025d0 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d302      	bcc.n	80034c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d113      	bne.n	80034ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c8:	f043 0220 	orr.w	r2, r3, #32
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e007      	b.n	80034fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	f003 0320 	and.w	r3, r3, #32
 80034f6:	2b20      	cmp	r3, #32
 80034f8:	d1cf      	bne.n	800349a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08a      	sub	sp, #40	; 0x28
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800351e:	2300      	movs	r3, #0
 8003520:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	f003 0310 	and.w	r3, r3, #16
 800352c:	2b00      	cmp	r3, #0
 800352e:	d075      	beq.n	800361c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2210      	movs	r2, #16
 8003536:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003538:	e056      	b.n	80035e8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003540:	d052      	beq.n	80035e8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003542:	f7ff f845 	bl	80025d0 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	429a      	cmp	r2, r3
 8003550:	d302      	bcc.n	8003558 <I2C_IsErrorOccurred+0x54>
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d147      	bne.n	80035e8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003562:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800356a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003576:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800357a:	d12e      	bne.n	80035da <I2C_IsErrorOccurred+0xd6>
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003582:	d02a      	beq.n	80035da <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003584:	7cfb      	ldrb	r3, [r7, #19]
 8003586:	2b20      	cmp	r3, #32
 8003588:	d027      	beq.n	80035da <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003598:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800359a:	f7ff f819 	bl	80025d0 <HAL_GetTick>
 800359e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035a0:	e01b      	b.n	80035da <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80035a2:	f7ff f815 	bl	80025d0 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b19      	cmp	r3, #25
 80035ae:	d914      	bls.n	80035da <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b4:	f043 0220 	orr.w	r2, r3, #32
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	f003 0320 	and.w	r3, r3, #32
 80035e4:	2b20      	cmp	r3, #32
 80035e6:	d1dc      	bne.n	80035a2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	f003 0320 	and.w	r3, r3, #32
 80035f2:	2b20      	cmp	r3, #32
 80035f4:	d003      	beq.n	80035fe <I2C_IsErrorOccurred+0xfa>
 80035f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d09d      	beq.n	800353a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80035fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003602:	2b00      	cmp	r3, #0
 8003604:	d103      	bne.n	800360e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2220      	movs	r2, #32
 800360c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	f043 0304 	orr.w	r3, r3, #4
 8003614:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00b      	beq.n	8003646 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	f043 0301 	orr.w	r3, r3, #1
 8003634:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800363e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00b      	beq.n	8003668 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	f043 0308 	orr.w	r3, r3, #8
 8003656:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003660:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00b      	beq.n	800368a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	f043 0302 	orr.w	r3, r3, #2
 8003678:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003682:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800368a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800368e:	2b00      	cmp	r3, #0
 8003690:	d01c      	beq.n	80036cc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f7ff fe56 	bl	8003344 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6859      	ldr	r1, [r3, #4]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	4b0d      	ldr	r3, [pc, #52]	; (80036d8 <I2C_IsErrorOccurred+0x1d4>)
 80036a4:	400b      	ands	r3, r1
 80036a6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80036cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3728      	adds	r7, #40	; 0x28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	fe00e800 	.word	0xfe00e800

080036dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	607b      	str	r3, [r7, #4]
 80036e6:	460b      	mov	r3, r1
 80036e8:	817b      	strh	r3, [r7, #10]
 80036ea:	4613      	mov	r3, r2
 80036ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036ee:	897b      	ldrh	r3, [r7, #10]
 80036f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036f4:	7a7b      	ldrb	r3, [r7, #9]
 80036f6:	041b      	lsls	r3, r3, #16
 80036f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036fc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	4313      	orrs	r3, r2
 8003706:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800370a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	0d5b      	lsrs	r3, r3, #21
 8003716:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800371a:	4b08      	ldr	r3, [pc, #32]	; (800373c <I2C_TransferConfig+0x60>)
 800371c:	430b      	orrs	r3, r1
 800371e:	43db      	mvns	r3, r3
 8003720:	ea02 0103 	and.w	r1, r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	430a      	orrs	r2, r1
 800372c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800372e:	bf00      	nop
 8003730:	371c      	adds	r7, #28
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	03ff63ff 	.word	0x03ff63ff

08003740 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b20      	cmp	r3, #32
 8003754:	d138      	bne.n	80037c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003760:	2302      	movs	r3, #2
 8003762:	e032      	b.n	80037ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2224      	movs	r2, #36	; 0x24
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0201 	bic.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003792:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6819      	ldr	r1, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0201 	orr.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037c4:	2300      	movs	r3, #0
 80037c6:	e000      	b.n	80037ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037c8:	2302      	movs	r3, #2
  }
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
	...

080037d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037dc:	4b0d      	ldr	r3, [pc, #52]	; (8003814 <HAL_PWREx_GetVoltageRange+0x3c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e8:	d102      	bne.n	80037f0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80037ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037ee:	e00b      	b.n	8003808 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80037f0:	4b08      	ldr	r3, [pc, #32]	; (8003814 <HAL_PWREx_GetVoltageRange+0x3c>)
 80037f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037fe:	d102      	bne.n	8003806 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003800:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003804:	e000      	b.n	8003808 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003806:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003808:	4618      	mov	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	40007000 	.word	0x40007000

08003818 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d141      	bne.n	80038aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003826:	4b4b      	ldr	r3, [pc, #300]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800382e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003832:	d131      	bne.n	8003898 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003834:	4b47      	ldr	r3, [pc, #284]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003836:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800383a:	4a46      	ldr	r2, [pc, #280]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800383c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003840:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003844:	4b43      	ldr	r3, [pc, #268]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800384c:	4a41      	ldr	r2, [pc, #260]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800384e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003852:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003854:	4b40      	ldr	r3, [pc, #256]	; (8003958 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2232      	movs	r2, #50	; 0x32
 800385a:	fb02 f303 	mul.w	r3, r2, r3
 800385e:	4a3f      	ldr	r2, [pc, #252]	; (800395c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003860:	fba2 2303 	umull	r2, r3, r2, r3
 8003864:	0c9b      	lsrs	r3, r3, #18
 8003866:	3301      	adds	r3, #1
 8003868:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800386a:	e002      	b.n	8003872 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	3b01      	subs	r3, #1
 8003870:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003872:	4b38      	ldr	r3, [pc, #224]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800387a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800387e:	d102      	bne.n	8003886 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f2      	bne.n	800386c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003886:	4b33      	ldr	r3, [pc, #204]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003892:	d158      	bne.n	8003946 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e057      	b.n	8003948 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003898:	4b2e      	ldr	r3, [pc, #184]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800389a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800389e:	4a2d      	ldr	r2, [pc, #180]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80038a8:	e04d      	b.n	8003946 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038b0:	d141      	bne.n	8003936 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038b2:	4b28      	ldr	r3, [pc, #160]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038be:	d131      	bne.n	8003924 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038c0:	4b24      	ldr	r3, [pc, #144]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038c6:	4a23      	ldr	r2, [pc, #140]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038d0:	4b20      	ldr	r3, [pc, #128]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038d8:	4a1e      	ldr	r2, [pc, #120]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80038e0:	4b1d      	ldr	r3, [pc, #116]	; (8003958 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2232      	movs	r2, #50	; 0x32
 80038e6:	fb02 f303 	mul.w	r3, r2, r3
 80038ea:	4a1c      	ldr	r2, [pc, #112]	; (800395c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80038ec:	fba2 2303 	umull	r2, r3, r2, r3
 80038f0:	0c9b      	lsrs	r3, r3, #18
 80038f2:	3301      	adds	r3, #1
 80038f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038f6:	e002      	b.n	80038fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038fe:	4b15      	ldr	r3, [pc, #84]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800390a:	d102      	bne.n	8003912 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f2      	bne.n	80038f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003912:	4b10      	ldr	r3, [pc, #64]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800391a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800391e:	d112      	bne.n	8003946 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e011      	b.n	8003948 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003924:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003926:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800392a:	4a0a      	ldr	r2, [pc, #40]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800392c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003930:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003934:	e007      	b.n	8003946 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003936:	4b07      	ldr	r3, [pc, #28]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800393e:	4a05      	ldr	r2, [pc, #20]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003940:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003944:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	40007000 	.word	0x40007000
 8003958:	20000080 	.word	0x20000080
 800395c:	431bde83 	.word	0x431bde83

08003960 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b088      	sub	sp, #32
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d102      	bne.n	8003974 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	f000 bc08 	b.w	8004184 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003974:	4b96      	ldr	r3, [pc, #600]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 030c 	and.w	r3, r3, #12
 800397c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800397e:	4b94      	ldr	r3, [pc, #592]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0310 	and.w	r3, r3, #16
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 80e4 	beq.w	8003b5e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d007      	beq.n	80039ac <HAL_RCC_OscConfig+0x4c>
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	2b0c      	cmp	r3, #12
 80039a0:	f040 808b 	bne.w	8003aba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	f040 8087 	bne.w	8003aba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039ac:	4b88      	ldr	r3, [pc, #544]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d005      	beq.n	80039c4 <HAL_RCC_OscConfig+0x64>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e3df      	b.n	8004184 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a1a      	ldr	r2, [r3, #32]
 80039c8:	4b81      	ldr	r3, [pc, #516]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0308 	and.w	r3, r3, #8
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d004      	beq.n	80039de <HAL_RCC_OscConfig+0x7e>
 80039d4:	4b7e      	ldr	r3, [pc, #504]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039dc:	e005      	b.n	80039ea <HAL_RCC_OscConfig+0x8a>
 80039de:	4b7c      	ldr	r3, [pc, #496]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 80039e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039e4:	091b      	lsrs	r3, r3, #4
 80039e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d223      	bcs.n	8003a36 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fdfe 	bl	80045f4 <RCC_SetFlashLatencyFromMSIRange>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e3c0      	b.n	8004184 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a02:	4b73      	ldr	r3, [pc, #460]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a72      	ldr	r2, [pc, #456]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003a08:	f043 0308 	orr.w	r3, r3, #8
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	4b70      	ldr	r3, [pc, #448]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	496d      	ldr	r1, [pc, #436]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a20:	4b6b      	ldr	r3, [pc, #428]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	021b      	lsls	r3, r3, #8
 8003a2e:	4968      	ldr	r1, [pc, #416]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	604b      	str	r3, [r1, #4]
 8003a34:	e025      	b.n	8003a82 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a36:	4b66      	ldr	r3, [pc, #408]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a65      	ldr	r2, [pc, #404]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003a3c:	f043 0308 	orr.w	r3, r3, #8
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	4b63      	ldr	r3, [pc, #396]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	4960      	ldr	r1, [pc, #384]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a54:	4b5e      	ldr	r3, [pc, #376]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	021b      	lsls	r3, r3, #8
 8003a62:	495b      	ldr	r1, [pc, #364]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d109      	bne.n	8003a82 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 fdbe 	bl	80045f4 <RCC_SetFlashLatencyFromMSIRange>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e380      	b.n	8004184 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a82:	f000 fcc1 	bl	8004408 <HAL_RCC_GetSysClockFreq>
 8003a86:	4602      	mov	r2, r0
 8003a88:	4b51      	ldr	r3, [pc, #324]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	091b      	lsrs	r3, r3, #4
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	4950      	ldr	r1, [pc, #320]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003a94:	5ccb      	ldrb	r3, [r1, r3]
 8003a96:	f003 031f 	and.w	r3, r3, #31
 8003a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a9e:	4a4e      	ldr	r2, [pc, #312]	; (8003bd8 <HAL_RCC_OscConfig+0x278>)
 8003aa0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003aa2:	4b4e      	ldr	r3, [pc, #312]	; (8003bdc <HAL_RCC_OscConfig+0x27c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fe fbb8 	bl	800221c <HAL_InitTick>
 8003aac:	4603      	mov	r3, r0
 8003aae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d052      	beq.n	8003b5c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
 8003ab8:	e364      	b.n	8004184 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d032      	beq.n	8003b28 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ac2:	4b43      	ldr	r3, [pc, #268]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a42      	ldr	r2, [pc, #264]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ace:	f7fe fd7f 	bl	80025d0 <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ad6:	f7fe fd7b 	bl	80025d0 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e34d      	b.n	8004184 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ae8:	4b39      	ldr	r3, [pc, #228]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0f0      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003af4:	4b36      	ldr	r3, [pc, #216]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a35      	ldr	r2, [pc, #212]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003afa:	f043 0308 	orr.w	r3, r3, #8
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	4b33      	ldr	r3, [pc, #204]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	4930      	ldr	r1, [pc, #192]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b12:	4b2f      	ldr	r3, [pc, #188]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	021b      	lsls	r3, r3, #8
 8003b20:	492b      	ldr	r1, [pc, #172]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	604b      	str	r3, [r1, #4]
 8003b26:	e01a      	b.n	8003b5e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b28:	4b29      	ldr	r3, [pc, #164]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a28      	ldr	r2, [pc, #160]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003b2e:	f023 0301 	bic.w	r3, r3, #1
 8003b32:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b34:	f7fe fd4c 	bl	80025d0 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b3c:	f7fe fd48 	bl	80025d0 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e31a      	b.n	8004184 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b4e:	4b20      	ldr	r3, [pc, #128]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1f0      	bne.n	8003b3c <HAL_RCC_OscConfig+0x1dc>
 8003b5a:	e000      	b.n	8003b5e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d073      	beq.n	8003c52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d005      	beq.n	8003b7c <HAL_RCC_OscConfig+0x21c>
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	2b0c      	cmp	r3, #12
 8003b74:	d10e      	bne.n	8003b94 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2b03      	cmp	r3, #3
 8003b7a:	d10b      	bne.n	8003b94 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b7c:	4b14      	ldr	r3, [pc, #80]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d063      	beq.n	8003c50 <HAL_RCC_OscConfig+0x2f0>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d15f      	bne.n	8003c50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e2f7      	b.n	8004184 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b9c:	d106      	bne.n	8003bac <HAL_RCC_OscConfig+0x24c>
 8003b9e:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a0b      	ldr	r2, [pc, #44]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba8:	6013      	str	r3, [r2, #0]
 8003baa:	e025      	b.n	8003bf8 <HAL_RCC_OscConfig+0x298>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bb4:	d114      	bne.n	8003be0 <HAL_RCC_OscConfig+0x280>
 8003bb6:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a05      	ldr	r2, [pc, #20]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003bbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	4b03      	ldr	r3, [pc, #12]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a02      	ldr	r2, [pc, #8]	; (8003bd0 <HAL_RCC_OscConfig+0x270>)
 8003bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bcc:	6013      	str	r3, [r2, #0]
 8003bce:	e013      	b.n	8003bf8 <HAL_RCC_OscConfig+0x298>
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	0800ac90 	.word	0x0800ac90
 8003bd8:	20000080 	.word	0x20000080
 8003bdc:	20000084 	.word	0x20000084
 8003be0:	4ba0      	ldr	r3, [pc, #640]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a9f      	ldr	r2, [pc, #636]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	4b9d      	ldr	r3, [pc, #628]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a9c      	ldr	r2, [pc, #624]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d013      	beq.n	8003c28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c00:	f7fe fce6 	bl	80025d0 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c08:	f7fe fce2 	bl	80025d0 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b64      	cmp	r3, #100	; 0x64
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e2b4      	b.n	8004184 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c1a:	4b92      	ldr	r3, [pc, #584]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCC_OscConfig+0x2a8>
 8003c26:	e014      	b.n	8003c52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c28:	f7fe fcd2 	bl	80025d0 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c30:	f7fe fcce 	bl	80025d0 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b64      	cmp	r3, #100	; 0x64
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e2a0      	b.n	8004184 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c42:	4b88      	ldr	r3, [pc, #544]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f0      	bne.n	8003c30 <HAL_RCC_OscConfig+0x2d0>
 8003c4e:	e000      	b.n	8003c52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d060      	beq.n	8003d20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	2b04      	cmp	r3, #4
 8003c62:	d005      	beq.n	8003c70 <HAL_RCC_OscConfig+0x310>
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	2b0c      	cmp	r3, #12
 8003c68:	d119      	bne.n	8003c9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d116      	bne.n	8003c9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c70:	4b7c      	ldr	r3, [pc, #496]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d005      	beq.n	8003c88 <HAL_RCC_OscConfig+0x328>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e27d      	b.n	8004184 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c88:	4b76      	ldr	r3, [pc, #472]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	061b      	lsls	r3, r3, #24
 8003c96:	4973      	ldr	r1, [pc, #460]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c9c:	e040      	b.n	8003d20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d023      	beq.n	8003cee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ca6:	4b6f      	ldr	r3, [pc, #444]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a6e      	ldr	r2, [pc, #440]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb2:	f7fe fc8d 	bl	80025d0 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cba:	f7fe fc89 	bl	80025d0 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e25b      	b.n	8004184 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ccc:	4b65      	ldr	r3, [pc, #404]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0f0      	beq.n	8003cba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd8:	4b62      	ldr	r3, [pc, #392]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	061b      	lsls	r3, r3, #24
 8003ce6:	495f      	ldr	r1, [pc, #380]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	604b      	str	r3, [r1, #4]
 8003cec:	e018      	b.n	8003d20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cee:	4b5d      	ldr	r3, [pc, #372]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a5c      	ldr	r2, [pc, #368]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003cf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfa:	f7fe fc69 	bl	80025d0 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d02:	f7fe fc65 	bl	80025d0 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e237      	b.n	8004184 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d14:	4b53      	ldr	r3, [pc, #332]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1f0      	bne.n	8003d02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d03c      	beq.n	8003da6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d01c      	beq.n	8003d6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d34:	4b4b      	ldr	r3, [pc, #300]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d3a:	4a4a      	ldr	r2, [pc, #296]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003d3c:	f043 0301 	orr.w	r3, r3, #1
 8003d40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d44:	f7fe fc44 	bl	80025d0 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d4c:	f7fe fc40 	bl	80025d0 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e212      	b.n	8004184 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d5e:	4b41      	ldr	r3, [pc, #260]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0ef      	beq.n	8003d4c <HAL_RCC_OscConfig+0x3ec>
 8003d6c:	e01b      	b.n	8003da6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d6e:	4b3d      	ldr	r3, [pc, #244]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d74:	4a3b      	ldr	r2, [pc, #236]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003d76:	f023 0301 	bic.w	r3, r3, #1
 8003d7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7e:	f7fe fc27 	bl	80025d0 <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d86:	f7fe fc23 	bl	80025d0 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e1f5      	b.n	8004184 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d98:	4b32      	ldr	r3, [pc, #200]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1ef      	bne.n	8003d86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 80a6 	beq.w	8003f00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003db4:	2300      	movs	r3, #0
 8003db6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003db8:	4b2a      	ldr	r3, [pc, #168]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10d      	bne.n	8003de0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dc4:	4b27      	ldr	r3, [pc, #156]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc8:	4a26      	ldr	r2, [pc, #152]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dce:	6593      	str	r3, [r2, #88]	; 0x58
 8003dd0:	4b24      	ldr	r3, [pc, #144]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd8:	60bb      	str	r3, [r7, #8]
 8003dda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003de0:	4b21      	ldr	r3, [pc, #132]	; (8003e68 <HAL_RCC_OscConfig+0x508>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d118      	bne.n	8003e1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dec:	4b1e      	ldr	r3, [pc, #120]	; (8003e68 <HAL_RCC_OscConfig+0x508>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1d      	ldr	r2, [pc, #116]	; (8003e68 <HAL_RCC_OscConfig+0x508>)
 8003df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003df8:	f7fe fbea 	bl	80025d0 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e00:	f7fe fbe6 	bl	80025d0 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e1b8      	b.n	8004184 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e12:	4b15      	ldr	r3, [pc, #84]	; (8003e68 <HAL_RCC_OscConfig+0x508>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0f0      	beq.n	8003e00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d108      	bne.n	8003e38 <HAL_RCC_OscConfig+0x4d8>
 8003e26:	4b0f      	ldr	r3, [pc, #60]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2c:	4a0d      	ldr	r2, [pc, #52]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003e2e:	f043 0301 	orr.w	r3, r3, #1
 8003e32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e36:	e029      	b.n	8003e8c <HAL_RCC_OscConfig+0x52c>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	2b05      	cmp	r3, #5
 8003e3e:	d115      	bne.n	8003e6c <HAL_RCC_OscConfig+0x50c>
 8003e40:	4b08      	ldr	r3, [pc, #32]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e46:	4a07      	ldr	r2, [pc, #28]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003e48:	f043 0304 	orr.w	r3, r3, #4
 8003e4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e50:	4b04      	ldr	r3, [pc, #16]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e56:	4a03      	ldr	r2, [pc, #12]	; (8003e64 <HAL_RCC_OscConfig+0x504>)
 8003e58:	f043 0301 	orr.w	r3, r3, #1
 8003e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e60:	e014      	b.n	8003e8c <HAL_RCC_OscConfig+0x52c>
 8003e62:	bf00      	nop
 8003e64:	40021000 	.word	0x40021000
 8003e68:	40007000 	.word	0x40007000
 8003e6c:	4b9d      	ldr	r3, [pc, #628]	; (80040e4 <HAL_RCC_OscConfig+0x784>)
 8003e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e72:	4a9c      	ldr	r2, [pc, #624]	; (80040e4 <HAL_RCC_OscConfig+0x784>)
 8003e74:	f023 0301 	bic.w	r3, r3, #1
 8003e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e7c:	4b99      	ldr	r3, [pc, #612]	; (80040e4 <HAL_RCC_OscConfig+0x784>)
 8003e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e82:	4a98      	ldr	r2, [pc, #608]	; (80040e4 <HAL_RCC_OscConfig+0x784>)
 8003e84:	f023 0304 	bic.w	r3, r3, #4
 8003e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d016      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e94:	f7fe fb9c 	bl	80025d0 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e9a:	e00a      	b.n	8003eb2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e9c:	f7fe fb98 	bl	80025d0 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e168      	b.n	8004184 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eb2:	4b8c      	ldr	r3, [pc, #560]	; (80040e4 <HAL_RCC_OscConfig+0x784>)
 8003eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0ed      	beq.n	8003e9c <HAL_RCC_OscConfig+0x53c>
 8003ec0:	e015      	b.n	8003eee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec2:	f7fe fb85 	bl	80025d0 <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ec8:	e00a      	b.n	8003ee0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eca:	f7fe fb81 	bl	80025d0 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e151      	b.n	8004184 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ee0:	4b80      	ldr	r3, [pc, #512]	; (80040e4 <HAL_RCC_OscConfig+0x784>)
 8003ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1ed      	bne.n	8003eca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eee:	7ffb      	ldrb	r3, [r7, #31]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d105      	bne.n	8003f00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ef4:	4b7b      	ldr	r3, [pc, #492]	; (80040e4 <HAL_RCC_OscConfig+0x784>)
 8003ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef8:	4a7a      	ldr	r2, [pc, #488]	; (80040e4 <HAL_RCC_OscConfig+0x784>)
 8003efa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003efe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0320 	and.w	r3, r3, #32
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d03c      	beq.n	8003f86 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d01c      	beq.n	8003f4e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f14:	4b73      	ldr	r3, [pc, #460]	; (80040e4 <HAL_RCC_OscConfig+0x784>)
 8003f16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f1a:	4a72      	ldr	r2, [pc, #456]	; (80040e4 <HAL_RCC_OscConfig+0x784>)
 8003f1c:	f043 0301 	orr.w	r3, r3, #1
 8003f20:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f24:	f7fe fb54 	bl	80025d0 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f2c:	f7fe fb50 	bl	80025d0 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e122      	b.n	8004184 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f3e:	4b69      	ldr	r3, [pc, #420]	; (80040e4 <HAL_RCC_OscConfig+0x784>)
 8003f40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0ef      	beq.n	8003f2c <HAL_RCC_OscConfig+0x5cc>
 8003f4c:	e01b      	b.n	8003f86 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f4e:	4b65      	ldr	r3, [pc, #404]	; (80040e4 <HAL_RCC_OscConfig+0x784>)
 8003f50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f54:	4a63      	ldr	r2, [pc, #396]	; (80040e4 <HAL_RCC_OscConfig+0x784>)
 8003f56:	f023 0301 	bic.w	r3, r3, #1
 8003f5a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5e:	f7fe fb37 	bl	80025d0 <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f64:	e008      	b.n	8003f78 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f66:	f7fe fb33 	bl	80025d0 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e105      	b.n	8004184 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f78:	4b5a      	ldr	r3, [pc, #360]	; (80040e4 <HAL_RCC_OscConfig+0x784>)
 8003f7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1ef      	bne.n	8003f66 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 80f9 	beq.w	8004182 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	f040 80cf 	bne.w	8004138 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f9a:	4b52      	ldr	r3, [pc, #328]	; (80040e4 <HAL_RCC_OscConfig+0x784>)
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f003 0203 	and.w	r2, r3, #3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d12c      	bne.n	8004008 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d123      	bne.n	8004008 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d11b      	bne.n	8004008 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fda:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d113      	bne.n	8004008 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fea:	085b      	lsrs	r3, r3, #1
 8003fec:	3b01      	subs	r3, #1
 8003fee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d109      	bne.n	8004008 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	085b      	lsrs	r3, r3, #1
 8004000:	3b01      	subs	r3, #1
 8004002:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004004:	429a      	cmp	r2, r3
 8004006:	d071      	beq.n	80040ec <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	2b0c      	cmp	r3, #12
 800400c:	d068      	beq.n	80040e0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800400e:	4b35      	ldr	r3, [pc, #212]	; (80040e4 <HAL_RCC_OscConfig+0x784>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d105      	bne.n	8004026 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800401a:	4b32      	ldr	r3, [pc, #200]	; (80040e4 <HAL_RCC_OscConfig+0x784>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e0ac      	b.n	8004184 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800402a:	4b2e      	ldr	r3, [pc, #184]	; (80040e4 <HAL_RCC_OscConfig+0x784>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a2d      	ldr	r2, [pc, #180]	; (80040e4 <HAL_RCC_OscConfig+0x784>)
 8004030:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004034:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004036:	f7fe facb 	bl	80025d0 <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403e:	f7fe fac7 	bl	80025d0 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e099      	b.n	8004184 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004050:	4b24      	ldr	r3, [pc, #144]	; (80040e4 <HAL_RCC_OscConfig+0x784>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1f0      	bne.n	800403e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800405c:	4b21      	ldr	r3, [pc, #132]	; (80040e4 <HAL_RCC_OscConfig+0x784>)
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	4b21      	ldr	r3, [pc, #132]	; (80040e8 <HAL_RCC_OscConfig+0x788>)
 8004062:	4013      	ands	r3, r2
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800406c:	3a01      	subs	r2, #1
 800406e:	0112      	lsls	r2, r2, #4
 8004070:	4311      	orrs	r1, r2
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004076:	0212      	lsls	r2, r2, #8
 8004078:	4311      	orrs	r1, r2
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800407e:	0852      	lsrs	r2, r2, #1
 8004080:	3a01      	subs	r2, #1
 8004082:	0552      	lsls	r2, r2, #21
 8004084:	4311      	orrs	r1, r2
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800408a:	0852      	lsrs	r2, r2, #1
 800408c:	3a01      	subs	r2, #1
 800408e:	0652      	lsls	r2, r2, #25
 8004090:	4311      	orrs	r1, r2
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004096:	06d2      	lsls	r2, r2, #27
 8004098:	430a      	orrs	r2, r1
 800409a:	4912      	ldr	r1, [pc, #72]	; (80040e4 <HAL_RCC_OscConfig+0x784>)
 800409c:	4313      	orrs	r3, r2
 800409e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80040a0:	4b10      	ldr	r3, [pc, #64]	; (80040e4 <HAL_RCC_OscConfig+0x784>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a0f      	ldr	r2, [pc, #60]	; (80040e4 <HAL_RCC_OscConfig+0x784>)
 80040a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040ac:	4b0d      	ldr	r3, [pc, #52]	; (80040e4 <HAL_RCC_OscConfig+0x784>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	4a0c      	ldr	r2, [pc, #48]	; (80040e4 <HAL_RCC_OscConfig+0x784>)
 80040b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040b8:	f7fe fa8a 	bl	80025d0 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c0:	f7fe fa86 	bl	80025d0 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e058      	b.n	8004184 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040d2:	4b04      	ldr	r3, [pc, #16]	; (80040e4 <HAL_RCC_OscConfig+0x784>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040de:	e050      	b.n	8004182 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e04f      	b.n	8004184 <HAL_RCC_OscConfig+0x824>
 80040e4:	40021000 	.word	0x40021000
 80040e8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ec:	4b27      	ldr	r3, [pc, #156]	; (800418c <HAL_RCC_OscConfig+0x82c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d144      	bne.n	8004182 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040f8:	4b24      	ldr	r3, [pc, #144]	; (800418c <HAL_RCC_OscConfig+0x82c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a23      	ldr	r2, [pc, #140]	; (800418c <HAL_RCC_OscConfig+0x82c>)
 80040fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004102:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004104:	4b21      	ldr	r3, [pc, #132]	; (800418c <HAL_RCC_OscConfig+0x82c>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	4a20      	ldr	r2, [pc, #128]	; (800418c <HAL_RCC_OscConfig+0x82c>)
 800410a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800410e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004110:	f7fe fa5e 	bl	80025d0 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004118:	f7fe fa5a 	bl	80025d0 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e02c      	b.n	8004184 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800412a:	4b18      	ldr	r3, [pc, #96]	; (800418c <HAL_RCC_OscConfig+0x82c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0f0      	beq.n	8004118 <HAL_RCC_OscConfig+0x7b8>
 8004136:	e024      	b.n	8004182 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	2b0c      	cmp	r3, #12
 800413c:	d01f      	beq.n	800417e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800413e:	4b13      	ldr	r3, [pc, #76]	; (800418c <HAL_RCC_OscConfig+0x82c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a12      	ldr	r2, [pc, #72]	; (800418c <HAL_RCC_OscConfig+0x82c>)
 8004144:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414a:	f7fe fa41 	bl	80025d0 <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004152:	f7fe fa3d 	bl	80025d0 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e00f      	b.n	8004184 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004164:	4b09      	ldr	r3, [pc, #36]	; (800418c <HAL_RCC_OscConfig+0x82c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1f0      	bne.n	8004152 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004170:	4b06      	ldr	r3, [pc, #24]	; (800418c <HAL_RCC_OscConfig+0x82c>)
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	4905      	ldr	r1, [pc, #20]	; (800418c <HAL_RCC_OscConfig+0x82c>)
 8004176:	4b06      	ldr	r3, [pc, #24]	; (8004190 <HAL_RCC_OscConfig+0x830>)
 8004178:	4013      	ands	r3, r2
 800417a:	60cb      	str	r3, [r1, #12]
 800417c:	e001      	b.n	8004182 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e000      	b.n	8004184 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3720      	adds	r7, #32
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40021000 	.word	0x40021000
 8004190:	feeefffc 	.word	0xfeeefffc

08004194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e11d      	b.n	80043e8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041ac:	4b90      	ldr	r3, [pc, #576]	; (80043f0 <HAL_RCC_ClockConfig+0x25c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 030f 	and.w	r3, r3, #15
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d910      	bls.n	80041dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ba:	4b8d      	ldr	r3, [pc, #564]	; (80043f0 <HAL_RCC_ClockConfig+0x25c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f023 020f 	bic.w	r2, r3, #15
 80041c2:	498b      	ldr	r1, [pc, #556]	; (80043f0 <HAL_RCC_ClockConfig+0x25c>)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ca:	4b89      	ldr	r3, [pc, #548]	; (80043f0 <HAL_RCC_ClockConfig+0x25c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 030f 	and.w	r3, r3, #15
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d001      	beq.n	80041dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e105      	b.n	80043e8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d010      	beq.n	800420a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	4b81      	ldr	r3, [pc, #516]	; (80043f4 <HAL_RCC_ClockConfig+0x260>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d908      	bls.n	800420a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041f8:	4b7e      	ldr	r3, [pc, #504]	; (80043f4 <HAL_RCC_ClockConfig+0x260>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	497b      	ldr	r1, [pc, #492]	; (80043f4 <HAL_RCC_ClockConfig+0x260>)
 8004206:	4313      	orrs	r3, r2
 8004208:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d079      	beq.n	800430a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2b03      	cmp	r3, #3
 800421c:	d11e      	bne.n	800425c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800421e:	4b75      	ldr	r3, [pc, #468]	; (80043f4 <HAL_RCC_ClockConfig+0x260>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e0dc      	b.n	80043e8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800422e:	f000 fa3b 	bl	80046a8 <RCC_GetSysClockFreqFromPLLSource>
 8004232:	4603      	mov	r3, r0
 8004234:	4a70      	ldr	r2, [pc, #448]	; (80043f8 <HAL_RCC_ClockConfig+0x264>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d946      	bls.n	80042c8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800423a:	4b6e      	ldr	r3, [pc, #440]	; (80043f4 <HAL_RCC_ClockConfig+0x260>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d140      	bne.n	80042c8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004246:	4b6b      	ldr	r3, [pc, #428]	; (80043f4 <HAL_RCC_ClockConfig+0x260>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800424e:	4a69      	ldr	r2, [pc, #420]	; (80043f4 <HAL_RCC_ClockConfig+0x260>)
 8004250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004254:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004256:	2380      	movs	r3, #128	; 0x80
 8004258:	617b      	str	r3, [r7, #20]
 800425a:	e035      	b.n	80042c8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d107      	bne.n	8004274 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004264:	4b63      	ldr	r3, [pc, #396]	; (80043f4 <HAL_RCC_ClockConfig+0x260>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d115      	bne.n	800429c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0b9      	b.n	80043e8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d107      	bne.n	800428c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800427c:	4b5d      	ldr	r3, [pc, #372]	; (80043f4 <HAL_RCC_ClockConfig+0x260>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d109      	bne.n	800429c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0ad      	b.n	80043e8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800428c:	4b59      	ldr	r3, [pc, #356]	; (80043f4 <HAL_RCC_ClockConfig+0x260>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e0a5      	b.n	80043e8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800429c:	f000 f8b4 	bl	8004408 <HAL_RCC_GetSysClockFreq>
 80042a0:	4603      	mov	r3, r0
 80042a2:	4a55      	ldr	r2, [pc, #340]	; (80043f8 <HAL_RCC_ClockConfig+0x264>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d90f      	bls.n	80042c8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80042a8:	4b52      	ldr	r3, [pc, #328]	; (80043f4 <HAL_RCC_ClockConfig+0x260>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d109      	bne.n	80042c8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042b4:	4b4f      	ldr	r3, [pc, #316]	; (80043f4 <HAL_RCC_ClockConfig+0x260>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042bc:	4a4d      	ldr	r2, [pc, #308]	; (80043f4 <HAL_RCC_ClockConfig+0x260>)
 80042be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042c2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80042c4:	2380      	movs	r3, #128	; 0x80
 80042c6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042c8:	4b4a      	ldr	r3, [pc, #296]	; (80043f4 <HAL_RCC_ClockConfig+0x260>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f023 0203 	bic.w	r2, r3, #3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	4947      	ldr	r1, [pc, #284]	; (80043f4 <HAL_RCC_ClockConfig+0x260>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042da:	f7fe f979 	bl	80025d0 <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e0:	e00a      	b.n	80042f8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042e2:	f7fe f975 	bl	80025d0 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e077      	b.n	80043e8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f8:	4b3e      	ldr	r3, [pc, #248]	; (80043f4 <HAL_RCC_ClockConfig+0x260>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f003 020c 	and.w	r2, r3, #12
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	429a      	cmp	r2, r3
 8004308:	d1eb      	bne.n	80042e2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2b80      	cmp	r3, #128	; 0x80
 800430e:	d105      	bne.n	800431c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004310:	4b38      	ldr	r3, [pc, #224]	; (80043f4 <HAL_RCC_ClockConfig+0x260>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	4a37      	ldr	r2, [pc, #220]	; (80043f4 <HAL_RCC_ClockConfig+0x260>)
 8004316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800431a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d010      	beq.n	800434a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	4b31      	ldr	r3, [pc, #196]	; (80043f4 <HAL_RCC_ClockConfig+0x260>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004334:	429a      	cmp	r2, r3
 8004336:	d208      	bcs.n	800434a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004338:	4b2e      	ldr	r3, [pc, #184]	; (80043f4 <HAL_RCC_ClockConfig+0x260>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	492b      	ldr	r1, [pc, #172]	; (80043f4 <HAL_RCC_ClockConfig+0x260>)
 8004346:	4313      	orrs	r3, r2
 8004348:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800434a:	4b29      	ldr	r3, [pc, #164]	; (80043f0 <HAL_RCC_ClockConfig+0x25c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 030f 	and.w	r3, r3, #15
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d210      	bcs.n	800437a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004358:	4b25      	ldr	r3, [pc, #148]	; (80043f0 <HAL_RCC_ClockConfig+0x25c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f023 020f 	bic.w	r2, r3, #15
 8004360:	4923      	ldr	r1, [pc, #140]	; (80043f0 <HAL_RCC_ClockConfig+0x25c>)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	4313      	orrs	r3, r2
 8004366:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004368:	4b21      	ldr	r3, [pc, #132]	; (80043f0 <HAL_RCC_ClockConfig+0x25c>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 030f 	and.w	r3, r3, #15
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	429a      	cmp	r2, r3
 8004374:	d001      	beq.n	800437a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e036      	b.n	80043e8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	2b00      	cmp	r3, #0
 8004384:	d008      	beq.n	8004398 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004386:	4b1b      	ldr	r3, [pc, #108]	; (80043f4 <HAL_RCC_ClockConfig+0x260>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	4918      	ldr	r1, [pc, #96]	; (80043f4 <HAL_RCC_ClockConfig+0x260>)
 8004394:	4313      	orrs	r3, r2
 8004396:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0308 	and.w	r3, r3, #8
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d009      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043a4:	4b13      	ldr	r3, [pc, #76]	; (80043f4 <HAL_RCC_ClockConfig+0x260>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	4910      	ldr	r1, [pc, #64]	; (80043f4 <HAL_RCC_ClockConfig+0x260>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043b8:	f000 f826 	bl	8004408 <HAL_RCC_GetSysClockFreq>
 80043bc:	4602      	mov	r2, r0
 80043be:	4b0d      	ldr	r3, [pc, #52]	; (80043f4 <HAL_RCC_ClockConfig+0x260>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	091b      	lsrs	r3, r3, #4
 80043c4:	f003 030f 	and.w	r3, r3, #15
 80043c8:	490c      	ldr	r1, [pc, #48]	; (80043fc <HAL_RCC_ClockConfig+0x268>)
 80043ca:	5ccb      	ldrb	r3, [r1, r3]
 80043cc:	f003 031f 	and.w	r3, r3, #31
 80043d0:	fa22 f303 	lsr.w	r3, r2, r3
 80043d4:	4a0a      	ldr	r2, [pc, #40]	; (8004400 <HAL_RCC_ClockConfig+0x26c>)
 80043d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80043d8:	4b0a      	ldr	r3, [pc, #40]	; (8004404 <HAL_RCC_ClockConfig+0x270>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fd ff1d 	bl	800221c <HAL_InitTick>
 80043e2:	4603      	mov	r3, r0
 80043e4:	73fb      	strb	r3, [r7, #15]

  return status;
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3718      	adds	r7, #24
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40022000 	.word	0x40022000
 80043f4:	40021000 	.word	0x40021000
 80043f8:	04c4b400 	.word	0x04c4b400
 80043fc:	0800ac90 	.word	0x0800ac90
 8004400:	20000080 	.word	0x20000080
 8004404:	20000084 	.word	0x20000084

08004408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004408:	b480      	push	{r7}
 800440a:	b089      	sub	sp, #36	; 0x24
 800440c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800440e:	2300      	movs	r3, #0
 8004410:	61fb      	str	r3, [r7, #28]
 8004412:	2300      	movs	r3, #0
 8004414:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004416:	4b3e      	ldr	r3, [pc, #248]	; (8004510 <HAL_RCC_GetSysClockFreq+0x108>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 030c 	and.w	r3, r3, #12
 800441e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004420:	4b3b      	ldr	r3, [pc, #236]	; (8004510 <HAL_RCC_GetSysClockFreq+0x108>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f003 0303 	and.w	r3, r3, #3
 8004428:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d005      	beq.n	800443c <HAL_RCC_GetSysClockFreq+0x34>
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	2b0c      	cmp	r3, #12
 8004434:	d121      	bne.n	800447a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d11e      	bne.n	800447a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800443c:	4b34      	ldr	r3, [pc, #208]	; (8004510 <HAL_RCC_GetSysClockFreq+0x108>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0308 	and.w	r3, r3, #8
 8004444:	2b00      	cmp	r3, #0
 8004446:	d107      	bne.n	8004458 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004448:	4b31      	ldr	r3, [pc, #196]	; (8004510 <HAL_RCC_GetSysClockFreq+0x108>)
 800444a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800444e:	0a1b      	lsrs	r3, r3, #8
 8004450:	f003 030f 	and.w	r3, r3, #15
 8004454:	61fb      	str	r3, [r7, #28]
 8004456:	e005      	b.n	8004464 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004458:	4b2d      	ldr	r3, [pc, #180]	; (8004510 <HAL_RCC_GetSysClockFreq+0x108>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	091b      	lsrs	r3, r3, #4
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004464:	4a2b      	ldr	r2, [pc, #172]	; (8004514 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800446c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10d      	bne.n	8004490 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004478:	e00a      	b.n	8004490 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	2b04      	cmp	r3, #4
 800447e:	d102      	bne.n	8004486 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004480:	4b25      	ldr	r3, [pc, #148]	; (8004518 <HAL_RCC_GetSysClockFreq+0x110>)
 8004482:	61bb      	str	r3, [r7, #24]
 8004484:	e004      	b.n	8004490 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	2b08      	cmp	r3, #8
 800448a:	d101      	bne.n	8004490 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800448c:	4b23      	ldr	r3, [pc, #140]	; (800451c <HAL_RCC_GetSysClockFreq+0x114>)
 800448e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	2b0c      	cmp	r3, #12
 8004494:	d134      	bne.n	8004500 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004496:	4b1e      	ldr	r3, [pc, #120]	; (8004510 <HAL_RCC_GetSysClockFreq+0x108>)
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f003 0303 	and.w	r3, r3, #3
 800449e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d003      	beq.n	80044ae <HAL_RCC_GetSysClockFreq+0xa6>
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b03      	cmp	r3, #3
 80044aa:	d003      	beq.n	80044b4 <HAL_RCC_GetSysClockFreq+0xac>
 80044ac:	e005      	b.n	80044ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80044ae:	4b1a      	ldr	r3, [pc, #104]	; (8004518 <HAL_RCC_GetSysClockFreq+0x110>)
 80044b0:	617b      	str	r3, [r7, #20]
      break;
 80044b2:	e005      	b.n	80044c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80044b4:	4b19      	ldr	r3, [pc, #100]	; (800451c <HAL_RCC_GetSysClockFreq+0x114>)
 80044b6:	617b      	str	r3, [r7, #20]
      break;
 80044b8:	e002      	b.n	80044c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	617b      	str	r3, [r7, #20]
      break;
 80044be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044c0:	4b13      	ldr	r3, [pc, #76]	; (8004510 <HAL_RCC_GetSysClockFreq+0x108>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	091b      	lsrs	r3, r3, #4
 80044c6:	f003 030f 	and.w	r3, r3, #15
 80044ca:	3301      	adds	r3, #1
 80044cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80044ce:	4b10      	ldr	r3, [pc, #64]	; (8004510 <HAL_RCC_GetSysClockFreq+0x108>)
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	0a1b      	lsrs	r3, r3, #8
 80044d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	fb03 f202 	mul.w	r2, r3, r2
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044e6:	4b0a      	ldr	r3, [pc, #40]	; (8004510 <HAL_RCC_GetSysClockFreq+0x108>)
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	0e5b      	lsrs	r3, r3, #25
 80044ec:	f003 0303 	and.w	r3, r3, #3
 80044f0:	3301      	adds	r3, #1
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004500:	69bb      	ldr	r3, [r7, #24]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3724      	adds	r7, #36	; 0x24
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	40021000 	.word	0x40021000
 8004514:	0800aca8 	.word	0x0800aca8
 8004518:	00f42400 	.word	0x00f42400
 800451c:	007a1200 	.word	0x007a1200

08004520 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004524:	4b03      	ldr	r3, [pc, #12]	; (8004534 <HAL_RCC_GetHCLKFreq+0x14>)
 8004526:	681b      	ldr	r3, [r3, #0]
}
 8004528:	4618      	mov	r0, r3
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	20000080 	.word	0x20000080

08004538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800453c:	f7ff fff0 	bl	8004520 <HAL_RCC_GetHCLKFreq>
 8004540:	4602      	mov	r2, r0
 8004542:	4b06      	ldr	r3, [pc, #24]	; (800455c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	0a1b      	lsrs	r3, r3, #8
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	4904      	ldr	r1, [pc, #16]	; (8004560 <HAL_RCC_GetPCLK1Freq+0x28>)
 800454e:	5ccb      	ldrb	r3, [r1, r3]
 8004550:	f003 031f 	and.w	r3, r3, #31
 8004554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004558:	4618      	mov	r0, r3
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40021000 	.word	0x40021000
 8004560:	0800aca0 	.word	0x0800aca0

08004564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004568:	f7ff ffda 	bl	8004520 <HAL_RCC_GetHCLKFreq>
 800456c:	4602      	mov	r2, r0
 800456e:	4b06      	ldr	r3, [pc, #24]	; (8004588 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	0adb      	lsrs	r3, r3, #11
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	4904      	ldr	r1, [pc, #16]	; (800458c <HAL_RCC_GetPCLK2Freq+0x28>)
 800457a:	5ccb      	ldrb	r3, [r1, r3]
 800457c:	f003 031f 	and.w	r3, r3, #31
 8004580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004584:	4618      	mov	r0, r3
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40021000 	.word	0x40021000
 800458c:	0800aca0 	.word	0x0800aca0

08004590 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	220f      	movs	r2, #15
 800459e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80045a0:	4b12      	ldr	r3, [pc, #72]	; (80045ec <HAL_RCC_GetClockConfig+0x5c>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f003 0203 	and.w	r2, r3, #3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80045ac:	4b0f      	ldr	r3, [pc, #60]	; (80045ec <HAL_RCC_GetClockConfig+0x5c>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80045b8:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <HAL_RCC_GetClockConfig+0x5c>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80045c4:	4b09      	ldr	r3, [pc, #36]	; (80045ec <HAL_RCC_GetClockConfig+0x5c>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	08db      	lsrs	r3, r3, #3
 80045ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80045d2:	4b07      	ldr	r3, [pc, #28]	; (80045f0 <HAL_RCC_GetClockConfig+0x60>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 020f 	and.w	r2, r3, #15
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	601a      	str	r2, [r3, #0]
}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40021000 	.word	0x40021000
 80045f0:	40022000 	.word	0x40022000

080045f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80045fc:	2300      	movs	r3, #0
 80045fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004600:	4b27      	ldr	r3, [pc, #156]	; (80046a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800460c:	f7ff f8e4 	bl	80037d8 <HAL_PWREx_GetVoltageRange>
 8004610:	6178      	str	r0, [r7, #20]
 8004612:	e014      	b.n	800463e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004614:	4b22      	ldr	r3, [pc, #136]	; (80046a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004618:	4a21      	ldr	r2, [pc, #132]	; (80046a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800461a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800461e:	6593      	str	r3, [r2, #88]	; 0x58
 8004620:	4b1f      	ldr	r3, [pc, #124]	; (80046a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800462c:	f7ff f8d4 	bl	80037d8 <HAL_PWREx_GetVoltageRange>
 8004630:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004632:	4b1b      	ldr	r3, [pc, #108]	; (80046a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004636:	4a1a      	ldr	r2, [pc, #104]	; (80046a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004638:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800463c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004644:	d10b      	bne.n	800465e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b80      	cmp	r3, #128	; 0x80
 800464a:	d913      	bls.n	8004674 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2ba0      	cmp	r3, #160	; 0xa0
 8004650:	d902      	bls.n	8004658 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004652:	2302      	movs	r3, #2
 8004654:	613b      	str	r3, [r7, #16]
 8004656:	e00d      	b.n	8004674 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004658:	2301      	movs	r3, #1
 800465a:	613b      	str	r3, [r7, #16]
 800465c:	e00a      	b.n	8004674 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b7f      	cmp	r3, #127	; 0x7f
 8004662:	d902      	bls.n	800466a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004664:	2302      	movs	r3, #2
 8004666:	613b      	str	r3, [r7, #16]
 8004668:	e004      	b.n	8004674 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b70      	cmp	r3, #112	; 0x70
 800466e:	d101      	bne.n	8004674 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004670:	2301      	movs	r3, #1
 8004672:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004674:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f023 020f 	bic.w	r2, r3, #15
 800467c:	4909      	ldr	r1, [pc, #36]	; (80046a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	4313      	orrs	r3, r2
 8004682:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004684:	4b07      	ldr	r3, [pc, #28]	; (80046a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 030f 	and.w	r3, r3, #15
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	429a      	cmp	r2, r3
 8004690:	d001      	beq.n	8004696 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e000      	b.n	8004698 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40021000 	.word	0x40021000
 80046a4:	40022000 	.word	0x40022000

080046a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046ae:	4b2d      	ldr	r3, [pc, #180]	; (8004764 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f003 0303 	and.w	r3, r3, #3
 80046b6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2b03      	cmp	r3, #3
 80046bc:	d00b      	beq.n	80046d6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2b03      	cmp	r3, #3
 80046c2:	d825      	bhi.n	8004710 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d008      	beq.n	80046dc <RCC_GetSysClockFreqFromPLLSource+0x34>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d11f      	bne.n	8004710 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80046d0:	4b25      	ldr	r3, [pc, #148]	; (8004768 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80046d2:	613b      	str	r3, [r7, #16]
    break;
 80046d4:	e01f      	b.n	8004716 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80046d6:	4b25      	ldr	r3, [pc, #148]	; (800476c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80046d8:	613b      	str	r3, [r7, #16]
    break;
 80046da:	e01c      	b.n	8004716 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80046dc:	4b21      	ldr	r3, [pc, #132]	; (8004764 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0308 	and.w	r3, r3, #8
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d107      	bne.n	80046f8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80046e8:	4b1e      	ldr	r3, [pc, #120]	; (8004764 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ee:	0a1b      	lsrs	r3, r3, #8
 80046f0:	f003 030f 	and.w	r3, r3, #15
 80046f4:	617b      	str	r3, [r7, #20]
 80046f6:	e005      	b.n	8004704 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80046f8:	4b1a      	ldr	r3, [pc, #104]	; (8004764 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	091b      	lsrs	r3, r3, #4
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004704:	4a1a      	ldr	r2, [pc, #104]	; (8004770 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800470c:	613b      	str	r3, [r7, #16]
    break;
 800470e:	e002      	b.n	8004716 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004710:	2300      	movs	r3, #0
 8004712:	613b      	str	r3, [r7, #16]
    break;
 8004714:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004716:	4b13      	ldr	r3, [pc, #76]	; (8004764 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	091b      	lsrs	r3, r3, #4
 800471c:	f003 030f 	and.w	r3, r3, #15
 8004720:	3301      	adds	r3, #1
 8004722:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004724:	4b0f      	ldr	r3, [pc, #60]	; (8004764 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	0a1b      	lsrs	r3, r3, #8
 800472a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	fb03 f202 	mul.w	r2, r3, r2
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	fbb2 f3f3 	udiv	r3, r2, r3
 800473a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800473c:	4b09      	ldr	r3, [pc, #36]	; (8004764 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	0e5b      	lsrs	r3, r3, #25
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	3301      	adds	r3, #1
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	fbb2 f3f3 	udiv	r3, r2, r3
 8004754:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004756:	683b      	ldr	r3, [r7, #0]
}
 8004758:	4618      	mov	r0, r3
 800475a:	371c      	adds	r7, #28
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	40021000 	.word	0x40021000
 8004768:	00f42400 	.word	0x00f42400
 800476c:	007a1200 	.word	0x007a1200
 8004770:	0800aca8 	.word	0x0800aca8

08004774 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800477c:	2300      	movs	r3, #0
 800477e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004780:	2300      	movs	r3, #0
 8004782:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800478c:	2b00      	cmp	r3, #0
 800478e:	d040      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004794:	2b80      	cmp	r3, #128	; 0x80
 8004796:	d02a      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004798:	2b80      	cmp	r3, #128	; 0x80
 800479a:	d825      	bhi.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800479c:	2b60      	cmp	r3, #96	; 0x60
 800479e:	d026      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80047a0:	2b60      	cmp	r3, #96	; 0x60
 80047a2:	d821      	bhi.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80047a4:	2b40      	cmp	r3, #64	; 0x40
 80047a6:	d006      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80047a8:	2b40      	cmp	r3, #64	; 0x40
 80047aa:	d81d      	bhi.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d009      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80047b0:	2b20      	cmp	r3, #32
 80047b2:	d010      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80047b4:	e018      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047b6:	4b89      	ldr	r3, [pc, #548]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	4a88      	ldr	r2, [pc, #544]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047c2:	e015      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3304      	adds	r3, #4
 80047c8:	2100      	movs	r1, #0
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fb02 	bl	8004dd4 <RCCEx_PLLSAI1_Config>
 80047d0:	4603      	mov	r3, r0
 80047d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047d4:	e00c      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	3320      	adds	r3, #32
 80047da:	2100      	movs	r1, #0
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 fbed 	bl	8004fbc <RCCEx_PLLSAI2_Config>
 80047e2:	4603      	mov	r3, r0
 80047e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047e6:	e003      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	74fb      	strb	r3, [r7, #19]
      break;
 80047ec:	e000      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80047ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047f0:	7cfb      	ldrb	r3, [r7, #19]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10b      	bne.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047f6:	4b79      	ldr	r3, [pc, #484]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047fc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004804:	4975      	ldr	r1, [pc, #468]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800480c:	e001      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800480e:	7cfb      	ldrb	r3, [r7, #19]
 8004810:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d047      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004826:	d030      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800482c:	d82a      	bhi.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800482e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004832:	d02a      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004834:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004838:	d824      	bhi.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800483a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800483e:	d008      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004844:	d81e      	bhi.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800484a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800484e:	d010      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004850:	e018      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004852:	4b62      	ldr	r3, [pc, #392]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	4a61      	ldr	r2, [pc, #388]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800485c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800485e:	e015      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3304      	adds	r3, #4
 8004864:	2100      	movs	r1, #0
 8004866:	4618      	mov	r0, r3
 8004868:	f000 fab4 	bl	8004dd4 <RCCEx_PLLSAI1_Config>
 800486c:	4603      	mov	r3, r0
 800486e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004870:	e00c      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	3320      	adds	r3, #32
 8004876:	2100      	movs	r1, #0
 8004878:	4618      	mov	r0, r3
 800487a:	f000 fb9f 	bl	8004fbc <RCCEx_PLLSAI2_Config>
 800487e:	4603      	mov	r3, r0
 8004880:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004882:	e003      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	74fb      	strb	r3, [r7, #19]
      break;
 8004888:	e000      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800488a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800488c:	7cfb      	ldrb	r3, [r7, #19]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10b      	bne.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004892:	4b52      	ldr	r3, [pc, #328]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004894:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004898:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a0:	494e      	ldr	r1, [pc, #312]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80048a8:	e001      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048aa:	7cfb      	ldrb	r3, [r7, #19]
 80048ac:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 809f 	beq.w	80049fa <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048bc:	2300      	movs	r3, #0
 80048be:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80048c0:	4b46      	ldr	r3, [pc, #280]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80048cc:	2301      	movs	r3, #1
 80048ce:	e000      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80048d0:	2300      	movs	r3, #0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00d      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048d6:	4b41      	ldr	r3, [pc, #260]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048da:	4a40      	ldr	r2, [pc, #256]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048e0:	6593      	str	r3, [r2, #88]	; 0x58
 80048e2:	4b3e      	ldr	r3, [pc, #248]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ea:	60bb      	str	r3, [r7, #8]
 80048ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ee:	2301      	movs	r3, #1
 80048f0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048f2:	4b3b      	ldr	r3, [pc, #236]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a3a      	ldr	r2, [pc, #232]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80048f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048fe:	f7fd fe67 	bl	80025d0 <HAL_GetTick>
 8004902:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004904:	e009      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004906:	f7fd fe63 	bl	80025d0 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d902      	bls.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	74fb      	strb	r3, [r7, #19]
        break;
 8004918:	e005      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800491a:	4b31      	ldr	r3, [pc, #196]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0ef      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004926:	7cfb      	ldrb	r3, [r7, #19]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d15b      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800492c:	4b2b      	ldr	r3, [pc, #172]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800492e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004936:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d01f      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	429a      	cmp	r2, r3
 8004948:	d019      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800494a:	4b24      	ldr	r3, [pc, #144]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800494c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004954:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004956:	4b21      	ldr	r3, [pc, #132]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800495c:	4a1f      	ldr	r2, [pc, #124]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800495e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004962:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004966:	4b1d      	ldr	r3, [pc, #116]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496c:	4a1b      	ldr	r2, [pc, #108]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800496e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004972:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004976:	4a19      	ldr	r2, [pc, #100]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b00      	cmp	r3, #0
 8004986:	d016      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004988:	f7fd fe22 	bl	80025d0 <HAL_GetTick>
 800498c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800498e:	e00b      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004990:	f7fd fe1e 	bl	80025d0 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	f241 3288 	movw	r2, #5000	; 0x1388
 800499e:	4293      	cmp	r3, r2
 80049a0:	d902      	bls.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	74fb      	strb	r3, [r7, #19]
            break;
 80049a6:	e006      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049a8:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0ec      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80049b6:	7cfb      	ldrb	r3, [r7, #19]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10c      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049bc:	4b07      	ldr	r3, [pc, #28]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049cc:	4903      	ldr	r1, [pc, #12]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80049d4:	e008      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049d6:	7cfb      	ldrb	r3, [r7, #19]
 80049d8:	74bb      	strb	r3, [r7, #18]
 80049da:	e005      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80049dc:	40021000 	.word	0x40021000
 80049e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e4:	7cfb      	ldrb	r3, [r7, #19]
 80049e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049e8:	7c7b      	ldrb	r3, [r7, #17]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d105      	bne.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049ee:	4ba0      	ldr	r3, [pc, #640]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f2:	4a9f      	ldr	r2, [pc, #636]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a06:	4b9a      	ldr	r3, [pc, #616]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0c:	f023 0203 	bic.w	r2, r3, #3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a14:	4996      	ldr	r1, [pc, #600]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a28:	4b91      	ldr	r3, [pc, #580]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2e:	f023 020c 	bic.w	r2, r3, #12
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	498e      	ldr	r1, [pc, #568]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0304 	and.w	r3, r3, #4
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a4a:	4b89      	ldr	r3, [pc, #548]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a58:	4985      	ldr	r1, [pc, #532]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0308 	and.w	r3, r3, #8
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00a      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a6c:	4b80      	ldr	r3, [pc, #512]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a7a:	497d      	ldr	r1, [pc, #500]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0310 	and.w	r3, r3, #16
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a8e:	4b78      	ldr	r3, [pc, #480]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a9c:	4974      	ldr	r1, [pc, #464]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0320 	and.w	r3, r3, #32
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00a      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ab0:	4b6f      	ldr	r3, [pc, #444]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004abe:	496c      	ldr	r1, [pc, #432]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ad2:	4b67      	ldr	r3, [pc, #412]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ae0:	4963      	ldr	r1, [pc, #396]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00a      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004af4:	4b5e      	ldr	r3, [pc, #376]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b02:	495b      	ldr	r1, [pc, #364]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b16:	4b56      	ldr	r3, [pc, #344]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b24:	4952      	ldr	r1, [pc, #328]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00a      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b38:	4b4d      	ldr	r3, [pc, #308]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b46:	494a      	ldr	r1, [pc, #296]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00a      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b5a:	4b45      	ldr	r3, [pc, #276]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b68:	4941      	ldr	r1, [pc, #260]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00a      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b7c:	4b3c      	ldr	r3, [pc, #240]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b82:	f023 0203 	bic.w	r2, r3, #3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b8a:	4939      	ldr	r1, [pc, #228]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d028      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b9e:	4b34      	ldr	r3, [pc, #208]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bac:	4930      	ldr	r1, [pc, #192]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bbc:	d106      	bne.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bbe:	4b2c      	ldr	r3, [pc, #176]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	4a2b      	ldr	r2, [pc, #172]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bc8:	60d3      	str	r3, [r2, #12]
 8004bca:	e011      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bd4:	d10c      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	3304      	adds	r3, #4
 8004bda:	2101      	movs	r1, #1
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 f8f9 	bl	8004dd4 <RCCEx_PLLSAI1_Config>
 8004be2:	4603      	mov	r3, r0
 8004be4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004be6:	7cfb      	ldrb	r3, [r7, #19]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d001      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004bec:	7cfb      	ldrb	r3, [r7, #19]
 8004bee:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d04d      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c04:	d108      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004c06:	4b1a      	ldr	r3, [pc, #104]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c0c:	4a18      	ldr	r2, [pc, #96]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c12:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004c16:	e012      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004c18:	4b15      	ldr	r3, [pc, #84]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c1e:	4a14      	ldr	r2, [pc, #80]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c24:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004c28:	4b11      	ldr	r3, [pc, #68]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c36:	490e      	ldr	r1, [pc, #56]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c46:	d106      	bne.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c48:	4b09      	ldr	r3, [pc, #36]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	4a08      	ldr	r2, [pc, #32]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c52:	60d3      	str	r3, [r2, #12]
 8004c54:	e020      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c5e:	d109      	bne.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c60:	4b03      	ldr	r3, [pc, #12]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	4a02      	ldr	r2, [pc, #8]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c6a:	60d3      	str	r3, [r2, #12]
 8004c6c:	e014      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004c6e:	bf00      	nop
 8004c70:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c7c:	d10c      	bne.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	3304      	adds	r3, #4
 8004c82:	2101      	movs	r1, #1
 8004c84:	4618      	mov	r0, r3
 8004c86:	f000 f8a5 	bl	8004dd4 <RCCEx_PLLSAI1_Config>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c8e:	7cfb      	ldrb	r3, [r7, #19]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004c94:	7cfb      	ldrb	r3, [r7, #19]
 8004c96:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d028      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ca4:	4b4a      	ldr	r3, [pc, #296]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004caa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cb2:	4947      	ldr	r1, [pc, #284]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cc2:	d106      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cc4:	4b42      	ldr	r3, [pc, #264]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	4a41      	ldr	r2, [pc, #260]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cce:	60d3      	str	r3, [r2, #12]
 8004cd0:	e011      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cda:	d10c      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3304      	adds	r3, #4
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 f876 	bl	8004dd4 <RCCEx_PLLSAI1_Config>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cec:	7cfb      	ldrb	r3, [r7, #19]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004cf2:	7cfb      	ldrb	r3, [r7, #19]
 8004cf4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d01e      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d02:	4b33      	ldr	r3, [pc, #204]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d08:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d12:	492f      	ldr	r1, [pc, #188]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d24:	d10c      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	3304      	adds	r3, #4
 8004d2a:	2102      	movs	r1, #2
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 f851 	bl	8004dd4 <RCCEx_PLLSAI1_Config>
 8004d32:	4603      	mov	r3, r0
 8004d34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d36:	7cfb      	ldrb	r3, [r7, #19]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004d3c:	7cfb      	ldrb	r3, [r7, #19]
 8004d3e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00b      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d4c:	4b20      	ldr	r3, [pc, #128]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d52:	f023 0204 	bic.w	r2, r3, #4
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d5c:	491c      	ldr	r1, [pc, #112]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00b      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004d70:	4b17      	ldr	r3, [pc, #92]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d76:	f023 0218 	bic.w	r2, r3, #24
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d80:	4913      	ldr	r1, [pc, #76]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d017      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004d94:	4b0e      	ldr	r3, [pc, #56]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004da4:	490a      	ldr	r1, [pc, #40]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004db2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004db6:	d105      	bne.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004db8:	4b05      	ldr	r3, [pc, #20]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	4a04      	ldr	r2, [pc, #16]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dc2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004dc4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3718      	adds	r7, #24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	40021000 	.word	0x40021000

08004dd4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dde:	2300      	movs	r3, #0
 8004de0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004de2:	4b72      	ldr	r3, [pc, #456]	; (8004fac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f003 0303 	and.w	r3, r3, #3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00e      	beq.n	8004e0c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004dee:	4b6f      	ldr	r3, [pc, #444]	; (8004fac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f003 0203 	and.w	r2, r3, #3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d103      	bne.n	8004e06 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
       ||
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d142      	bne.n	8004e8c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	73fb      	strb	r3, [r7, #15]
 8004e0a:	e03f      	b.n	8004e8c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b03      	cmp	r3, #3
 8004e12:	d018      	beq.n	8004e46 <RCCEx_PLLSAI1_Config+0x72>
 8004e14:	2b03      	cmp	r3, #3
 8004e16:	d825      	bhi.n	8004e64 <RCCEx_PLLSAI1_Config+0x90>
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d002      	beq.n	8004e22 <RCCEx_PLLSAI1_Config+0x4e>
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d009      	beq.n	8004e34 <RCCEx_PLLSAI1_Config+0x60>
 8004e20:	e020      	b.n	8004e64 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e22:	4b62      	ldr	r3, [pc, #392]	; (8004fac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d11d      	bne.n	8004e6a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e32:	e01a      	b.n	8004e6a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e34:	4b5d      	ldr	r3, [pc, #372]	; (8004fac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d116      	bne.n	8004e6e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e44:	e013      	b.n	8004e6e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e46:	4b59      	ldr	r3, [pc, #356]	; (8004fac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10f      	bne.n	8004e72 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e52:	4b56      	ldr	r3, [pc, #344]	; (8004fac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d109      	bne.n	8004e72 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e62:	e006      	b.n	8004e72 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	73fb      	strb	r3, [r7, #15]
      break;
 8004e68:	e004      	b.n	8004e74 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004e6a:	bf00      	nop
 8004e6c:	e002      	b.n	8004e74 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004e6e:	bf00      	nop
 8004e70:	e000      	b.n	8004e74 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004e72:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d108      	bne.n	8004e8c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004e7a:	4b4c      	ldr	r3, [pc, #304]	; (8004fac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f023 0203 	bic.w	r2, r3, #3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4949      	ldr	r1, [pc, #292]	; (8004fac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f040 8086 	bne.w	8004fa0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e94:	4b45      	ldr	r3, [pc, #276]	; (8004fac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a44      	ldr	r2, [pc, #272]	; (8004fac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ea0:	f7fd fb96 	bl	80025d0 <HAL_GetTick>
 8004ea4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ea6:	e009      	b.n	8004ebc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ea8:	f7fd fb92 	bl	80025d0 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d902      	bls.n	8004ebc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	73fb      	strb	r3, [r7, #15]
        break;
 8004eba:	e005      	b.n	8004ec8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ebc:	4b3b      	ldr	r3, [pc, #236]	; (8004fac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1ef      	bne.n	8004ea8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004ec8:	7bfb      	ldrb	r3, [r7, #15]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d168      	bne.n	8004fa0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d113      	bne.n	8004efc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ed4:	4b35      	ldr	r3, [pc, #212]	; (8004fac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ed6:	691a      	ldr	r2, [r3, #16]
 8004ed8:	4b35      	ldr	r3, [pc, #212]	; (8004fb0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004eda:	4013      	ands	r3, r2
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	6892      	ldr	r2, [r2, #8]
 8004ee0:	0211      	lsls	r1, r2, #8
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	68d2      	ldr	r2, [r2, #12]
 8004ee6:	06d2      	lsls	r2, r2, #27
 8004ee8:	4311      	orrs	r1, r2
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	6852      	ldr	r2, [r2, #4]
 8004eee:	3a01      	subs	r2, #1
 8004ef0:	0112      	lsls	r2, r2, #4
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	492d      	ldr	r1, [pc, #180]	; (8004fac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	610b      	str	r3, [r1, #16]
 8004efa:	e02d      	b.n	8004f58 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d115      	bne.n	8004f2e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f02:	4b2a      	ldr	r3, [pc, #168]	; (8004fac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f04:	691a      	ldr	r2, [r3, #16]
 8004f06:	4b2b      	ldr	r3, [pc, #172]	; (8004fb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f08:	4013      	ands	r3, r2
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6892      	ldr	r2, [r2, #8]
 8004f0e:	0211      	lsls	r1, r2, #8
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6912      	ldr	r2, [r2, #16]
 8004f14:	0852      	lsrs	r2, r2, #1
 8004f16:	3a01      	subs	r2, #1
 8004f18:	0552      	lsls	r2, r2, #21
 8004f1a:	4311      	orrs	r1, r2
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	6852      	ldr	r2, [r2, #4]
 8004f20:	3a01      	subs	r2, #1
 8004f22:	0112      	lsls	r2, r2, #4
 8004f24:	430a      	orrs	r2, r1
 8004f26:	4921      	ldr	r1, [pc, #132]	; (8004fac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	610b      	str	r3, [r1, #16]
 8004f2c:	e014      	b.n	8004f58 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f2e:	4b1f      	ldr	r3, [pc, #124]	; (8004fac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f30:	691a      	ldr	r2, [r3, #16]
 8004f32:	4b21      	ldr	r3, [pc, #132]	; (8004fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f34:	4013      	ands	r3, r2
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6892      	ldr	r2, [r2, #8]
 8004f3a:	0211      	lsls	r1, r2, #8
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	6952      	ldr	r2, [r2, #20]
 8004f40:	0852      	lsrs	r2, r2, #1
 8004f42:	3a01      	subs	r2, #1
 8004f44:	0652      	lsls	r2, r2, #25
 8004f46:	4311      	orrs	r1, r2
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6852      	ldr	r2, [r2, #4]
 8004f4c:	3a01      	subs	r2, #1
 8004f4e:	0112      	lsls	r2, r2, #4
 8004f50:	430a      	orrs	r2, r1
 8004f52:	4916      	ldr	r1, [pc, #88]	; (8004fac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f58:	4b14      	ldr	r3, [pc, #80]	; (8004fac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a13      	ldr	r2, [pc, #76]	; (8004fac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f64:	f7fd fb34 	bl	80025d0 <HAL_GetTick>
 8004f68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f6a:	e009      	b.n	8004f80 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f6c:	f7fd fb30 	bl	80025d0 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d902      	bls.n	8004f80 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	73fb      	strb	r3, [r7, #15]
          break;
 8004f7e:	e005      	b.n	8004f8c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f80:	4b0a      	ldr	r3, [pc, #40]	; (8004fac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0ef      	beq.n	8004f6c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d106      	bne.n	8004fa0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f92:	4b06      	ldr	r3, [pc, #24]	; (8004fac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f94:	691a      	ldr	r2, [r3, #16]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	4904      	ldr	r1, [pc, #16]	; (8004fac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	40021000 	.word	0x40021000
 8004fb0:	07ff800f 	.word	0x07ff800f
 8004fb4:	ff9f800f 	.word	0xff9f800f
 8004fb8:	f9ff800f 	.word	0xf9ff800f

08004fbc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fca:	4b72      	ldr	r3, [pc, #456]	; (8005194 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f003 0303 	and.w	r3, r3, #3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00e      	beq.n	8004ff4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004fd6:	4b6f      	ldr	r3, [pc, #444]	; (8005194 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f003 0203 	and.w	r2, r3, #3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d103      	bne.n	8004fee <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
       ||
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d142      	bne.n	8005074 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	73fb      	strb	r3, [r7, #15]
 8004ff2:	e03f      	b.n	8005074 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2b03      	cmp	r3, #3
 8004ffa:	d018      	beq.n	800502e <RCCEx_PLLSAI2_Config+0x72>
 8004ffc:	2b03      	cmp	r3, #3
 8004ffe:	d825      	bhi.n	800504c <RCCEx_PLLSAI2_Config+0x90>
 8005000:	2b01      	cmp	r3, #1
 8005002:	d002      	beq.n	800500a <RCCEx_PLLSAI2_Config+0x4e>
 8005004:	2b02      	cmp	r3, #2
 8005006:	d009      	beq.n	800501c <RCCEx_PLLSAI2_Config+0x60>
 8005008:	e020      	b.n	800504c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800500a:	4b62      	ldr	r3, [pc, #392]	; (8005194 <RCCEx_PLLSAI2_Config+0x1d8>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d11d      	bne.n	8005052 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800501a:	e01a      	b.n	8005052 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800501c:	4b5d      	ldr	r3, [pc, #372]	; (8005194 <RCCEx_PLLSAI2_Config+0x1d8>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005024:	2b00      	cmp	r3, #0
 8005026:	d116      	bne.n	8005056 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800502c:	e013      	b.n	8005056 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800502e:	4b59      	ldr	r3, [pc, #356]	; (8005194 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10f      	bne.n	800505a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800503a:	4b56      	ldr	r3, [pc, #344]	; (8005194 <RCCEx_PLLSAI2_Config+0x1d8>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d109      	bne.n	800505a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800504a:	e006      	b.n	800505a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	73fb      	strb	r3, [r7, #15]
      break;
 8005050:	e004      	b.n	800505c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005052:	bf00      	nop
 8005054:	e002      	b.n	800505c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005056:	bf00      	nop
 8005058:	e000      	b.n	800505c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800505a:	bf00      	nop
    }

    if(status == HAL_OK)
 800505c:	7bfb      	ldrb	r3, [r7, #15]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d108      	bne.n	8005074 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005062:	4b4c      	ldr	r3, [pc, #304]	; (8005194 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f023 0203 	bic.w	r2, r3, #3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4949      	ldr	r1, [pc, #292]	; (8005194 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005070:	4313      	orrs	r3, r2
 8005072:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005074:	7bfb      	ldrb	r3, [r7, #15]
 8005076:	2b00      	cmp	r3, #0
 8005078:	f040 8086 	bne.w	8005188 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800507c:	4b45      	ldr	r3, [pc, #276]	; (8005194 <RCCEx_PLLSAI2_Config+0x1d8>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a44      	ldr	r2, [pc, #272]	; (8005194 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005082:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005086:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005088:	f7fd faa2 	bl	80025d0 <HAL_GetTick>
 800508c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800508e:	e009      	b.n	80050a4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005090:	f7fd fa9e 	bl	80025d0 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d902      	bls.n	80050a4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	73fb      	strb	r3, [r7, #15]
        break;
 80050a2:	e005      	b.n	80050b0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050a4:	4b3b      	ldr	r3, [pc, #236]	; (8005194 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1ef      	bne.n	8005090 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d168      	bne.n	8005188 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d113      	bne.n	80050e4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050bc:	4b35      	ldr	r3, [pc, #212]	; (8005194 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050be:	695a      	ldr	r2, [r3, #20]
 80050c0:	4b35      	ldr	r3, [pc, #212]	; (8005198 <RCCEx_PLLSAI2_Config+0x1dc>)
 80050c2:	4013      	ands	r3, r2
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	6892      	ldr	r2, [r2, #8]
 80050c8:	0211      	lsls	r1, r2, #8
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	68d2      	ldr	r2, [r2, #12]
 80050ce:	06d2      	lsls	r2, r2, #27
 80050d0:	4311      	orrs	r1, r2
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	6852      	ldr	r2, [r2, #4]
 80050d6:	3a01      	subs	r2, #1
 80050d8:	0112      	lsls	r2, r2, #4
 80050da:	430a      	orrs	r2, r1
 80050dc:	492d      	ldr	r1, [pc, #180]	; (8005194 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	614b      	str	r3, [r1, #20]
 80050e2:	e02d      	b.n	8005140 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d115      	bne.n	8005116 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050ea:	4b2a      	ldr	r3, [pc, #168]	; (8005194 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050ec:	695a      	ldr	r2, [r3, #20]
 80050ee:	4b2b      	ldr	r3, [pc, #172]	; (800519c <RCCEx_PLLSAI2_Config+0x1e0>)
 80050f0:	4013      	ands	r3, r2
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6892      	ldr	r2, [r2, #8]
 80050f6:	0211      	lsls	r1, r2, #8
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	6912      	ldr	r2, [r2, #16]
 80050fc:	0852      	lsrs	r2, r2, #1
 80050fe:	3a01      	subs	r2, #1
 8005100:	0552      	lsls	r2, r2, #21
 8005102:	4311      	orrs	r1, r2
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	6852      	ldr	r2, [r2, #4]
 8005108:	3a01      	subs	r2, #1
 800510a:	0112      	lsls	r2, r2, #4
 800510c:	430a      	orrs	r2, r1
 800510e:	4921      	ldr	r1, [pc, #132]	; (8005194 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005110:	4313      	orrs	r3, r2
 8005112:	614b      	str	r3, [r1, #20]
 8005114:	e014      	b.n	8005140 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005116:	4b1f      	ldr	r3, [pc, #124]	; (8005194 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005118:	695a      	ldr	r2, [r3, #20]
 800511a:	4b21      	ldr	r3, [pc, #132]	; (80051a0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800511c:	4013      	ands	r3, r2
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6892      	ldr	r2, [r2, #8]
 8005122:	0211      	lsls	r1, r2, #8
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6952      	ldr	r2, [r2, #20]
 8005128:	0852      	lsrs	r2, r2, #1
 800512a:	3a01      	subs	r2, #1
 800512c:	0652      	lsls	r2, r2, #25
 800512e:	4311      	orrs	r1, r2
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	6852      	ldr	r2, [r2, #4]
 8005134:	3a01      	subs	r2, #1
 8005136:	0112      	lsls	r2, r2, #4
 8005138:	430a      	orrs	r2, r1
 800513a:	4916      	ldr	r1, [pc, #88]	; (8005194 <RCCEx_PLLSAI2_Config+0x1d8>)
 800513c:	4313      	orrs	r3, r2
 800513e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005140:	4b14      	ldr	r3, [pc, #80]	; (8005194 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a13      	ldr	r2, [pc, #76]	; (8005194 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800514a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800514c:	f7fd fa40 	bl	80025d0 <HAL_GetTick>
 8005150:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005152:	e009      	b.n	8005168 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005154:	f7fd fa3c 	bl	80025d0 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d902      	bls.n	8005168 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	73fb      	strb	r3, [r7, #15]
          break;
 8005166:	e005      	b.n	8005174 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005168:	4b0a      	ldr	r3, [pc, #40]	; (8005194 <RCCEx_PLLSAI2_Config+0x1d8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0ef      	beq.n	8005154 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005174:	7bfb      	ldrb	r3, [r7, #15]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d106      	bne.n	8005188 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800517a:	4b06      	ldr	r3, [pc, #24]	; (8005194 <RCCEx_PLLSAI2_Config+0x1d8>)
 800517c:	695a      	ldr	r2, [r3, #20]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	4904      	ldr	r1, [pc, #16]	; (8005194 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005184:	4313      	orrs	r3, r2
 8005186:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005188:	7bfb      	ldrb	r3, [r7, #15]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	40021000 	.word	0x40021000
 8005198:	07ff800f 	.word	0x07ff800f
 800519c:	ff9f800f 	.word	0xff9f800f
 80051a0:	f9ff800f 	.word	0xf9ff800f

080051a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e049      	b.n	800524a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d106      	bne.n	80051d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7fc ffa4 	bl	8002118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	3304      	adds	r3, #4
 80051e0:	4619      	mov	r1, r3
 80051e2:	4610      	mov	r0, r2
 80051e4:	f000 fab6 	bl	8005754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
	...

08005254 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b01      	cmp	r3, #1
 8005266:	d001      	beq.n	800526c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e04f      	b.n	800530c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0201 	orr.w	r2, r2, #1
 8005282:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a23      	ldr	r2, [pc, #140]	; (8005318 <HAL_TIM_Base_Start_IT+0xc4>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d01d      	beq.n	80052ca <HAL_TIM_Base_Start_IT+0x76>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005296:	d018      	beq.n	80052ca <HAL_TIM_Base_Start_IT+0x76>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a1f      	ldr	r2, [pc, #124]	; (800531c <HAL_TIM_Base_Start_IT+0xc8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d013      	beq.n	80052ca <HAL_TIM_Base_Start_IT+0x76>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a1e      	ldr	r2, [pc, #120]	; (8005320 <HAL_TIM_Base_Start_IT+0xcc>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00e      	beq.n	80052ca <HAL_TIM_Base_Start_IT+0x76>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a1c      	ldr	r2, [pc, #112]	; (8005324 <HAL_TIM_Base_Start_IT+0xd0>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d009      	beq.n	80052ca <HAL_TIM_Base_Start_IT+0x76>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a1b      	ldr	r2, [pc, #108]	; (8005328 <HAL_TIM_Base_Start_IT+0xd4>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d004      	beq.n	80052ca <HAL_TIM_Base_Start_IT+0x76>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a19      	ldr	r2, [pc, #100]	; (800532c <HAL_TIM_Base_Start_IT+0xd8>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d115      	bne.n	80052f6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	4b17      	ldr	r3, [pc, #92]	; (8005330 <HAL_TIM_Base_Start_IT+0xdc>)
 80052d2:	4013      	ands	r3, r2
 80052d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2b06      	cmp	r3, #6
 80052da:	d015      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0xb4>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e2:	d011      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0201 	orr.w	r2, r2, #1
 80052f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f4:	e008      	b.n	8005308 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f042 0201 	orr.w	r2, r2, #1
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	e000      	b.n	800530a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005308:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	40012c00 	.word	0x40012c00
 800531c:	40000400 	.word	0x40000400
 8005320:	40000800 	.word	0x40000800
 8005324:	40000c00 	.word	0x40000c00
 8005328:	40013400 	.word	0x40013400
 800532c:	40014000 	.word	0x40014000
 8005330:	00010007 	.word	0x00010007

08005334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b02      	cmp	r3, #2
 8005348:	d122      	bne.n	8005390 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b02      	cmp	r3, #2
 8005356:	d11b      	bne.n	8005390 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f06f 0202 	mvn.w	r2, #2
 8005360:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f9ce 	bl	8005718 <HAL_TIM_IC_CaptureCallback>
 800537c:	e005      	b.n	800538a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f9c0 	bl	8005704 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f9d1 	bl	800572c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f003 0304 	and.w	r3, r3, #4
 800539a:	2b04      	cmp	r3, #4
 800539c:	d122      	bne.n	80053e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d11b      	bne.n	80053e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f06f 0204 	mvn.w	r2, #4
 80053b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2202      	movs	r2, #2
 80053ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f9a4 	bl	8005718 <HAL_TIM_IC_CaptureCallback>
 80053d0:	e005      	b.n	80053de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f996 	bl	8005704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f9a7 	bl	800572c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f003 0308 	and.w	r3, r3, #8
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d122      	bne.n	8005438 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f003 0308 	and.w	r3, r3, #8
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d11b      	bne.n	8005438 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f06f 0208 	mvn.w	r2, #8
 8005408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2204      	movs	r2, #4
 800540e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f97a 	bl	8005718 <HAL_TIM_IC_CaptureCallback>
 8005424:	e005      	b.n	8005432 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f96c 	bl	8005704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f97d 	bl	800572c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f003 0310 	and.w	r3, r3, #16
 8005442:	2b10      	cmp	r3, #16
 8005444:	d122      	bne.n	800548c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f003 0310 	and.w	r3, r3, #16
 8005450:	2b10      	cmp	r3, #16
 8005452:	d11b      	bne.n	800548c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f06f 0210 	mvn.w	r2, #16
 800545c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2208      	movs	r2, #8
 8005462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f950 	bl	8005718 <HAL_TIM_IC_CaptureCallback>
 8005478:	e005      	b.n	8005486 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f942 	bl	8005704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f953 	bl	800572c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b01      	cmp	r3, #1
 8005498:	d10e      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d107      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0201 	mvn.w	r2, #1
 80054b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7fc fba6 	bl	8001c04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c2:	2b80      	cmp	r3, #128	; 0x80
 80054c4:	d10e      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d0:	2b80      	cmp	r3, #128	; 0x80
 80054d2:	d107      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fafe 	bl	8005ae0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054f2:	d10e      	bne.n	8005512 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fe:	2b80      	cmp	r3, #128	; 0x80
 8005500:	d107      	bne.n	8005512 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800550a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 faf1 	bl	8005af4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551c:	2b40      	cmp	r3, #64	; 0x40
 800551e:	d10e      	bne.n	800553e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552a:	2b40      	cmp	r3, #64	; 0x40
 800552c:	d107      	bne.n	800553e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f901 	bl	8005740 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	f003 0320 	and.w	r3, r3, #32
 8005548:	2b20      	cmp	r3, #32
 800554a:	d10e      	bne.n	800556a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b20      	cmp	r3, #32
 8005558:	d107      	bne.n	800556a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f06f 0220 	mvn.w	r2, #32
 8005562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 fab1 	bl	8005acc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800556a:	bf00      	nop
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b084      	sub	sp, #16
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800557c:	2300      	movs	r3, #0
 800557e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005586:	2b01      	cmp	r3, #1
 8005588:	d101      	bne.n	800558e <HAL_TIM_ConfigClockSource+0x1c>
 800558a:	2302      	movs	r3, #2
 800558c:	e0b6      	b.n	80056fc <HAL_TIM_ConfigClockSource+0x18a>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2202      	movs	r2, #2
 800559a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ac:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055b0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055b8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ca:	d03e      	beq.n	800564a <HAL_TIM_ConfigClockSource+0xd8>
 80055cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055d0:	f200 8087 	bhi.w	80056e2 <HAL_TIM_ConfigClockSource+0x170>
 80055d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d8:	f000 8086 	beq.w	80056e8 <HAL_TIM_ConfigClockSource+0x176>
 80055dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055e0:	d87f      	bhi.n	80056e2 <HAL_TIM_ConfigClockSource+0x170>
 80055e2:	2b70      	cmp	r3, #112	; 0x70
 80055e4:	d01a      	beq.n	800561c <HAL_TIM_ConfigClockSource+0xaa>
 80055e6:	2b70      	cmp	r3, #112	; 0x70
 80055e8:	d87b      	bhi.n	80056e2 <HAL_TIM_ConfigClockSource+0x170>
 80055ea:	2b60      	cmp	r3, #96	; 0x60
 80055ec:	d050      	beq.n	8005690 <HAL_TIM_ConfigClockSource+0x11e>
 80055ee:	2b60      	cmp	r3, #96	; 0x60
 80055f0:	d877      	bhi.n	80056e2 <HAL_TIM_ConfigClockSource+0x170>
 80055f2:	2b50      	cmp	r3, #80	; 0x50
 80055f4:	d03c      	beq.n	8005670 <HAL_TIM_ConfigClockSource+0xfe>
 80055f6:	2b50      	cmp	r3, #80	; 0x50
 80055f8:	d873      	bhi.n	80056e2 <HAL_TIM_ConfigClockSource+0x170>
 80055fa:	2b40      	cmp	r3, #64	; 0x40
 80055fc:	d058      	beq.n	80056b0 <HAL_TIM_ConfigClockSource+0x13e>
 80055fe:	2b40      	cmp	r3, #64	; 0x40
 8005600:	d86f      	bhi.n	80056e2 <HAL_TIM_ConfigClockSource+0x170>
 8005602:	2b30      	cmp	r3, #48	; 0x30
 8005604:	d064      	beq.n	80056d0 <HAL_TIM_ConfigClockSource+0x15e>
 8005606:	2b30      	cmp	r3, #48	; 0x30
 8005608:	d86b      	bhi.n	80056e2 <HAL_TIM_ConfigClockSource+0x170>
 800560a:	2b20      	cmp	r3, #32
 800560c:	d060      	beq.n	80056d0 <HAL_TIM_ConfigClockSource+0x15e>
 800560e:	2b20      	cmp	r3, #32
 8005610:	d867      	bhi.n	80056e2 <HAL_TIM_ConfigClockSource+0x170>
 8005612:	2b00      	cmp	r3, #0
 8005614:	d05c      	beq.n	80056d0 <HAL_TIM_ConfigClockSource+0x15e>
 8005616:	2b10      	cmp	r3, #16
 8005618:	d05a      	beq.n	80056d0 <HAL_TIM_ConfigClockSource+0x15e>
 800561a:	e062      	b.n	80056e2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6818      	ldr	r0, [r3, #0]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	6899      	ldr	r1, [r3, #8]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f000 f9a6 	bl	800597c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800563e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	609a      	str	r2, [r3, #8]
      break;
 8005648:	e04f      	b.n	80056ea <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6818      	ldr	r0, [r3, #0]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	6899      	ldr	r1, [r3, #8]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f000 f98f 	bl	800597c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800566c:	609a      	str	r2, [r3, #8]
      break;
 800566e:	e03c      	b.n	80056ea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6818      	ldr	r0, [r3, #0]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	6859      	ldr	r1, [r3, #4]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	461a      	mov	r2, r3
 800567e:	f000 f903 	bl	8005888 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2150      	movs	r1, #80	; 0x50
 8005688:	4618      	mov	r0, r3
 800568a:	f000 f95c 	bl	8005946 <TIM_ITRx_SetConfig>
      break;
 800568e:	e02c      	b.n	80056ea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6818      	ldr	r0, [r3, #0]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	6859      	ldr	r1, [r3, #4]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	461a      	mov	r2, r3
 800569e:	f000 f922 	bl	80058e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2160      	movs	r1, #96	; 0x60
 80056a8:	4618      	mov	r0, r3
 80056aa:	f000 f94c 	bl	8005946 <TIM_ITRx_SetConfig>
      break;
 80056ae:	e01c      	b.n	80056ea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6818      	ldr	r0, [r3, #0]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	6859      	ldr	r1, [r3, #4]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	461a      	mov	r2, r3
 80056be:	f000 f8e3 	bl	8005888 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2140      	movs	r1, #64	; 0x40
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 f93c 	bl	8005946 <TIM_ITRx_SetConfig>
      break;
 80056ce:	e00c      	b.n	80056ea <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4619      	mov	r1, r3
 80056da:	4610      	mov	r0, r2
 80056dc:	f000 f933 	bl	8005946 <TIM_ITRx_SetConfig>
      break;
 80056e0:	e003      	b.n	80056ea <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	73fb      	strb	r3, [r7, #15]
      break;
 80056e6:	e000      	b.n	80056ea <HAL_TIM_ConfigClockSource+0x178>
      break;
 80056e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a40      	ldr	r2, [pc, #256]	; (8005868 <TIM_Base_SetConfig+0x114>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d013      	beq.n	8005794 <TIM_Base_SetConfig+0x40>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005772:	d00f      	beq.n	8005794 <TIM_Base_SetConfig+0x40>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a3d      	ldr	r2, [pc, #244]	; (800586c <TIM_Base_SetConfig+0x118>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d00b      	beq.n	8005794 <TIM_Base_SetConfig+0x40>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a3c      	ldr	r2, [pc, #240]	; (8005870 <TIM_Base_SetConfig+0x11c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d007      	beq.n	8005794 <TIM_Base_SetConfig+0x40>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a3b      	ldr	r2, [pc, #236]	; (8005874 <TIM_Base_SetConfig+0x120>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d003      	beq.n	8005794 <TIM_Base_SetConfig+0x40>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a3a      	ldr	r2, [pc, #232]	; (8005878 <TIM_Base_SetConfig+0x124>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d108      	bne.n	80057a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a2f      	ldr	r2, [pc, #188]	; (8005868 <TIM_Base_SetConfig+0x114>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d01f      	beq.n	80057ee <TIM_Base_SetConfig+0x9a>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b4:	d01b      	beq.n	80057ee <TIM_Base_SetConfig+0x9a>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a2c      	ldr	r2, [pc, #176]	; (800586c <TIM_Base_SetConfig+0x118>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d017      	beq.n	80057ee <TIM_Base_SetConfig+0x9a>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a2b      	ldr	r2, [pc, #172]	; (8005870 <TIM_Base_SetConfig+0x11c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d013      	beq.n	80057ee <TIM_Base_SetConfig+0x9a>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a2a      	ldr	r2, [pc, #168]	; (8005874 <TIM_Base_SetConfig+0x120>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d00f      	beq.n	80057ee <TIM_Base_SetConfig+0x9a>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a29      	ldr	r2, [pc, #164]	; (8005878 <TIM_Base_SetConfig+0x124>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d00b      	beq.n	80057ee <TIM_Base_SetConfig+0x9a>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a28      	ldr	r2, [pc, #160]	; (800587c <TIM_Base_SetConfig+0x128>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d007      	beq.n	80057ee <TIM_Base_SetConfig+0x9a>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a27      	ldr	r2, [pc, #156]	; (8005880 <TIM_Base_SetConfig+0x12c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d003      	beq.n	80057ee <TIM_Base_SetConfig+0x9a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a26      	ldr	r2, [pc, #152]	; (8005884 <TIM_Base_SetConfig+0x130>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d108      	bne.n	8005800 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	4313      	orrs	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a10      	ldr	r2, [pc, #64]	; (8005868 <TIM_Base_SetConfig+0x114>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d00f      	beq.n	800584c <TIM_Base_SetConfig+0xf8>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a12      	ldr	r2, [pc, #72]	; (8005878 <TIM_Base_SetConfig+0x124>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d00b      	beq.n	800584c <TIM_Base_SetConfig+0xf8>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a11      	ldr	r2, [pc, #68]	; (800587c <TIM_Base_SetConfig+0x128>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d007      	beq.n	800584c <TIM_Base_SetConfig+0xf8>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a10      	ldr	r2, [pc, #64]	; (8005880 <TIM_Base_SetConfig+0x12c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d003      	beq.n	800584c <TIM_Base_SetConfig+0xf8>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a0f      	ldr	r2, [pc, #60]	; (8005884 <TIM_Base_SetConfig+0x130>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d103      	bne.n	8005854 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	691a      	ldr	r2, [r3, #16]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	615a      	str	r2, [r3, #20]
}
 800585a:	bf00      	nop
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	40012c00 	.word	0x40012c00
 800586c:	40000400 	.word	0x40000400
 8005870:	40000800 	.word	0x40000800
 8005874:	40000c00 	.word	0x40000c00
 8005878:	40013400 	.word	0x40013400
 800587c:	40014000 	.word	0x40014000
 8005880:	40014400 	.word	0x40014400
 8005884:	40014800 	.word	0x40014800

08005888 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	f023 0201 	bic.w	r2, r3, #1
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	011b      	lsls	r3, r3, #4
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f023 030a 	bic.w	r3, r3, #10
 80058c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	621a      	str	r2, [r3, #32]
}
 80058da:	bf00      	nop
 80058dc:	371c      	adds	r7, #28
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b087      	sub	sp, #28
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	60f8      	str	r0, [r7, #12]
 80058ee:	60b9      	str	r1, [r7, #8]
 80058f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	f023 0210 	bic.w	r2, r3, #16
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6a1b      	ldr	r3, [r3, #32]
 8005908:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005910:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	031b      	lsls	r3, r3, #12
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	4313      	orrs	r3, r2
 800591a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005922:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	4313      	orrs	r3, r2
 800592c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	621a      	str	r2, [r3, #32]
}
 800593a:	bf00      	nop
 800593c:	371c      	adds	r7, #28
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005946:	b480      	push	{r7}
 8005948:	b085      	sub	sp, #20
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
 800594e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	f043 0307 	orr.w	r3, r3, #7
 8005968:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	609a      	str	r2, [r3, #8]
}
 8005970:	bf00      	nop
 8005972:	3714      	adds	r7, #20
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800597c:	b480      	push	{r7}
 800597e:	b087      	sub	sp, #28
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
 8005988:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005996:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	021a      	lsls	r2, r3, #8
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	431a      	orrs	r2, r3
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	609a      	str	r2, [r3, #8]
}
 80059b0:	bf00      	nop
 80059b2:	371c      	adds	r7, #28
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d101      	bne.n	80059d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059d0:	2302      	movs	r3, #2
 80059d2:	e068      	b.n	8005aa6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a2e      	ldr	r2, [pc, #184]	; (8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d004      	beq.n	8005a08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a2d      	ldr	r2, [pc, #180]	; (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d108      	bne.n	8005a1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a1e      	ldr	r2, [pc, #120]	; (8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d01d      	beq.n	8005a7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a46:	d018      	beq.n	8005a7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a1b      	ldr	r2, [pc, #108]	; (8005abc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d013      	beq.n	8005a7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a1a      	ldr	r2, [pc, #104]	; (8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d00e      	beq.n	8005a7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a18      	ldr	r2, [pc, #96]	; (8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d009      	beq.n	8005a7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a13      	ldr	r2, [pc, #76]	; (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d004      	beq.n	8005a7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a14      	ldr	r2, [pc, #80]	; (8005ac8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d10c      	bne.n	8005a94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	40012c00 	.word	0x40012c00
 8005ab8:	40013400 	.word	0x40013400
 8005abc:	40000400 	.word	0x40000400
 8005ac0:	40000800 	.word	0x40000800
 8005ac4:	40000c00 	.word	0x40000c00
 8005ac8:	40014000 	.word	0x40014000

08005acc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e042      	b.n	8005ba0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d106      	bne.n	8005b32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7fc fb17 	bl	8002160 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2224      	movs	r2, #36	; 0x24
 8005b36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f022 0201 	bic.w	r2, r2, #1
 8005b48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f8c4 	bl	8005cd8 <UART_SetConfig>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d101      	bne.n	8005b5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e022      	b.n	8005ba0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d002      	beq.n	8005b68 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fbb4 	bl	80062d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689a      	ldr	r2, [r3, #8]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f042 0201 	orr.w	r2, r2, #1
 8005b96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 fc3b 	bl	8006414 <UART_CheckIdleState>
 8005b9e:	4603      	mov	r3, r0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b08a      	sub	sp, #40	; 0x28
 8005bac:	af02      	add	r7, sp, #8
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	603b      	str	r3, [r7, #0]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bbe:	2b20      	cmp	r3, #32
 8005bc0:	f040 8084 	bne.w	8005ccc <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <HAL_UART_Transmit+0x28>
 8005bca:	88fb      	ldrh	r3, [r7, #6]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e07c      	b.n	8005cce <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d101      	bne.n	8005be2 <HAL_UART_Transmit+0x3a>
 8005bde:	2302      	movs	r3, #2
 8005be0:	e075      	b.n	8005cce <HAL_UART_Transmit+0x126>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2221      	movs	r2, #33	; 0x21
 8005bf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bfa:	f7fc fce9 	bl	80025d0 <HAL_GetTick>
 8005bfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	88fa      	ldrh	r2, [r7, #6]
 8005c04:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	88fa      	ldrh	r2, [r7, #6]
 8005c0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c18:	d108      	bne.n	8005c2c <HAL_UART_Transmit+0x84>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d104      	bne.n	8005c2c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005c22:	2300      	movs	r3, #0
 8005c24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	61bb      	str	r3, [r7, #24]
 8005c2a:	e003      	b.n	8005c34 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c30:	2300      	movs	r3, #0
 8005c32:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005c3c:	e02d      	b.n	8005c9a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	2200      	movs	r2, #0
 8005c46:	2180      	movs	r1, #128	; 0x80
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 fc2e 	bl	80064aa <UART_WaitOnFlagUntilTimeout>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e03a      	b.n	8005cce <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10b      	bne.n	8005c76 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	881a      	ldrh	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c6a:	b292      	uxth	r2, r2
 8005c6c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	3302      	adds	r3, #2
 8005c72:	61bb      	str	r3, [r7, #24]
 8005c74:	e008      	b.n	8005c88 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	781a      	ldrb	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	b292      	uxth	r2, r2
 8005c80:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	3301      	adds	r3, #1
 8005c86:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	3b01      	subs	r3, #1
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1cb      	bne.n	8005c3e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	9300      	str	r3, [sp, #0]
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	2200      	movs	r2, #0
 8005cae:	2140      	movs	r1, #64	; 0x40
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f000 fbfa 	bl	80064aa <UART_WaitOnFlagUntilTimeout>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e006      	b.n	8005cce <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	e000      	b.n	8005cce <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005ccc:	2302      	movs	r3, #2
  }
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3720      	adds	r7, #32
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
	...

08005cd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cdc:	b08c      	sub	sp, #48	; 0x30
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	431a      	orrs	r2, r3
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	69db      	ldr	r3, [r3, #28]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	4baa      	ldr	r3, [pc, #680]	; (8005fb0 <UART_SetConfig+0x2d8>)
 8005d08:	4013      	ands	r3, r2
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	6812      	ldr	r2, [r2, #0]
 8005d0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d10:	430b      	orrs	r3, r1
 8005d12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	68da      	ldr	r2, [r3, #12]
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a9f      	ldr	r2, [pc, #636]	; (8005fb4 <UART_SetConfig+0x2dc>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d004      	beq.n	8005d44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d40:	4313      	orrs	r3, r2
 8005d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005d4e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	6812      	ldr	r2, [r2, #0]
 8005d56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d58:	430b      	orrs	r3, r1
 8005d5a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d62:	f023 010f 	bic.w	r1, r3, #15
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a90      	ldr	r2, [pc, #576]	; (8005fb8 <UART_SetConfig+0x2e0>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d125      	bne.n	8005dc8 <UART_SetConfig+0xf0>
 8005d7c:	4b8f      	ldr	r3, [pc, #572]	; (8005fbc <UART_SetConfig+0x2e4>)
 8005d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d82:	f003 0303 	and.w	r3, r3, #3
 8005d86:	2b03      	cmp	r3, #3
 8005d88:	d81a      	bhi.n	8005dc0 <UART_SetConfig+0xe8>
 8005d8a:	a201      	add	r2, pc, #4	; (adr r2, 8005d90 <UART_SetConfig+0xb8>)
 8005d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d90:	08005da1 	.word	0x08005da1
 8005d94:	08005db1 	.word	0x08005db1
 8005d98:	08005da9 	.word	0x08005da9
 8005d9c:	08005db9 	.word	0x08005db9
 8005da0:	2301      	movs	r3, #1
 8005da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005da6:	e116      	b.n	8005fd6 <UART_SetConfig+0x2fe>
 8005da8:	2302      	movs	r3, #2
 8005daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dae:	e112      	b.n	8005fd6 <UART_SetConfig+0x2fe>
 8005db0:	2304      	movs	r3, #4
 8005db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005db6:	e10e      	b.n	8005fd6 <UART_SetConfig+0x2fe>
 8005db8:	2308      	movs	r3, #8
 8005dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dbe:	e10a      	b.n	8005fd6 <UART_SetConfig+0x2fe>
 8005dc0:	2310      	movs	r3, #16
 8005dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dc6:	e106      	b.n	8005fd6 <UART_SetConfig+0x2fe>
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a7c      	ldr	r2, [pc, #496]	; (8005fc0 <UART_SetConfig+0x2e8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d138      	bne.n	8005e44 <UART_SetConfig+0x16c>
 8005dd2:	4b7a      	ldr	r3, [pc, #488]	; (8005fbc <UART_SetConfig+0x2e4>)
 8005dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd8:	f003 030c 	and.w	r3, r3, #12
 8005ddc:	2b0c      	cmp	r3, #12
 8005dde:	d82d      	bhi.n	8005e3c <UART_SetConfig+0x164>
 8005de0:	a201      	add	r2, pc, #4	; (adr r2, 8005de8 <UART_SetConfig+0x110>)
 8005de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de6:	bf00      	nop
 8005de8:	08005e1d 	.word	0x08005e1d
 8005dec:	08005e3d 	.word	0x08005e3d
 8005df0:	08005e3d 	.word	0x08005e3d
 8005df4:	08005e3d 	.word	0x08005e3d
 8005df8:	08005e2d 	.word	0x08005e2d
 8005dfc:	08005e3d 	.word	0x08005e3d
 8005e00:	08005e3d 	.word	0x08005e3d
 8005e04:	08005e3d 	.word	0x08005e3d
 8005e08:	08005e25 	.word	0x08005e25
 8005e0c:	08005e3d 	.word	0x08005e3d
 8005e10:	08005e3d 	.word	0x08005e3d
 8005e14:	08005e3d 	.word	0x08005e3d
 8005e18:	08005e35 	.word	0x08005e35
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e22:	e0d8      	b.n	8005fd6 <UART_SetConfig+0x2fe>
 8005e24:	2302      	movs	r3, #2
 8005e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e2a:	e0d4      	b.n	8005fd6 <UART_SetConfig+0x2fe>
 8005e2c:	2304      	movs	r3, #4
 8005e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e32:	e0d0      	b.n	8005fd6 <UART_SetConfig+0x2fe>
 8005e34:	2308      	movs	r3, #8
 8005e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e3a:	e0cc      	b.n	8005fd6 <UART_SetConfig+0x2fe>
 8005e3c:	2310      	movs	r3, #16
 8005e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e42:	e0c8      	b.n	8005fd6 <UART_SetConfig+0x2fe>
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a5e      	ldr	r2, [pc, #376]	; (8005fc4 <UART_SetConfig+0x2ec>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d125      	bne.n	8005e9a <UART_SetConfig+0x1c2>
 8005e4e:	4b5b      	ldr	r3, [pc, #364]	; (8005fbc <UART_SetConfig+0x2e4>)
 8005e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e58:	2b30      	cmp	r3, #48	; 0x30
 8005e5a:	d016      	beq.n	8005e8a <UART_SetConfig+0x1b2>
 8005e5c:	2b30      	cmp	r3, #48	; 0x30
 8005e5e:	d818      	bhi.n	8005e92 <UART_SetConfig+0x1ba>
 8005e60:	2b20      	cmp	r3, #32
 8005e62:	d00a      	beq.n	8005e7a <UART_SetConfig+0x1a2>
 8005e64:	2b20      	cmp	r3, #32
 8005e66:	d814      	bhi.n	8005e92 <UART_SetConfig+0x1ba>
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d002      	beq.n	8005e72 <UART_SetConfig+0x19a>
 8005e6c:	2b10      	cmp	r3, #16
 8005e6e:	d008      	beq.n	8005e82 <UART_SetConfig+0x1aa>
 8005e70:	e00f      	b.n	8005e92 <UART_SetConfig+0x1ba>
 8005e72:	2300      	movs	r3, #0
 8005e74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e78:	e0ad      	b.n	8005fd6 <UART_SetConfig+0x2fe>
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e80:	e0a9      	b.n	8005fd6 <UART_SetConfig+0x2fe>
 8005e82:	2304      	movs	r3, #4
 8005e84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e88:	e0a5      	b.n	8005fd6 <UART_SetConfig+0x2fe>
 8005e8a:	2308      	movs	r3, #8
 8005e8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e90:	e0a1      	b.n	8005fd6 <UART_SetConfig+0x2fe>
 8005e92:	2310      	movs	r3, #16
 8005e94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e98:	e09d      	b.n	8005fd6 <UART_SetConfig+0x2fe>
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a4a      	ldr	r2, [pc, #296]	; (8005fc8 <UART_SetConfig+0x2f0>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d125      	bne.n	8005ef0 <UART_SetConfig+0x218>
 8005ea4:	4b45      	ldr	r3, [pc, #276]	; (8005fbc <UART_SetConfig+0x2e4>)
 8005ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eaa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005eae:	2bc0      	cmp	r3, #192	; 0xc0
 8005eb0:	d016      	beq.n	8005ee0 <UART_SetConfig+0x208>
 8005eb2:	2bc0      	cmp	r3, #192	; 0xc0
 8005eb4:	d818      	bhi.n	8005ee8 <UART_SetConfig+0x210>
 8005eb6:	2b80      	cmp	r3, #128	; 0x80
 8005eb8:	d00a      	beq.n	8005ed0 <UART_SetConfig+0x1f8>
 8005eba:	2b80      	cmp	r3, #128	; 0x80
 8005ebc:	d814      	bhi.n	8005ee8 <UART_SetConfig+0x210>
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d002      	beq.n	8005ec8 <UART_SetConfig+0x1f0>
 8005ec2:	2b40      	cmp	r3, #64	; 0x40
 8005ec4:	d008      	beq.n	8005ed8 <UART_SetConfig+0x200>
 8005ec6:	e00f      	b.n	8005ee8 <UART_SetConfig+0x210>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ece:	e082      	b.n	8005fd6 <UART_SetConfig+0x2fe>
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ed6:	e07e      	b.n	8005fd6 <UART_SetConfig+0x2fe>
 8005ed8:	2304      	movs	r3, #4
 8005eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ede:	e07a      	b.n	8005fd6 <UART_SetConfig+0x2fe>
 8005ee0:	2308      	movs	r3, #8
 8005ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ee6:	e076      	b.n	8005fd6 <UART_SetConfig+0x2fe>
 8005ee8:	2310      	movs	r3, #16
 8005eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eee:	e072      	b.n	8005fd6 <UART_SetConfig+0x2fe>
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a35      	ldr	r2, [pc, #212]	; (8005fcc <UART_SetConfig+0x2f4>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d12a      	bne.n	8005f50 <UART_SetConfig+0x278>
 8005efa:	4b30      	ldr	r3, [pc, #192]	; (8005fbc <UART_SetConfig+0x2e4>)
 8005efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f08:	d01a      	beq.n	8005f40 <UART_SetConfig+0x268>
 8005f0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f0e:	d81b      	bhi.n	8005f48 <UART_SetConfig+0x270>
 8005f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f14:	d00c      	beq.n	8005f30 <UART_SetConfig+0x258>
 8005f16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f1a:	d815      	bhi.n	8005f48 <UART_SetConfig+0x270>
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <UART_SetConfig+0x250>
 8005f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f24:	d008      	beq.n	8005f38 <UART_SetConfig+0x260>
 8005f26:	e00f      	b.n	8005f48 <UART_SetConfig+0x270>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f2e:	e052      	b.n	8005fd6 <UART_SetConfig+0x2fe>
 8005f30:	2302      	movs	r3, #2
 8005f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f36:	e04e      	b.n	8005fd6 <UART_SetConfig+0x2fe>
 8005f38:	2304      	movs	r3, #4
 8005f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f3e:	e04a      	b.n	8005fd6 <UART_SetConfig+0x2fe>
 8005f40:	2308      	movs	r3, #8
 8005f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f46:	e046      	b.n	8005fd6 <UART_SetConfig+0x2fe>
 8005f48:	2310      	movs	r3, #16
 8005f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f4e:	e042      	b.n	8005fd6 <UART_SetConfig+0x2fe>
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a17      	ldr	r2, [pc, #92]	; (8005fb4 <UART_SetConfig+0x2dc>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d13a      	bne.n	8005fd0 <UART_SetConfig+0x2f8>
 8005f5a:	4b18      	ldr	r3, [pc, #96]	; (8005fbc <UART_SetConfig+0x2e4>)
 8005f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f68:	d01a      	beq.n	8005fa0 <UART_SetConfig+0x2c8>
 8005f6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f6e:	d81b      	bhi.n	8005fa8 <UART_SetConfig+0x2d0>
 8005f70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f74:	d00c      	beq.n	8005f90 <UART_SetConfig+0x2b8>
 8005f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f7a:	d815      	bhi.n	8005fa8 <UART_SetConfig+0x2d0>
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d003      	beq.n	8005f88 <UART_SetConfig+0x2b0>
 8005f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f84:	d008      	beq.n	8005f98 <UART_SetConfig+0x2c0>
 8005f86:	e00f      	b.n	8005fa8 <UART_SetConfig+0x2d0>
 8005f88:	2300      	movs	r3, #0
 8005f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f8e:	e022      	b.n	8005fd6 <UART_SetConfig+0x2fe>
 8005f90:	2302      	movs	r3, #2
 8005f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f96:	e01e      	b.n	8005fd6 <UART_SetConfig+0x2fe>
 8005f98:	2304      	movs	r3, #4
 8005f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f9e:	e01a      	b.n	8005fd6 <UART_SetConfig+0x2fe>
 8005fa0:	2308      	movs	r3, #8
 8005fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fa6:	e016      	b.n	8005fd6 <UART_SetConfig+0x2fe>
 8005fa8:	2310      	movs	r3, #16
 8005faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fae:	e012      	b.n	8005fd6 <UART_SetConfig+0x2fe>
 8005fb0:	cfff69f3 	.word	0xcfff69f3
 8005fb4:	40008000 	.word	0x40008000
 8005fb8:	40013800 	.word	0x40013800
 8005fbc:	40021000 	.word	0x40021000
 8005fc0:	40004400 	.word	0x40004400
 8005fc4:	40004800 	.word	0x40004800
 8005fc8:	40004c00 	.word	0x40004c00
 8005fcc:	40005000 	.word	0x40005000
 8005fd0:	2310      	movs	r3, #16
 8005fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4aae      	ldr	r2, [pc, #696]	; (8006294 <UART_SetConfig+0x5bc>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	f040 8097 	bne.w	8006110 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fe2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fe6:	2b08      	cmp	r3, #8
 8005fe8:	d823      	bhi.n	8006032 <UART_SetConfig+0x35a>
 8005fea:	a201      	add	r2, pc, #4	; (adr r2, 8005ff0 <UART_SetConfig+0x318>)
 8005fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff0:	08006015 	.word	0x08006015
 8005ff4:	08006033 	.word	0x08006033
 8005ff8:	0800601d 	.word	0x0800601d
 8005ffc:	08006033 	.word	0x08006033
 8006000:	08006023 	.word	0x08006023
 8006004:	08006033 	.word	0x08006033
 8006008:	08006033 	.word	0x08006033
 800600c:	08006033 	.word	0x08006033
 8006010:	0800602b 	.word	0x0800602b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006014:	f7fe fa90 	bl	8004538 <HAL_RCC_GetPCLK1Freq>
 8006018:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800601a:	e010      	b.n	800603e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800601c:	4b9e      	ldr	r3, [pc, #632]	; (8006298 <UART_SetConfig+0x5c0>)
 800601e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006020:	e00d      	b.n	800603e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006022:	f7fe f9f1 	bl	8004408 <HAL_RCC_GetSysClockFreq>
 8006026:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006028:	e009      	b.n	800603e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800602a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800602e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006030:	e005      	b.n	800603e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006032:	2300      	movs	r3, #0
 8006034:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800603c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 8130 	beq.w	80062a6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604a:	4a94      	ldr	r2, [pc, #592]	; (800629c <UART_SetConfig+0x5c4>)
 800604c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006050:	461a      	mov	r2, r3
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	fbb3 f3f2 	udiv	r3, r3, r2
 8006058:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	4613      	mov	r3, r2
 8006060:	005b      	lsls	r3, r3, #1
 8006062:	4413      	add	r3, r2
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	429a      	cmp	r2, r3
 8006068:	d305      	bcc.n	8006076 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	429a      	cmp	r2, r3
 8006074:	d903      	bls.n	800607e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800607c:	e113      	b.n	80062a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800607e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006080:	2200      	movs	r2, #0
 8006082:	60bb      	str	r3, [r7, #8]
 8006084:	60fa      	str	r2, [r7, #12]
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608a:	4a84      	ldr	r2, [pc, #528]	; (800629c <UART_SetConfig+0x5c4>)
 800608c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006090:	b29b      	uxth	r3, r3
 8006092:	2200      	movs	r2, #0
 8006094:	603b      	str	r3, [r7, #0]
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	e9d7 2300 	ldrd	r2, r3, [r7]
 800609c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80060a0:	f7fa fd9a 	bl	8000bd8 <__aeabi_uldivmod>
 80060a4:	4602      	mov	r2, r0
 80060a6:	460b      	mov	r3, r1
 80060a8:	4610      	mov	r0, r2
 80060aa:	4619      	mov	r1, r3
 80060ac:	f04f 0200 	mov.w	r2, #0
 80060b0:	f04f 0300 	mov.w	r3, #0
 80060b4:	020b      	lsls	r3, r1, #8
 80060b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80060ba:	0202      	lsls	r2, r0, #8
 80060bc:	6979      	ldr	r1, [r7, #20]
 80060be:	6849      	ldr	r1, [r1, #4]
 80060c0:	0849      	lsrs	r1, r1, #1
 80060c2:	2000      	movs	r0, #0
 80060c4:	460c      	mov	r4, r1
 80060c6:	4605      	mov	r5, r0
 80060c8:	eb12 0804 	adds.w	r8, r2, r4
 80060cc:	eb43 0905 	adc.w	r9, r3, r5
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	469a      	mov	sl, r3
 80060d8:	4693      	mov	fp, r2
 80060da:	4652      	mov	r2, sl
 80060dc:	465b      	mov	r3, fp
 80060de:	4640      	mov	r0, r8
 80060e0:	4649      	mov	r1, r9
 80060e2:	f7fa fd79 	bl	8000bd8 <__aeabi_uldivmod>
 80060e6:	4602      	mov	r2, r0
 80060e8:	460b      	mov	r3, r1
 80060ea:	4613      	mov	r3, r2
 80060ec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060f4:	d308      	bcc.n	8006108 <UART_SetConfig+0x430>
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060fc:	d204      	bcs.n	8006108 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6a3a      	ldr	r2, [r7, #32]
 8006104:	60da      	str	r2, [r3, #12]
 8006106:	e0ce      	b.n	80062a6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800610e:	e0ca      	b.n	80062a6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	69db      	ldr	r3, [r3, #28]
 8006114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006118:	d166      	bne.n	80061e8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800611a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800611e:	2b08      	cmp	r3, #8
 8006120:	d827      	bhi.n	8006172 <UART_SetConfig+0x49a>
 8006122:	a201      	add	r2, pc, #4	; (adr r2, 8006128 <UART_SetConfig+0x450>)
 8006124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006128:	0800614d 	.word	0x0800614d
 800612c:	08006155 	.word	0x08006155
 8006130:	0800615d 	.word	0x0800615d
 8006134:	08006173 	.word	0x08006173
 8006138:	08006163 	.word	0x08006163
 800613c:	08006173 	.word	0x08006173
 8006140:	08006173 	.word	0x08006173
 8006144:	08006173 	.word	0x08006173
 8006148:	0800616b 	.word	0x0800616b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800614c:	f7fe f9f4 	bl	8004538 <HAL_RCC_GetPCLK1Freq>
 8006150:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006152:	e014      	b.n	800617e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006154:	f7fe fa06 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 8006158:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800615a:	e010      	b.n	800617e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800615c:	4b4e      	ldr	r3, [pc, #312]	; (8006298 <UART_SetConfig+0x5c0>)
 800615e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006160:	e00d      	b.n	800617e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006162:	f7fe f951 	bl	8004408 <HAL_RCC_GetSysClockFreq>
 8006166:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006168:	e009      	b.n	800617e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800616a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800616e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006170:	e005      	b.n	800617e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006172:	2300      	movs	r3, #0
 8006174:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800617c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006180:	2b00      	cmp	r3, #0
 8006182:	f000 8090 	beq.w	80062a6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	4a44      	ldr	r2, [pc, #272]	; (800629c <UART_SetConfig+0x5c4>)
 800618c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006190:	461a      	mov	r2, r3
 8006192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006194:	fbb3 f3f2 	udiv	r3, r3, r2
 8006198:	005a      	lsls	r2, r3, #1
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	085b      	lsrs	r3, r3, #1
 80061a0:	441a      	add	r2, r3
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061aa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061ac:	6a3b      	ldr	r3, [r7, #32]
 80061ae:	2b0f      	cmp	r3, #15
 80061b0:	d916      	bls.n	80061e0 <UART_SetConfig+0x508>
 80061b2:	6a3b      	ldr	r3, [r7, #32]
 80061b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061b8:	d212      	bcs.n	80061e0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	b29b      	uxth	r3, r3
 80061be:	f023 030f 	bic.w	r3, r3, #15
 80061c2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	085b      	lsrs	r3, r3, #1
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	f003 0307 	and.w	r3, r3, #7
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	8bfb      	ldrh	r3, [r7, #30]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	8bfa      	ldrh	r2, [r7, #30]
 80061dc:	60da      	str	r2, [r3, #12]
 80061de:	e062      	b.n	80062a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80061e6:	e05e      	b.n	80062a6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	d828      	bhi.n	8006242 <UART_SetConfig+0x56a>
 80061f0:	a201      	add	r2, pc, #4	; (adr r2, 80061f8 <UART_SetConfig+0x520>)
 80061f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f6:	bf00      	nop
 80061f8:	0800621d 	.word	0x0800621d
 80061fc:	08006225 	.word	0x08006225
 8006200:	0800622d 	.word	0x0800622d
 8006204:	08006243 	.word	0x08006243
 8006208:	08006233 	.word	0x08006233
 800620c:	08006243 	.word	0x08006243
 8006210:	08006243 	.word	0x08006243
 8006214:	08006243 	.word	0x08006243
 8006218:	0800623b 	.word	0x0800623b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800621c:	f7fe f98c 	bl	8004538 <HAL_RCC_GetPCLK1Freq>
 8006220:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006222:	e014      	b.n	800624e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006224:	f7fe f99e 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 8006228:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800622a:	e010      	b.n	800624e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800622c:	4b1a      	ldr	r3, [pc, #104]	; (8006298 <UART_SetConfig+0x5c0>)
 800622e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006230:	e00d      	b.n	800624e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006232:	f7fe f8e9 	bl	8004408 <HAL_RCC_GetSysClockFreq>
 8006236:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006238:	e009      	b.n	800624e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800623a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800623e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006240:	e005      	b.n	800624e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006242:	2300      	movs	r3, #0
 8006244:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800624c:	bf00      	nop
    }

    if (pclk != 0U)
 800624e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006250:	2b00      	cmp	r3, #0
 8006252:	d028      	beq.n	80062a6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006258:	4a10      	ldr	r2, [pc, #64]	; (800629c <UART_SetConfig+0x5c4>)
 800625a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800625e:	461a      	mov	r2, r3
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	fbb3 f2f2 	udiv	r2, r3, r2
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	085b      	lsrs	r3, r3, #1
 800626c:	441a      	add	r2, r3
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	fbb2 f3f3 	udiv	r3, r2, r3
 8006276:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006278:	6a3b      	ldr	r3, [r7, #32]
 800627a:	2b0f      	cmp	r3, #15
 800627c:	d910      	bls.n	80062a0 <UART_SetConfig+0x5c8>
 800627e:	6a3b      	ldr	r3, [r7, #32]
 8006280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006284:	d20c      	bcs.n	80062a0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	b29a      	uxth	r2, r3
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	60da      	str	r2, [r3, #12]
 8006290:	e009      	b.n	80062a6 <UART_SetConfig+0x5ce>
 8006292:	bf00      	nop
 8006294:	40008000 	.word	0x40008000
 8006298:	00f42400 	.word	0x00f42400
 800629c:	0800acd8 	.word	0x0800acd8
      }
      else
      {
        ret = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	2200      	movs	r2, #0
 80062ba:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	2200      	movs	r2, #0
 80062c0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80062c2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3730      	adds	r7, #48	; 0x30
 80062ca:	46bd      	mov	sp, r7
 80062cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080062d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00a      	beq.n	80062fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00a      	beq.n	800631c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	430a      	orrs	r2, r1
 800631a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006320:	f003 0304 	and.w	r3, r3, #4
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00a      	beq.n	800633e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	430a      	orrs	r2, r1
 800633c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006342:	f003 0308 	and.w	r3, r3, #8
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	430a      	orrs	r2, r1
 800635e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006364:	f003 0310 	and.w	r3, r3, #16
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00a      	beq.n	8006382 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006386:	f003 0320 	and.w	r3, r3, #32
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00a      	beq.n	80063a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d01a      	beq.n	80063e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	430a      	orrs	r2, r1
 80063c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063ce:	d10a      	bne.n	80063e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00a      	beq.n	8006408 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	430a      	orrs	r2, r1
 8006406:	605a      	str	r2, [r3, #4]
  }
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b086      	sub	sp, #24
 8006418:	af02      	add	r7, sp, #8
 800641a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006424:	f7fc f8d4 	bl	80025d0 <HAL_GetTick>
 8006428:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0308 	and.w	r3, r3, #8
 8006434:	2b08      	cmp	r3, #8
 8006436:	d10e      	bne.n	8006456 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006438:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f82f 	bl	80064aa <UART_WaitOnFlagUntilTimeout>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e025      	b.n	80064a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0304 	and.w	r3, r3, #4
 8006460:	2b04      	cmp	r3, #4
 8006462:	d10e      	bne.n	8006482 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006464:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006468:	9300      	str	r3, [sp, #0]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f819 	bl	80064aa <UART_WaitOnFlagUntilTimeout>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d001      	beq.n	8006482 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e00f      	b.n	80064a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2220      	movs	r2, #32
 8006486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2220      	movs	r2, #32
 800648e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b09c      	sub	sp, #112	; 0x70
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	60f8      	str	r0, [r7, #12]
 80064b2:	60b9      	str	r1, [r7, #8]
 80064b4:	603b      	str	r3, [r7, #0]
 80064b6:	4613      	mov	r3, r2
 80064b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064ba:	e0a9      	b.n	8006610 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064c2:	f000 80a5 	beq.w	8006610 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064c6:	f7fc f883 	bl	80025d0 <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d302      	bcc.n	80064dc <UART_WaitOnFlagUntilTimeout+0x32>
 80064d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d140      	bne.n	800655e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064e4:	e853 3f00 	ldrex	r3, [r3]
 80064e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80064ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064f0:	667b      	str	r3, [r7, #100]	; 0x64
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	461a      	mov	r2, r3
 80064f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064fc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006500:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006502:	e841 2300 	strex	r3, r2, [r1]
 8006506:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1e6      	bne.n	80064dc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	3308      	adds	r3, #8
 8006514:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006518:	e853 3f00 	ldrex	r3, [r3]
 800651c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800651e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006520:	f023 0301 	bic.w	r3, r3, #1
 8006524:	663b      	str	r3, [r7, #96]	; 0x60
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3308      	adds	r3, #8
 800652c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800652e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006530:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006532:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006534:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006536:	e841 2300 	strex	r3, r2, [r1]
 800653a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800653c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1e5      	bne.n	800650e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2220      	movs	r2, #32
 8006546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2220      	movs	r2, #32
 800654e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e069      	b.n	8006632 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	2b00      	cmp	r3, #0
 800656a:	d051      	beq.n	8006610 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	69db      	ldr	r3, [r3, #28]
 8006572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006576:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800657a:	d149      	bne.n	8006610 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006584:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658e:	e853 3f00 	ldrex	r3, [r3]
 8006592:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006596:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800659a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	461a      	mov	r2, r3
 80065a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a4:	637b      	str	r3, [r7, #52]	; 0x34
 80065a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065ac:	e841 2300 	strex	r3, r2, [r1]
 80065b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80065b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1e6      	bne.n	8006586 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	3308      	adds	r3, #8
 80065be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	e853 3f00 	ldrex	r3, [r3]
 80065c6:	613b      	str	r3, [r7, #16]
   return(result);
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	f023 0301 	bic.w	r3, r3, #1
 80065ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3308      	adds	r3, #8
 80065d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80065d8:	623a      	str	r2, [r7, #32]
 80065da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065dc:	69f9      	ldr	r1, [r7, #28]
 80065de:	6a3a      	ldr	r2, [r7, #32]
 80065e0:	e841 2300 	strex	r3, r2, [r1]
 80065e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1e5      	bne.n	80065b8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2220      	movs	r2, #32
 80065f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2220      	movs	r2, #32
 80065f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2220      	movs	r2, #32
 8006600:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e010      	b.n	8006632 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	69da      	ldr	r2, [r3, #28]
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	4013      	ands	r3, r2
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	429a      	cmp	r2, r3
 800661e:	bf0c      	ite	eq
 8006620:	2301      	moveq	r3, #1
 8006622:	2300      	movne	r3, #0
 8006624:	b2db      	uxtb	r3, r3
 8006626:	461a      	mov	r2, r3
 8006628:	79fb      	ldrb	r3, [r7, #7]
 800662a:	429a      	cmp	r2, r3
 800662c:	f43f af46 	beq.w	80064bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3770      	adds	r7, #112	; 0x70
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800663a:	b480      	push	{r7}
 800663c:	b085      	sub	sp, #20
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006648:	2b01      	cmp	r3, #1
 800664a:	d101      	bne.n	8006650 <HAL_UARTEx_DisableFifoMode+0x16>
 800664c:	2302      	movs	r3, #2
 800664e:	e027      	b.n	80066a0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2224      	movs	r2, #36	; 0x24
 800665c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f022 0201 	bic.w	r2, r2, #1
 8006676:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800667e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2220      	movs	r2, #32
 8006692:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3714      	adds	r7, #20
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d101      	bne.n	80066c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80066c0:	2302      	movs	r3, #2
 80066c2:	e02d      	b.n	8006720 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2224      	movs	r2, #36	; 0x24
 80066d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f022 0201 	bic.w	r2, r2, #1
 80066ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	430a      	orrs	r2, r1
 80066fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 f84f 	bl	80067a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2220      	movs	r2, #32
 8006712:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006738:	2b01      	cmp	r3, #1
 800673a:	d101      	bne.n	8006740 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800673c:	2302      	movs	r3, #2
 800673e:	e02d      	b.n	800679c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2224      	movs	r2, #36	; 0x24
 800674c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 0201 	bic.w	r2, r2, #1
 8006766:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	430a      	orrs	r2, r1
 800677a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 f811 	bl	80067a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2220      	movs	r2, #32
 800678e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d108      	bne.n	80067c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80067c4:	e031      	b.n	800682a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80067c6:	2308      	movs	r3, #8
 80067c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80067ca:	2308      	movs	r3, #8
 80067cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	0e5b      	lsrs	r3, r3, #25
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	f003 0307 	and.w	r3, r3, #7
 80067dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	0f5b      	lsrs	r3, r3, #29
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	f003 0307 	and.w	r3, r3, #7
 80067ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067ee:	7bbb      	ldrb	r3, [r7, #14]
 80067f0:	7b3a      	ldrb	r2, [r7, #12]
 80067f2:	4911      	ldr	r1, [pc, #68]	; (8006838 <UARTEx_SetNbDataToProcess+0x94>)
 80067f4:	5c8a      	ldrb	r2, [r1, r2]
 80067f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80067fa:	7b3a      	ldrb	r2, [r7, #12]
 80067fc:	490f      	ldr	r1, [pc, #60]	; (800683c <UARTEx_SetNbDataToProcess+0x98>)
 80067fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006800:	fb93 f3f2 	sdiv	r3, r3, r2
 8006804:	b29a      	uxth	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800680c:	7bfb      	ldrb	r3, [r7, #15]
 800680e:	7b7a      	ldrb	r2, [r7, #13]
 8006810:	4909      	ldr	r1, [pc, #36]	; (8006838 <UARTEx_SetNbDataToProcess+0x94>)
 8006812:	5c8a      	ldrb	r2, [r1, r2]
 8006814:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006818:	7b7a      	ldrb	r2, [r7, #13]
 800681a:	4908      	ldr	r1, [pc, #32]	; (800683c <UARTEx_SetNbDataToProcess+0x98>)
 800681c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800681e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006822:	b29a      	uxth	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800682a:	bf00      	nop
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	0800acf0 	.word	0x0800acf0
 800683c:	0800acf8 	.word	0x0800acf8

08006840 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	4603      	mov	r3, r0
 8006848:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800684a:	2300      	movs	r3, #0
 800684c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800684e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006852:	2b84      	cmp	r3, #132	; 0x84
 8006854:	d005      	beq.n	8006862 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006856:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	4413      	add	r3, r2
 800685e:	3303      	adds	r3, #3
 8006860:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006862:	68fb      	ldr	r3, [r7, #12]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3714      	adds	r7, #20
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006874:	f000 fade 	bl	8006e34 <vTaskStartScheduler>
  
  return osOK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	bd80      	pop	{r7, pc}

0800687e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800687e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006880:	b089      	sub	sp, #36	; 0x24
 8006882:	af04      	add	r7, sp, #16
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d020      	beq.n	80068d2 <osThreadCreate+0x54>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d01c      	beq.n	80068d2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	685c      	ldr	r4, [r3, #4]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681d      	ldr	r5, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	691e      	ldr	r6, [r3, #16]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7ff ffc8 	bl	8006840 <makeFreeRtosPriority>
 80068b0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068ba:	9202      	str	r2, [sp, #8]
 80068bc:	9301      	str	r3, [sp, #4]
 80068be:	9100      	str	r1, [sp, #0]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	4632      	mov	r2, r6
 80068c4:	4629      	mov	r1, r5
 80068c6:	4620      	mov	r0, r4
 80068c8:	f000 f8ed 	bl	8006aa6 <xTaskCreateStatic>
 80068cc:	4603      	mov	r3, r0
 80068ce:	60fb      	str	r3, [r7, #12]
 80068d0:	e01c      	b.n	800690c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685c      	ldr	r4, [r3, #4]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068de:	b29e      	uxth	r6, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7ff ffaa 	bl	8006840 <makeFreeRtosPriority>
 80068ec:	4602      	mov	r2, r0
 80068ee:	f107 030c 	add.w	r3, r7, #12
 80068f2:	9301      	str	r3, [sp, #4]
 80068f4:	9200      	str	r2, [sp, #0]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	4632      	mov	r2, r6
 80068fa:	4629      	mov	r1, r5
 80068fc:	4620      	mov	r0, r4
 80068fe:	f000 f92f 	bl	8006b60 <xTaskCreate>
 8006902:	4603      	mov	r3, r0
 8006904:	2b01      	cmp	r3, #1
 8006906:	d001      	beq.n	800690c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006908:	2300      	movs	r3, #0
 800690a:	e000      	b.n	800690e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800690c:	68fb      	ldr	r3, [r7, #12]
}
 800690e:	4618      	mov	r0, r3
 8006910:	3714      	adds	r7, #20
 8006912:	46bd      	mov	sp, r7
 8006914:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006916 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b084      	sub	sp, #16
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d001      	beq.n	800692c <osDelay+0x16>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	e000      	b.n	800692e <osDelay+0x18>
 800692c:	2301      	movs	r3, #1
 800692e:	4618      	mov	r0, r3
 8006930:	f000 fa4c 	bl	8006dcc <vTaskDelay>
  
  return osOK;
 8006934:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006936:	4618      	mov	r0, r3
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800693e:	b480      	push	{r7}
 8006940:	b083      	sub	sp, #12
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f103 0208 	add.w	r2, r3, #8
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006956:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f103 0208 	add.w	r2, r3, #8
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f103 0208 	add.w	r2, r3, #8
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006972:	bf00      	nop
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800697e:	b480      	push	{r7}
 8006980:	b083      	sub	sp, #12
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	689a      	ldr	r2, [r3, #8]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	601a      	str	r2, [r3, #0]
}
 80069d4:	bf00      	nop
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069f6:	d103      	bne.n	8006a00 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	60fb      	str	r3, [r7, #12]
 80069fe:	e00c      	b.n	8006a1a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	3308      	adds	r3, #8
 8006a04:	60fb      	str	r3, [r7, #12]
 8006a06:	e002      	b.n	8006a0e <vListInsert+0x2e>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	60fb      	str	r3, [r7, #12]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68ba      	ldr	r2, [r7, #8]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d2f6      	bcs.n	8006a08 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	683a      	ldr	r2, [r7, #0]
 8006a34:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	1c5a      	adds	r2, r3, #1
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	601a      	str	r2, [r3, #0]
}
 8006a46:	bf00      	nop
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr

08006a52 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006a52:	b480      	push	{r7}
 8006a54:	b085      	sub	sp, #20
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	6892      	ldr	r2, [r2, #8]
 8006a68:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	6852      	ldr	r2, [r2, #4]
 8006a72:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d103      	bne.n	8006a86 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	689a      	ldr	r2, [r3, #8]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	1e5a      	subs	r2, r3, #1
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3714      	adds	r7, #20
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b08e      	sub	sp, #56	; 0x38
 8006aaa:	af04      	add	r7, sp, #16
 8006aac:	60f8      	str	r0, [r7, #12]
 8006aae:	60b9      	str	r1, [r7, #8]
 8006ab0:	607a      	str	r2, [r7, #4]
 8006ab2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10a      	bne.n	8006ad0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006abe:	f383 8811 	msr	BASEPRI, r3
 8006ac2:	f3bf 8f6f 	isb	sy
 8006ac6:	f3bf 8f4f 	dsb	sy
 8006aca:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006acc:	bf00      	nop
 8006ace:	e7fe      	b.n	8006ace <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10a      	bne.n	8006aec <xTaskCreateStatic+0x46>
	__asm volatile
 8006ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ada:	f383 8811 	msr	BASEPRI, r3
 8006ade:	f3bf 8f6f 	isb	sy
 8006ae2:	f3bf 8f4f 	dsb	sy
 8006ae6:	61fb      	str	r3, [r7, #28]
}
 8006ae8:	bf00      	nop
 8006aea:	e7fe      	b.n	8006aea <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006aec:	2354      	movs	r3, #84	; 0x54
 8006aee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	2b54      	cmp	r3, #84	; 0x54
 8006af4:	d00a      	beq.n	8006b0c <xTaskCreateStatic+0x66>
	__asm volatile
 8006af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	61bb      	str	r3, [r7, #24]
}
 8006b08:	bf00      	nop
 8006b0a:	e7fe      	b.n	8006b0a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b0c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d01e      	beq.n	8006b52 <xTaskCreateStatic+0xac>
 8006b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d01b      	beq.n	8006b52 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b22:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b26:	2202      	movs	r2, #2
 8006b28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	9303      	str	r3, [sp, #12]
 8006b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b32:	9302      	str	r3, [sp, #8]
 8006b34:	f107 0314 	add.w	r3, r7, #20
 8006b38:	9301      	str	r3, [sp, #4]
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	68b9      	ldr	r1, [r7, #8]
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f000 f850 	bl	8006bea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b4c:	f000 f8d4 	bl	8006cf8 <prvAddNewTaskToReadyList>
 8006b50:	e001      	b.n	8006b56 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006b52:	2300      	movs	r3, #0
 8006b54:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006b56:	697b      	ldr	r3, [r7, #20]
	}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3728      	adds	r7, #40	; 0x28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b08c      	sub	sp, #48	; 0x30
 8006b64:	af04      	add	r7, sp, #16
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	603b      	str	r3, [r7, #0]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006b70:	88fb      	ldrh	r3, [r7, #6]
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4618      	mov	r0, r3
 8006b76:	f000 fec7 	bl	8007908 <pvPortMalloc>
 8006b7a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00e      	beq.n	8006ba0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006b82:	2054      	movs	r0, #84	; 0x54
 8006b84:	f000 fec0 	bl	8007908 <pvPortMalloc>
 8006b88:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d003      	beq.n	8006b98 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	631a      	str	r2, [r3, #48]	; 0x30
 8006b96:	e005      	b.n	8006ba4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b98:	6978      	ldr	r0, [r7, #20]
 8006b9a:	f000 ff81 	bl	8007aa0 <vPortFree>
 8006b9e:	e001      	b.n	8006ba4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d017      	beq.n	8006bda <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006bb2:	88fa      	ldrh	r2, [r7, #6]
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	9303      	str	r3, [sp, #12]
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	9302      	str	r3, [sp, #8]
 8006bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bbe:	9301      	str	r3, [sp, #4]
 8006bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc2:	9300      	str	r3, [sp, #0]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	68b9      	ldr	r1, [r7, #8]
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f000 f80e 	bl	8006bea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bce:	69f8      	ldr	r0, [r7, #28]
 8006bd0:	f000 f892 	bl	8006cf8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	61bb      	str	r3, [r7, #24]
 8006bd8:	e002      	b.n	8006be0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006bda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006bde:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006be0:	69bb      	ldr	r3, [r7, #24]
	}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3720      	adds	r7, #32
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b088      	sub	sp, #32
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	60f8      	str	r0, [r7, #12]
 8006bf2:	60b9      	str	r1, [r7, #8]
 8006bf4:	607a      	str	r2, [r7, #4]
 8006bf6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c02:	3b01      	subs	r3, #1
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	f023 0307 	bic.w	r3, r3, #7
 8006c10:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	f003 0307 	and.w	r3, r3, #7
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00a      	beq.n	8006c32 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c20:	f383 8811 	msr	BASEPRI, r3
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	617b      	str	r3, [r7, #20]
}
 8006c2e:	bf00      	nop
 8006c30:	e7fe      	b.n	8006c30 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d01f      	beq.n	8006c78 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c38:	2300      	movs	r3, #0
 8006c3a:	61fb      	str	r3, [r7, #28]
 8006c3c:	e012      	b.n	8006c64 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c3e:	68ba      	ldr	r2, [r7, #8]
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	4413      	add	r3, r2
 8006c44:	7819      	ldrb	r1, [r3, #0]
 8006c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	3334      	adds	r3, #52	; 0x34
 8006c4e:	460a      	mov	r2, r1
 8006c50:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	4413      	add	r3, r2
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d006      	beq.n	8006c6c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	3301      	adds	r3, #1
 8006c62:	61fb      	str	r3, [r7, #28]
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	2b0f      	cmp	r3, #15
 8006c68:	d9e9      	bls.n	8006c3e <prvInitialiseNewTask+0x54>
 8006c6a:	e000      	b.n	8006c6e <prvInitialiseNewTask+0x84>
			{
				break;
 8006c6c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c76:	e003      	b.n	8006c80 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c82:	2b06      	cmp	r3, #6
 8006c84:	d901      	bls.n	8006c8a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c86:	2306      	movs	r3, #6
 8006c88:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c8e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c94:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c98:	2200      	movs	r2, #0
 8006c9a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9e:	3304      	adds	r3, #4
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7ff fe6c 	bl	800697e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca8:	3318      	adds	r3, #24
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7ff fe67 	bl	800697e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cb4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb8:	f1c3 0207 	rsb	r2, r3, #7
 8006cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cc4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc8:	2200      	movs	r2, #0
 8006cca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	68f9      	ldr	r1, [r7, #12]
 8006cd8:	69b8      	ldr	r0, [r7, #24]
 8006cda:	f000 fc05 	bl	80074e8 <pxPortInitialiseStack>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cf0:	bf00      	nop
 8006cf2:	3720      	adds	r7, #32
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d00:	f000 fd20 	bl	8007744 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d04:	4b2a      	ldr	r3, [pc, #168]	; (8006db0 <prvAddNewTaskToReadyList+0xb8>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	4a29      	ldr	r2, [pc, #164]	; (8006db0 <prvAddNewTaskToReadyList+0xb8>)
 8006d0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d0e:	4b29      	ldr	r3, [pc, #164]	; (8006db4 <prvAddNewTaskToReadyList+0xbc>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d109      	bne.n	8006d2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d16:	4a27      	ldr	r2, [pc, #156]	; (8006db4 <prvAddNewTaskToReadyList+0xbc>)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d1c:	4b24      	ldr	r3, [pc, #144]	; (8006db0 <prvAddNewTaskToReadyList+0xb8>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d110      	bne.n	8006d46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006d24:	f000 fabc 	bl	80072a0 <prvInitialiseTaskLists>
 8006d28:	e00d      	b.n	8006d46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006d2a:	4b23      	ldr	r3, [pc, #140]	; (8006db8 <prvAddNewTaskToReadyList+0xc0>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d109      	bne.n	8006d46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006d32:	4b20      	ldr	r3, [pc, #128]	; (8006db4 <prvAddNewTaskToReadyList+0xbc>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d802      	bhi.n	8006d46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d40:	4a1c      	ldr	r2, [pc, #112]	; (8006db4 <prvAddNewTaskToReadyList+0xbc>)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d46:	4b1d      	ldr	r3, [pc, #116]	; (8006dbc <prvAddNewTaskToReadyList+0xc4>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	4a1b      	ldr	r2, [pc, #108]	; (8006dbc <prvAddNewTaskToReadyList+0xc4>)
 8006d4e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d54:	2201      	movs	r2, #1
 8006d56:	409a      	lsls	r2, r3
 8006d58:	4b19      	ldr	r3, [pc, #100]	; (8006dc0 <prvAddNewTaskToReadyList+0xc8>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	4a18      	ldr	r2, [pc, #96]	; (8006dc0 <prvAddNewTaskToReadyList+0xc8>)
 8006d60:	6013      	str	r3, [r2, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d66:	4613      	mov	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4a15      	ldr	r2, [pc, #84]	; (8006dc4 <prvAddNewTaskToReadyList+0xcc>)
 8006d70:	441a      	add	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	3304      	adds	r3, #4
 8006d76:	4619      	mov	r1, r3
 8006d78:	4610      	mov	r0, r2
 8006d7a:	f7ff fe0d 	bl	8006998 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d7e:	f000 fd11 	bl	80077a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d82:	4b0d      	ldr	r3, [pc, #52]	; (8006db8 <prvAddNewTaskToReadyList+0xc0>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00e      	beq.n	8006da8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d8a:	4b0a      	ldr	r3, [pc, #40]	; (8006db4 <prvAddNewTaskToReadyList+0xbc>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d207      	bcs.n	8006da8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d98:	4b0b      	ldr	r3, [pc, #44]	; (8006dc8 <prvAddNewTaskToReadyList+0xd0>)
 8006d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d9e:	601a      	str	r2, [r3, #0]
 8006da0:	f3bf 8f4f 	dsb	sy
 8006da4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006da8:	bf00      	nop
 8006daa:	3708      	adds	r7, #8
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	20000808 	.word	0x20000808
 8006db4:	20000708 	.word	0x20000708
 8006db8:	20000814 	.word	0x20000814
 8006dbc:	20000824 	.word	0x20000824
 8006dc0:	20000810 	.word	0x20000810
 8006dc4:	2000070c 	.word	0x2000070c
 8006dc8:	e000ed04 	.word	0xe000ed04

08006dcc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d017      	beq.n	8006e0e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006dde:	4b13      	ldr	r3, [pc, #76]	; (8006e2c <vTaskDelay+0x60>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00a      	beq.n	8006dfc <vTaskDelay+0x30>
	__asm volatile
 8006de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dea:	f383 8811 	msr	BASEPRI, r3
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	60bb      	str	r3, [r7, #8]
}
 8006df8:	bf00      	nop
 8006dfa:	e7fe      	b.n	8006dfa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006dfc:	f000 f87a 	bl	8006ef4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e00:	2100      	movs	r1, #0
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fb0a 	bl	800741c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e08:	f000 f882 	bl	8006f10 <xTaskResumeAll>
 8006e0c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d107      	bne.n	8006e24 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006e14:	4b06      	ldr	r3, [pc, #24]	; (8006e30 <vTaskDelay+0x64>)
 8006e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e1a:	601a      	str	r2, [r3, #0]
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e24:	bf00      	nop
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	20000830 	.word	0x20000830
 8006e30:	e000ed04 	.word	0xe000ed04

08006e34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b08a      	sub	sp, #40	; 0x28
 8006e38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e42:	463a      	mov	r2, r7
 8006e44:	1d39      	adds	r1, r7, #4
 8006e46:	f107 0308 	add.w	r3, r7, #8
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fa fbf0 	bl	8001630 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e50:	6839      	ldr	r1, [r7, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	9202      	str	r2, [sp, #8]
 8006e58:	9301      	str	r3, [sp, #4]
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	2300      	movs	r3, #0
 8006e60:	460a      	mov	r2, r1
 8006e62:	491e      	ldr	r1, [pc, #120]	; (8006edc <vTaskStartScheduler+0xa8>)
 8006e64:	481e      	ldr	r0, [pc, #120]	; (8006ee0 <vTaskStartScheduler+0xac>)
 8006e66:	f7ff fe1e 	bl	8006aa6 <xTaskCreateStatic>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	4a1d      	ldr	r2, [pc, #116]	; (8006ee4 <vTaskStartScheduler+0xb0>)
 8006e6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e70:	4b1c      	ldr	r3, [pc, #112]	; (8006ee4 <vTaskStartScheduler+0xb0>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d002      	beq.n	8006e7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	617b      	str	r3, [r7, #20]
 8006e7c:	e001      	b.n	8006e82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d116      	bne.n	8006eb6 <vTaskStartScheduler+0x82>
	__asm volatile
 8006e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	613b      	str	r3, [r7, #16]
}
 8006e9a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e9c:	4b12      	ldr	r3, [pc, #72]	; (8006ee8 <vTaskStartScheduler+0xb4>)
 8006e9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ea2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ea4:	4b11      	ldr	r3, [pc, #68]	; (8006eec <vTaskStartScheduler+0xb8>)
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006eaa:	4b11      	ldr	r3, [pc, #68]	; (8006ef0 <vTaskStartScheduler+0xbc>)
 8006eac:	2200      	movs	r2, #0
 8006eae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006eb0:	f000 fba6 	bl	8007600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006eb4:	e00e      	b.n	8006ed4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ebc:	d10a      	bne.n	8006ed4 <vTaskStartScheduler+0xa0>
	__asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	60fb      	str	r3, [r7, #12]
}
 8006ed0:	bf00      	nop
 8006ed2:	e7fe      	b.n	8006ed2 <vTaskStartScheduler+0x9e>
}
 8006ed4:	bf00      	nop
 8006ed6:	3718      	adds	r7, #24
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	0800ac88 	.word	0x0800ac88
 8006ee0:	08007271 	.word	0x08007271
 8006ee4:	2000082c 	.word	0x2000082c
 8006ee8:	20000828 	.word	0x20000828
 8006eec:	20000814 	.word	0x20000814
 8006ef0:	2000080c 	.word	0x2000080c

08006ef4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006ef8:	4b04      	ldr	r3, [pc, #16]	; (8006f0c <vTaskSuspendAll+0x18>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3301      	adds	r3, #1
 8006efe:	4a03      	ldr	r2, [pc, #12]	; (8006f0c <vTaskSuspendAll+0x18>)
 8006f00:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006f02:	bf00      	nop
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	20000830 	.word	0x20000830

08006f10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f16:	2300      	movs	r3, #0
 8006f18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f1e:	4b41      	ldr	r3, [pc, #260]	; (8007024 <xTaskResumeAll+0x114>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10a      	bne.n	8006f3c <xTaskResumeAll+0x2c>
	__asm volatile
 8006f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2a:	f383 8811 	msr	BASEPRI, r3
 8006f2e:	f3bf 8f6f 	isb	sy
 8006f32:	f3bf 8f4f 	dsb	sy
 8006f36:	603b      	str	r3, [r7, #0]
}
 8006f38:	bf00      	nop
 8006f3a:	e7fe      	b.n	8006f3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f3c:	f000 fc02 	bl	8007744 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f40:	4b38      	ldr	r3, [pc, #224]	; (8007024 <xTaskResumeAll+0x114>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	3b01      	subs	r3, #1
 8006f46:	4a37      	ldr	r2, [pc, #220]	; (8007024 <xTaskResumeAll+0x114>)
 8006f48:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f4a:	4b36      	ldr	r3, [pc, #216]	; (8007024 <xTaskResumeAll+0x114>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d161      	bne.n	8007016 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f52:	4b35      	ldr	r3, [pc, #212]	; (8007028 <xTaskResumeAll+0x118>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d05d      	beq.n	8007016 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f5a:	e02e      	b.n	8006fba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f5c:	4b33      	ldr	r3, [pc, #204]	; (800702c <xTaskResumeAll+0x11c>)
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	3318      	adds	r3, #24
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7ff fd72 	bl	8006a52 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	3304      	adds	r3, #4
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7ff fd6d 	bl	8006a52 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	409a      	lsls	r2, r3
 8006f80:	4b2b      	ldr	r3, [pc, #172]	; (8007030 <xTaskResumeAll+0x120>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	4a2a      	ldr	r2, [pc, #168]	; (8007030 <xTaskResumeAll+0x120>)
 8006f88:	6013      	str	r3, [r2, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f8e:	4613      	mov	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4a27      	ldr	r2, [pc, #156]	; (8007034 <xTaskResumeAll+0x124>)
 8006f98:	441a      	add	r2, r3
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	f7ff fcf9 	bl	8006998 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006faa:	4b23      	ldr	r3, [pc, #140]	; (8007038 <xTaskResumeAll+0x128>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d302      	bcc.n	8006fba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006fb4:	4b21      	ldr	r3, [pc, #132]	; (800703c <xTaskResumeAll+0x12c>)
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fba:	4b1c      	ldr	r3, [pc, #112]	; (800702c <xTaskResumeAll+0x11c>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1cc      	bne.n	8006f5c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d001      	beq.n	8006fcc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006fc8:	f000 fa08 	bl	80073dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006fcc:	4b1c      	ldr	r3, [pc, #112]	; (8007040 <xTaskResumeAll+0x130>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d010      	beq.n	8006ffa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006fd8:	f000 f836 	bl	8007048 <xTaskIncrementTick>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d002      	beq.n	8006fe8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006fe2:	4b16      	ldr	r3, [pc, #88]	; (800703c <xTaskResumeAll+0x12c>)
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	3b01      	subs	r3, #1
 8006fec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1f1      	bne.n	8006fd8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006ff4:	4b12      	ldr	r3, [pc, #72]	; (8007040 <xTaskResumeAll+0x130>)
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ffa:	4b10      	ldr	r3, [pc, #64]	; (800703c <xTaskResumeAll+0x12c>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d009      	beq.n	8007016 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007002:	2301      	movs	r3, #1
 8007004:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007006:	4b0f      	ldr	r3, [pc, #60]	; (8007044 <xTaskResumeAll+0x134>)
 8007008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800700c:	601a      	str	r2, [r3, #0]
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007016:	f000 fbc5 	bl	80077a4 <vPortExitCritical>

	return xAlreadyYielded;
 800701a:	68bb      	ldr	r3, [r7, #8]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	20000830 	.word	0x20000830
 8007028:	20000808 	.word	0x20000808
 800702c:	200007c8 	.word	0x200007c8
 8007030:	20000810 	.word	0x20000810
 8007034:	2000070c 	.word	0x2000070c
 8007038:	20000708 	.word	0x20000708
 800703c:	2000081c 	.word	0x2000081c
 8007040:	20000818 	.word	0x20000818
 8007044:	e000ed04 	.word	0xe000ed04

08007048 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800704e:	2300      	movs	r3, #0
 8007050:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007052:	4b4e      	ldr	r3, [pc, #312]	; (800718c <xTaskIncrementTick+0x144>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	f040 808e 	bne.w	8007178 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800705c:	4b4c      	ldr	r3, [pc, #304]	; (8007190 <xTaskIncrementTick+0x148>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	3301      	adds	r3, #1
 8007062:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007064:	4a4a      	ldr	r2, [pc, #296]	; (8007190 <xTaskIncrementTick+0x148>)
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d120      	bne.n	80070b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007070:	4b48      	ldr	r3, [pc, #288]	; (8007194 <xTaskIncrementTick+0x14c>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00a      	beq.n	8007090 <xTaskIncrementTick+0x48>
	__asm volatile
 800707a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707e:	f383 8811 	msr	BASEPRI, r3
 8007082:	f3bf 8f6f 	isb	sy
 8007086:	f3bf 8f4f 	dsb	sy
 800708a:	603b      	str	r3, [r7, #0]
}
 800708c:	bf00      	nop
 800708e:	e7fe      	b.n	800708e <xTaskIncrementTick+0x46>
 8007090:	4b40      	ldr	r3, [pc, #256]	; (8007194 <xTaskIncrementTick+0x14c>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	60fb      	str	r3, [r7, #12]
 8007096:	4b40      	ldr	r3, [pc, #256]	; (8007198 <xTaskIncrementTick+0x150>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a3e      	ldr	r2, [pc, #248]	; (8007194 <xTaskIncrementTick+0x14c>)
 800709c:	6013      	str	r3, [r2, #0]
 800709e:	4a3e      	ldr	r2, [pc, #248]	; (8007198 <xTaskIncrementTick+0x150>)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6013      	str	r3, [r2, #0]
 80070a4:	4b3d      	ldr	r3, [pc, #244]	; (800719c <xTaskIncrementTick+0x154>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	3301      	adds	r3, #1
 80070aa:	4a3c      	ldr	r2, [pc, #240]	; (800719c <xTaskIncrementTick+0x154>)
 80070ac:	6013      	str	r3, [r2, #0]
 80070ae:	f000 f995 	bl	80073dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80070b2:	4b3b      	ldr	r3, [pc, #236]	; (80071a0 <xTaskIncrementTick+0x158>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d348      	bcc.n	800714e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070bc:	4b35      	ldr	r3, [pc, #212]	; (8007194 <xTaskIncrementTick+0x14c>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d104      	bne.n	80070d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070c6:	4b36      	ldr	r3, [pc, #216]	; (80071a0 <xTaskIncrementTick+0x158>)
 80070c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070cc:	601a      	str	r2, [r3, #0]
					break;
 80070ce:	e03e      	b.n	800714e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070d0:	4b30      	ldr	r3, [pc, #192]	; (8007194 <xTaskIncrementTick+0x14c>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d203      	bcs.n	80070f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80070e8:	4a2d      	ldr	r2, [pc, #180]	; (80071a0 <xTaskIncrementTick+0x158>)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80070ee:	e02e      	b.n	800714e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	3304      	adds	r3, #4
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7ff fcac 	bl	8006a52 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d004      	beq.n	800710c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	3318      	adds	r3, #24
 8007106:	4618      	mov	r0, r3
 8007108:	f7ff fca3 	bl	8006a52 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007110:	2201      	movs	r2, #1
 8007112:	409a      	lsls	r2, r3
 8007114:	4b23      	ldr	r3, [pc, #140]	; (80071a4 <xTaskIncrementTick+0x15c>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4313      	orrs	r3, r2
 800711a:	4a22      	ldr	r2, [pc, #136]	; (80071a4 <xTaskIncrementTick+0x15c>)
 800711c:	6013      	str	r3, [r2, #0]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007122:	4613      	mov	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4413      	add	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	4a1f      	ldr	r2, [pc, #124]	; (80071a8 <xTaskIncrementTick+0x160>)
 800712c:	441a      	add	r2, r3
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	3304      	adds	r3, #4
 8007132:	4619      	mov	r1, r3
 8007134:	4610      	mov	r0, r2
 8007136:	f7ff fc2f 	bl	8006998 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800713e:	4b1b      	ldr	r3, [pc, #108]	; (80071ac <xTaskIncrementTick+0x164>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007144:	429a      	cmp	r2, r3
 8007146:	d3b9      	bcc.n	80070bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007148:	2301      	movs	r3, #1
 800714a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800714c:	e7b6      	b.n	80070bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800714e:	4b17      	ldr	r3, [pc, #92]	; (80071ac <xTaskIncrementTick+0x164>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007154:	4914      	ldr	r1, [pc, #80]	; (80071a8 <xTaskIncrementTick+0x160>)
 8007156:	4613      	mov	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	4413      	add	r3, r2
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	440b      	add	r3, r1
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d901      	bls.n	800716a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007166:	2301      	movs	r3, #1
 8007168:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800716a:	4b11      	ldr	r3, [pc, #68]	; (80071b0 <xTaskIncrementTick+0x168>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d007      	beq.n	8007182 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007172:	2301      	movs	r3, #1
 8007174:	617b      	str	r3, [r7, #20]
 8007176:	e004      	b.n	8007182 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007178:	4b0e      	ldr	r3, [pc, #56]	; (80071b4 <xTaskIncrementTick+0x16c>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	3301      	adds	r3, #1
 800717e:	4a0d      	ldr	r2, [pc, #52]	; (80071b4 <xTaskIncrementTick+0x16c>)
 8007180:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007182:	697b      	ldr	r3, [r7, #20]
}
 8007184:	4618      	mov	r0, r3
 8007186:	3718      	adds	r7, #24
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	20000830 	.word	0x20000830
 8007190:	2000080c 	.word	0x2000080c
 8007194:	200007c0 	.word	0x200007c0
 8007198:	200007c4 	.word	0x200007c4
 800719c:	20000820 	.word	0x20000820
 80071a0:	20000828 	.word	0x20000828
 80071a4:	20000810 	.word	0x20000810
 80071a8:	2000070c 	.word	0x2000070c
 80071ac:	20000708 	.word	0x20000708
 80071b0:	2000081c 	.word	0x2000081c
 80071b4:	20000818 	.word	0x20000818

080071b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80071b8:	b480      	push	{r7}
 80071ba:	b087      	sub	sp, #28
 80071bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80071be:	4b27      	ldr	r3, [pc, #156]	; (800725c <vTaskSwitchContext+0xa4>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d003      	beq.n	80071ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80071c6:	4b26      	ldr	r3, [pc, #152]	; (8007260 <vTaskSwitchContext+0xa8>)
 80071c8:	2201      	movs	r2, #1
 80071ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80071cc:	e03f      	b.n	800724e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80071ce:	4b24      	ldr	r3, [pc, #144]	; (8007260 <vTaskSwitchContext+0xa8>)
 80071d0:	2200      	movs	r2, #0
 80071d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071d4:	4b23      	ldr	r3, [pc, #140]	; (8007264 <vTaskSwitchContext+0xac>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	fab3 f383 	clz	r3, r3
 80071e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80071e2:	7afb      	ldrb	r3, [r7, #11]
 80071e4:	f1c3 031f 	rsb	r3, r3, #31
 80071e8:	617b      	str	r3, [r7, #20]
 80071ea:	491f      	ldr	r1, [pc, #124]	; (8007268 <vTaskSwitchContext+0xb0>)
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	4613      	mov	r3, r2
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	440b      	add	r3, r1
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d10a      	bne.n	8007214 <vTaskSwitchContext+0x5c>
	__asm volatile
 80071fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007202:	f383 8811 	msr	BASEPRI, r3
 8007206:	f3bf 8f6f 	isb	sy
 800720a:	f3bf 8f4f 	dsb	sy
 800720e:	607b      	str	r3, [r7, #4]
}
 8007210:	bf00      	nop
 8007212:	e7fe      	b.n	8007212 <vTaskSwitchContext+0x5a>
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	4613      	mov	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	4413      	add	r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4a12      	ldr	r2, [pc, #72]	; (8007268 <vTaskSwitchContext+0xb0>)
 8007220:	4413      	add	r3, r2
 8007222:	613b      	str	r3, [r7, #16]
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	685a      	ldr	r2, [r3, #4]
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	605a      	str	r2, [r3, #4]
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	685a      	ldr	r2, [r3, #4]
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	3308      	adds	r3, #8
 8007236:	429a      	cmp	r2, r3
 8007238:	d104      	bne.n	8007244 <vTaskSwitchContext+0x8c>
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	685a      	ldr	r2, [r3, #4]
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	605a      	str	r2, [r3, #4]
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	4a08      	ldr	r2, [pc, #32]	; (800726c <vTaskSwitchContext+0xb4>)
 800724c:	6013      	str	r3, [r2, #0]
}
 800724e:	bf00      	nop
 8007250:	371c      	adds	r7, #28
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	20000830 	.word	0x20000830
 8007260:	2000081c 	.word	0x2000081c
 8007264:	20000810 	.word	0x20000810
 8007268:	2000070c 	.word	0x2000070c
 800726c:	20000708 	.word	0x20000708

08007270 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007278:	f000 f852 	bl	8007320 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800727c:	4b06      	ldr	r3, [pc, #24]	; (8007298 <prvIdleTask+0x28>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d9f9      	bls.n	8007278 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007284:	4b05      	ldr	r3, [pc, #20]	; (800729c <prvIdleTask+0x2c>)
 8007286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800728a:	601a      	str	r2, [r3, #0]
 800728c:	f3bf 8f4f 	dsb	sy
 8007290:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007294:	e7f0      	b.n	8007278 <prvIdleTask+0x8>
 8007296:	bf00      	nop
 8007298:	2000070c 	.word	0x2000070c
 800729c:	e000ed04 	.word	0xe000ed04

080072a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072a6:	2300      	movs	r3, #0
 80072a8:	607b      	str	r3, [r7, #4]
 80072aa:	e00c      	b.n	80072c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	4613      	mov	r3, r2
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	4413      	add	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4a12      	ldr	r2, [pc, #72]	; (8007300 <prvInitialiseTaskLists+0x60>)
 80072b8:	4413      	add	r3, r2
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7ff fb3f 	bl	800693e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	3301      	adds	r3, #1
 80072c4:	607b      	str	r3, [r7, #4]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2b06      	cmp	r3, #6
 80072ca:	d9ef      	bls.n	80072ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80072cc:	480d      	ldr	r0, [pc, #52]	; (8007304 <prvInitialiseTaskLists+0x64>)
 80072ce:	f7ff fb36 	bl	800693e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80072d2:	480d      	ldr	r0, [pc, #52]	; (8007308 <prvInitialiseTaskLists+0x68>)
 80072d4:	f7ff fb33 	bl	800693e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80072d8:	480c      	ldr	r0, [pc, #48]	; (800730c <prvInitialiseTaskLists+0x6c>)
 80072da:	f7ff fb30 	bl	800693e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80072de:	480c      	ldr	r0, [pc, #48]	; (8007310 <prvInitialiseTaskLists+0x70>)
 80072e0:	f7ff fb2d 	bl	800693e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80072e4:	480b      	ldr	r0, [pc, #44]	; (8007314 <prvInitialiseTaskLists+0x74>)
 80072e6:	f7ff fb2a 	bl	800693e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80072ea:	4b0b      	ldr	r3, [pc, #44]	; (8007318 <prvInitialiseTaskLists+0x78>)
 80072ec:	4a05      	ldr	r2, [pc, #20]	; (8007304 <prvInitialiseTaskLists+0x64>)
 80072ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80072f0:	4b0a      	ldr	r3, [pc, #40]	; (800731c <prvInitialiseTaskLists+0x7c>)
 80072f2:	4a05      	ldr	r2, [pc, #20]	; (8007308 <prvInitialiseTaskLists+0x68>)
 80072f4:	601a      	str	r2, [r3, #0]
}
 80072f6:	bf00      	nop
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	2000070c 	.word	0x2000070c
 8007304:	20000798 	.word	0x20000798
 8007308:	200007ac 	.word	0x200007ac
 800730c:	200007c8 	.word	0x200007c8
 8007310:	200007dc 	.word	0x200007dc
 8007314:	200007f4 	.word	0x200007f4
 8007318:	200007c0 	.word	0x200007c0
 800731c:	200007c4 	.word	0x200007c4

08007320 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007326:	e019      	b.n	800735c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007328:	f000 fa0c 	bl	8007744 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800732c:	4b10      	ldr	r3, [pc, #64]	; (8007370 <prvCheckTasksWaitingTermination+0x50>)
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	3304      	adds	r3, #4
 8007338:	4618      	mov	r0, r3
 800733a:	f7ff fb8a 	bl	8006a52 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800733e:	4b0d      	ldr	r3, [pc, #52]	; (8007374 <prvCheckTasksWaitingTermination+0x54>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	3b01      	subs	r3, #1
 8007344:	4a0b      	ldr	r2, [pc, #44]	; (8007374 <prvCheckTasksWaitingTermination+0x54>)
 8007346:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007348:	4b0b      	ldr	r3, [pc, #44]	; (8007378 <prvCheckTasksWaitingTermination+0x58>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	3b01      	subs	r3, #1
 800734e:	4a0a      	ldr	r2, [pc, #40]	; (8007378 <prvCheckTasksWaitingTermination+0x58>)
 8007350:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007352:	f000 fa27 	bl	80077a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f810 	bl	800737c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800735c:	4b06      	ldr	r3, [pc, #24]	; (8007378 <prvCheckTasksWaitingTermination+0x58>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1e1      	bne.n	8007328 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007364:	bf00      	nop
 8007366:	bf00      	nop
 8007368:	3708      	adds	r7, #8
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	200007dc 	.word	0x200007dc
 8007374:	20000808 	.word	0x20000808
 8007378:	200007f0 	.word	0x200007f0

0800737c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800738a:	2b00      	cmp	r3, #0
 800738c:	d108      	bne.n	80073a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007392:	4618      	mov	r0, r3
 8007394:	f000 fb84 	bl	8007aa0 <vPortFree>
				vPortFree( pxTCB );
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fb81 	bl	8007aa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800739e:	e018      	b.n	80073d2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d103      	bne.n	80073b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 fb78 	bl	8007aa0 <vPortFree>
	}
 80073b0:	e00f      	b.n	80073d2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d00a      	beq.n	80073d2 <prvDeleteTCB+0x56>
	__asm volatile
 80073bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c0:	f383 8811 	msr	BASEPRI, r3
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	f3bf 8f4f 	dsb	sy
 80073cc:	60fb      	str	r3, [r7, #12]
}
 80073ce:	bf00      	nop
 80073d0:	e7fe      	b.n	80073d0 <prvDeleteTCB+0x54>
	}
 80073d2:	bf00      	nop
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
	...

080073dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073e2:	4b0c      	ldr	r3, [pc, #48]	; (8007414 <prvResetNextTaskUnblockTime+0x38>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d104      	bne.n	80073f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80073ec:	4b0a      	ldr	r3, [pc, #40]	; (8007418 <prvResetNextTaskUnblockTime+0x3c>)
 80073ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80073f4:	e008      	b.n	8007408 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073f6:	4b07      	ldr	r3, [pc, #28]	; (8007414 <prvResetNextTaskUnblockTime+0x38>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	4a04      	ldr	r2, [pc, #16]	; (8007418 <prvResetNextTaskUnblockTime+0x3c>)
 8007406:	6013      	str	r3, [r2, #0]
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	200007c0 	.word	0x200007c0
 8007418:	20000828 	.word	0x20000828

0800741c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007426:	4b29      	ldr	r3, [pc, #164]	; (80074cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800742c:	4b28      	ldr	r3, [pc, #160]	; (80074d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	3304      	adds	r3, #4
 8007432:	4618      	mov	r0, r3
 8007434:	f7ff fb0d 	bl	8006a52 <uxListRemove>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d10b      	bne.n	8007456 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800743e:	4b24      	ldr	r3, [pc, #144]	; (80074d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007444:	2201      	movs	r2, #1
 8007446:	fa02 f303 	lsl.w	r3, r2, r3
 800744a:	43da      	mvns	r2, r3
 800744c:	4b21      	ldr	r3, [pc, #132]	; (80074d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4013      	ands	r3, r2
 8007452:	4a20      	ldr	r2, [pc, #128]	; (80074d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007454:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800745c:	d10a      	bne.n	8007474 <prvAddCurrentTaskToDelayedList+0x58>
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d007      	beq.n	8007474 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007464:	4b1a      	ldr	r3, [pc, #104]	; (80074d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3304      	adds	r3, #4
 800746a:	4619      	mov	r1, r3
 800746c:	481a      	ldr	r0, [pc, #104]	; (80074d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800746e:	f7ff fa93 	bl	8006998 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007472:	e026      	b.n	80074c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4413      	add	r3, r2
 800747a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800747c:	4b14      	ldr	r3, [pc, #80]	; (80074d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007484:	68ba      	ldr	r2, [r7, #8]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	429a      	cmp	r2, r3
 800748a:	d209      	bcs.n	80074a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800748c:	4b13      	ldr	r3, [pc, #76]	; (80074dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	4b0f      	ldr	r3, [pc, #60]	; (80074d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	3304      	adds	r3, #4
 8007496:	4619      	mov	r1, r3
 8007498:	4610      	mov	r0, r2
 800749a:	f7ff faa1 	bl	80069e0 <vListInsert>
}
 800749e:	e010      	b.n	80074c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074a0:	4b0f      	ldr	r3, [pc, #60]	; (80074e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	4b0a      	ldr	r3, [pc, #40]	; (80074d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	3304      	adds	r3, #4
 80074aa:	4619      	mov	r1, r3
 80074ac:	4610      	mov	r0, r2
 80074ae:	f7ff fa97 	bl	80069e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80074b2:	4b0c      	ldr	r3, [pc, #48]	; (80074e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d202      	bcs.n	80074c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80074bc:	4a09      	ldr	r2, [pc, #36]	; (80074e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	6013      	str	r3, [r2, #0]
}
 80074c2:	bf00      	nop
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	2000080c 	.word	0x2000080c
 80074d0:	20000708 	.word	0x20000708
 80074d4:	20000810 	.word	0x20000810
 80074d8:	200007f4 	.word	0x200007f4
 80074dc:	200007c4 	.word	0x200007c4
 80074e0:	200007c0 	.word	0x200007c0
 80074e4:	20000828 	.word	0x20000828

080074e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	3b04      	subs	r3, #4
 80074f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007500:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	3b04      	subs	r3, #4
 8007506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	f023 0201 	bic.w	r2, r3, #1
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	3b04      	subs	r3, #4
 8007516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007518:	4a0c      	ldr	r2, [pc, #48]	; (800754c <pxPortInitialiseStack+0x64>)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	3b14      	subs	r3, #20
 8007522:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	3b04      	subs	r3, #4
 800752e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f06f 0202 	mvn.w	r2, #2
 8007536:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	3b20      	subs	r3, #32
 800753c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800753e:	68fb      	ldr	r3, [r7, #12]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr
 800754c:	08007551 	.word	0x08007551

08007550 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007556:	2300      	movs	r3, #0
 8007558:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800755a:	4b12      	ldr	r3, [pc, #72]	; (80075a4 <prvTaskExitError+0x54>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007562:	d00a      	beq.n	800757a <prvTaskExitError+0x2a>
	__asm volatile
 8007564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007568:	f383 8811 	msr	BASEPRI, r3
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	60fb      	str	r3, [r7, #12]
}
 8007576:	bf00      	nop
 8007578:	e7fe      	b.n	8007578 <prvTaskExitError+0x28>
	__asm volatile
 800757a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757e:	f383 8811 	msr	BASEPRI, r3
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	60bb      	str	r3, [r7, #8]
}
 800758c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800758e:	bf00      	nop
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d0fc      	beq.n	8007590 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007596:	bf00      	nop
 8007598:	bf00      	nop
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr
 80075a4:	2000008c 	.word	0x2000008c
	...

080075b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80075b0:	4b07      	ldr	r3, [pc, #28]	; (80075d0 <pxCurrentTCBConst2>)
 80075b2:	6819      	ldr	r1, [r3, #0]
 80075b4:	6808      	ldr	r0, [r1, #0]
 80075b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ba:	f380 8809 	msr	PSP, r0
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	f04f 0000 	mov.w	r0, #0
 80075c6:	f380 8811 	msr	BASEPRI, r0
 80075ca:	4770      	bx	lr
 80075cc:	f3af 8000 	nop.w

080075d0 <pxCurrentTCBConst2>:
 80075d0:	20000708 	.word	0x20000708
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80075d4:	bf00      	nop
 80075d6:	bf00      	nop

080075d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80075d8:	4808      	ldr	r0, [pc, #32]	; (80075fc <prvPortStartFirstTask+0x24>)
 80075da:	6800      	ldr	r0, [r0, #0]
 80075dc:	6800      	ldr	r0, [r0, #0]
 80075de:	f380 8808 	msr	MSP, r0
 80075e2:	f04f 0000 	mov.w	r0, #0
 80075e6:	f380 8814 	msr	CONTROL, r0
 80075ea:	b662      	cpsie	i
 80075ec:	b661      	cpsie	f
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	f3bf 8f6f 	isb	sy
 80075f6:	df00      	svc	0
 80075f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80075fa:	bf00      	nop
 80075fc:	e000ed08 	.word	0xe000ed08

08007600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007606:	4b46      	ldr	r3, [pc, #280]	; (8007720 <xPortStartScheduler+0x120>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a46      	ldr	r2, [pc, #280]	; (8007724 <xPortStartScheduler+0x124>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d10a      	bne.n	8007626 <xPortStartScheduler+0x26>
	__asm volatile
 8007610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007614:	f383 8811 	msr	BASEPRI, r3
 8007618:	f3bf 8f6f 	isb	sy
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	613b      	str	r3, [r7, #16]
}
 8007622:	bf00      	nop
 8007624:	e7fe      	b.n	8007624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007626:	4b3e      	ldr	r3, [pc, #248]	; (8007720 <xPortStartScheduler+0x120>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a3f      	ldr	r2, [pc, #252]	; (8007728 <xPortStartScheduler+0x128>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d10a      	bne.n	8007646 <xPortStartScheduler+0x46>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	60fb      	str	r3, [r7, #12]
}
 8007642:	bf00      	nop
 8007644:	e7fe      	b.n	8007644 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007646:	4b39      	ldr	r3, [pc, #228]	; (800772c <xPortStartScheduler+0x12c>)
 8007648:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	b2db      	uxtb	r3, r3
 8007650:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	22ff      	movs	r2, #255	; 0xff
 8007656:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	b2db      	uxtb	r3, r3
 800765e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007660:	78fb      	ldrb	r3, [r7, #3]
 8007662:	b2db      	uxtb	r3, r3
 8007664:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007668:	b2da      	uxtb	r2, r3
 800766a:	4b31      	ldr	r3, [pc, #196]	; (8007730 <xPortStartScheduler+0x130>)
 800766c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800766e:	4b31      	ldr	r3, [pc, #196]	; (8007734 <xPortStartScheduler+0x134>)
 8007670:	2207      	movs	r2, #7
 8007672:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007674:	e009      	b.n	800768a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007676:	4b2f      	ldr	r3, [pc, #188]	; (8007734 <xPortStartScheduler+0x134>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	3b01      	subs	r3, #1
 800767c:	4a2d      	ldr	r2, [pc, #180]	; (8007734 <xPortStartScheduler+0x134>)
 800767e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007680:	78fb      	ldrb	r3, [r7, #3]
 8007682:	b2db      	uxtb	r3, r3
 8007684:	005b      	lsls	r3, r3, #1
 8007686:	b2db      	uxtb	r3, r3
 8007688:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800768a:	78fb      	ldrb	r3, [r7, #3]
 800768c:	b2db      	uxtb	r3, r3
 800768e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007692:	2b80      	cmp	r3, #128	; 0x80
 8007694:	d0ef      	beq.n	8007676 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007696:	4b27      	ldr	r3, [pc, #156]	; (8007734 <xPortStartScheduler+0x134>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f1c3 0307 	rsb	r3, r3, #7
 800769e:	2b04      	cmp	r3, #4
 80076a0:	d00a      	beq.n	80076b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80076a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	60bb      	str	r3, [r7, #8]
}
 80076b4:	bf00      	nop
 80076b6:	e7fe      	b.n	80076b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80076b8:	4b1e      	ldr	r3, [pc, #120]	; (8007734 <xPortStartScheduler+0x134>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	021b      	lsls	r3, r3, #8
 80076be:	4a1d      	ldr	r2, [pc, #116]	; (8007734 <xPortStartScheduler+0x134>)
 80076c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80076c2:	4b1c      	ldr	r3, [pc, #112]	; (8007734 <xPortStartScheduler+0x134>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076ca:	4a1a      	ldr	r2, [pc, #104]	; (8007734 <xPortStartScheduler+0x134>)
 80076cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	b2da      	uxtb	r2, r3
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80076d6:	4b18      	ldr	r3, [pc, #96]	; (8007738 <xPortStartScheduler+0x138>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a17      	ldr	r2, [pc, #92]	; (8007738 <xPortStartScheduler+0x138>)
 80076dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80076e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80076e2:	4b15      	ldr	r3, [pc, #84]	; (8007738 <xPortStartScheduler+0x138>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a14      	ldr	r2, [pc, #80]	; (8007738 <xPortStartScheduler+0x138>)
 80076e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80076ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80076ee:	f000 f8dd 	bl	80078ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80076f2:	4b12      	ldr	r3, [pc, #72]	; (800773c <xPortStartScheduler+0x13c>)
 80076f4:	2200      	movs	r2, #0
 80076f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80076f8:	f000 f8fc 	bl	80078f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80076fc:	4b10      	ldr	r3, [pc, #64]	; (8007740 <xPortStartScheduler+0x140>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a0f      	ldr	r2, [pc, #60]	; (8007740 <xPortStartScheduler+0x140>)
 8007702:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007706:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007708:	f7ff ff66 	bl	80075d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800770c:	f7ff fd54 	bl	80071b8 <vTaskSwitchContext>
	prvTaskExitError();
 8007710:	f7ff ff1e 	bl	8007550 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3718      	adds	r7, #24
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	e000ed00 	.word	0xe000ed00
 8007724:	410fc271 	.word	0x410fc271
 8007728:	410fc270 	.word	0x410fc270
 800772c:	e000e400 	.word	0xe000e400
 8007730:	20000834 	.word	0x20000834
 8007734:	20000838 	.word	0x20000838
 8007738:	e000ed20 	.word	0xe000ed20
 800773c:	2000008c 	.word	0x2000008c
 8007740:	e000ef34 	.word	0xe000ef34

08007744 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
	__asm volatile
 800774a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774e:	f383 8811 	msr	BASEPRI, r3
 8007752:	f3bf 8f6f 	isb	sy
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	607b      	str	r3, [r7, #4]
}
 800775c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800775e:	4b0f      	ldr	r3, [pc, #60]	; (800779c <vPortEnterCritical+0x58>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	3301      	adds	r3, #1
 8007764:	4a0d      	ldr	r2, [pc, #52]	; (800779c <vPortEnterCritical+0x58>)
 8007766:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007768:	4b0c      	ldr	r3, [pc, #48]	; (800779c <vPortEnterCritical+0x58>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2b01      	cmp	r3, #1
 800776e:	d10f      	bne.n	8007790 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007770:	4b0b      	ldr	r3, [pc, #44]	; (80077a0 <vPortEnterCritical+0x5c>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00a      	beq.n	8007790 <vPortEnterCritical+0x4c>
	__asm volatile
 800777a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777e:	f383 8811 	msr	BASEPRI, r3
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	603b      	str	r3, [r7, #0]
}
 800778c:	bf00      	nop
 800778e:	e7fe      	b.n	800778e <vPortEnterCritical+0x4a>
	}
}
 8007790:	bf00      	nop
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr
 800779c:	2000008c 	.word	0x2000008c
 80077a0:	e000ed04 	.word	0xe000ed04

080077a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80077aa:	4b12      	ldr	r3, [pc, #72]	; (80077f4 <vPortExitCritical+0x50>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10a      	bne.n	80077c8 <vPortExitCritical+0x24>
	__asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b6:	f383 8811 	msr	BASEPRI, r3
 80077ba:	f3bf 8f6f 	isb	sy
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	607b      	str	r3, [r7, #4]
}
 80077c4:	bf00      	nop
 80077c6:	e7fe      	b.n	80077c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80077c8:	4b0a      	ldr	r3, [pc, #40]	; (80077f4 <vPortExitCritical+0x50>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	3b01      	subs	r3, #1
 80077ce:	4a09      	ldr	r2, [pc, #36]	; (80077f4 <vPortExitCritical+0x50>)
 80077d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80077d2:	4b08      	ldr	r3, [pc, #32]	; (80077f4 <vPortExitCritical+0x50>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d105      	bne.n	80077e6 <vPortExitCritical+0x42>
 80077da:	2300      	movs	r3, #0
 80077dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80077e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80077e6:	bf00      	nop
 80077e8:	370c      	adds	r7, #12
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	2000008c 	.word	0x2000008c
	...

08007800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007800:	f3ef 8009 	mrs	r0, PSP
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	4b15      	ldr	r3, [pc, #84]	; (8007860 <pxCurrentTCBConst>)
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	f01e 0f10 	tst.w	lr, #16
 8007810:	bf08      	it	eq
 8007812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800781a:	6010      	str	r0, [r2, #0]
 800781c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007820:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007824:	f380 8811 	msr	BASEPRI, r0
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	f3bf 8f6f 	isb	sy
 8007830:	f7ff fcc2 	bl	80071b8 <vTaskSwitchContext>
 8007834:	f04f 0000 	mov.w	r0, #0
 8007838:	f380 8811 	msr	BASEPRI, r0
 800783c:	bc09      	pop	{r0, r3}
 800783e:	6819      	ldr	r1, [r3, #0]
 8007840:	6808      	ldr	r0, [r1, #0]
 8007842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007846:	f01e 0f10 	tst.w	lr, #16
 800784a:	bf08      	it	eq
 800784c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007850:	f380 8809 	msr	PSP, r0
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	f3af 8000 	nop.w

08007860 <pxCurrentTCBConst>:
 8007860:	20000708 	.word	0x20000708
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007864:	bf00      	nop
 8007866:	bf00      	nop

08007868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
	__asm volatile
 800786e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	607b      	str	r3, [r7, #4]
}
 8007880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007882:	f7ff fbe1 	bl	8007048 <xTaskIncrementTick>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d003      	beq.n	8007894 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800788c:	4b06      	ldr	r3, [pc, #24]	; (80078a8 <SysTick_Handler+0x40>)
 800788e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007892:	601a      	str	r2, [r3, #0]
 8007894:	2300      	movs	r3, #0
 8007896:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	f383 8811 	msr	BASEPRI, r3
}
 800789e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80078a0:	bf00      	nop
 80078a2:	3708      	adds	r7, #8
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	e000ed04 	.word	0xe000ed04

080078ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80078ac:	b480      	push	{r7}
 80078ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80078b0:	4b0b      	ldr	r3, [pc, #44]	; (80078e0 <vPortSetupTimerInterrupt+0x34>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80078b6:	4b0b      	ldr	r3, [pc, #44]	; (80078e4 <vPortSetupTimerInterrupt+0x38>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80078bc:	4b0a      	ldr	r3, [pc, #40]	; (80078e8 <vPortSetupTimerInterrupt+0x3c>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a0a      	ldr	r2, [pc, #40]	; (80078ec <vPortSetupTimerInterrupt+0x40>)
 80078c2:	fba2 2303 	umull	r2, r3, r2, r3
 80078c6:	099b      	lsrs	r3, r3, #6
 80078c8:	4a09      	ldr	r2, [pc, #36]	; (80078f0 <vPortSetupTimerInterrupt+0x44>)
 80078ca:	3b01      	subs	r3, #1
 80078cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80078ce:	4b04      	ldr	r3, [pc, #16]	; (80078e0 <vPortSetupTimerInterrupt+0x34>)
 80078d0:	2207      	movs	r2, #7
 80078d2:	601a      	str	r2, [r3, #0]
}
 80078d4:	bf00      	nop
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	e000e010 	.word	0xe000e010
 80078e4:	e000e018 	.word	0xe000e018
 80078e8:	20000080 	.word	0x20000080
 80078ec:	10624dd3 	.word	0x10624dd3
 80078f0:	e000e014 	.word	0xe000e014

080078f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80078f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007904 <vPortEnableVFP+0x10>
 80078f8:	6801      	ldr	r1, [r0, #0]
 80078fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80078fe:	6001      	str	r1, [r0, #0]
 8007900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007902:	bf00      	nop
 8007904:	e000ed88 	.word	0xe000ed88

08007908 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b08a      	sub	sp, #40	; 0x28
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007910:	2300      	movs	r3, #0
 8007912:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007914:	f7ff faee 	bl	8006ef4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007918:	4b5b      	ldr	r3, [pc, #364]	; (8007a88 <pvPortMalloc+0x180>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d101      	bne.n	8007924 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007920:	f000 f920 	bl	8007b64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007924:	4b59      	ldr	r3, [pc, #356]	; (8007a8c <pvPortMalloc+0x184>)
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4013      	ands	r3, r2
 800792c:	2b00      	cmp	r3, #0
 800792e:	f040 8093 	bne.w	8007a58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d01d      	beq.n	8007974 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007938:	2208      	movs	r2, #8
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4413      	add	r3, r2
 800793e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f003 0307 	and.w	r3, r3, #7
 8007946:	2b00      	cmp	r3, #0
 8007948:	d014      	beq.n	8007974 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f023 0307 	bic.w	r3, r3, #7
 8007950:	3308      	adds	r3, #8
 8007952:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f003 0307 	and.w	r3, r3, #7
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00a      	beq.n	8007974 <pvPortMalloc+0x6c>
	__asm volatile
 800795e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	617b      	str	r3, [r7, #20]
}
 8007970:	bf00      	nop
 8007972:	e7fe      	b.n	8007972 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d06e      	beq.n	8007a58 <pvPortMalloc+0x150>
 800797a:	4b45      	ldr	r3, [pc, #276]	; (8007a90 <pvPortMalloc+0x188>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	429a      	cmp	r2, r3
 8007982:	d869      	bhi.n	8007a58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007984:	4b43      	ldr	r3, [pc, #268]	; (8007a94 <pvPortMalloc+0x18c>)
 8007986:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007988:	4b42      	ldr	r3, [pc, #264]	; (8007a94 <pvPortMalloc+0x18c>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800798e:	e004      	b.n	800799a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007992:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d903      	bls.n	80079ac <pvPortMalloc+0xa4>
 80079a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1f1      	bne.n	8007990 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80079ac:	4b36      	ldr	r3, [pc, #216]	; (8007a88 <pvPortMalloc+0x180>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d050      	beq.n	8007a58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80079b6:	6a3b      	ldr	r3, [r7, #32]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2208      	movs	r2, #8
 80079bc:	4413      	add	r3, r2
 80079be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80079c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ca:	685a      	ldr	r2, [r3, #4]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	1ad2      	subs	r2, r2, r3
 80079d0:	2308      	movs	r3, #8
 80079d2:	005b      	lsls	r3, r3, #1
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d91f      	bls.n	8007a18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80079d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4413      	add	r3, r2
 80079de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	f003 0307 	and.w	r3, r3, #7
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00a      	beq.n	8007a00 <pvPortMalloc+0xf8>
	__asm volatile
 80079ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ee:	f383 8811 	msr	BASEPRI, r3
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	613b      	str	r3, [r7, #16]
}
 80079fc:	bf00      	nop
 80079fe:	e7fe      	b.n	80079fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a02:	685a      	ldr	r2, [r3, #4]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	1ad2      	subs	r2, r2, r3
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a12:	69b8      	ldr	r0, [r7, #24]
 8007a14:	f000 f908 	bl	8007c28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a18:	4b1d      	ldr	r3, [pc, #116]	; (8007a90 <pvPortMalloc+0x188>)
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	4a1b      	ldr	r2, [pc, #108]	; (8007a90 <pvPortMalloc+0x188>)
 8007a24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a26:	4b1a      	ldr	r3, [pc, #104]	; (8007a90 <pvPortMalloc+0x188>)
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	4b1b      	ldr	r3, [pc, #108]	; (8007a98 <pvPortMalloc+0x190>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d203      	bcs.n	8007a3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a32:	4b17      	ldr	r3, [pc, #92]	; (8007a90 <pvPortMalloc+0x188>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a18      	ldr	r2, [pc, #96]	; (8007a98 <pvPortMalloc+0x190>)
 8007a38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3c:	685a      	ldr	r2, [r3, #4]
 8007a3e:	4b13      	ldr	r3, [pc, #76]	; (8007a8c <pvPortMalloc+0x184>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	431a      	orrs	r2, r3
 8007a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007a4e:	4b13      	ldr	r3, [pc, #76]	; (8007a9c <pvPortMalloc+0x194>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	3301      	adds	r3, #1
 8007a54:	4a11      	ldr	r2, [pc, #68]	; (8007a9c <pvPortMalloc+0x194>)
 8007a56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a58:	f7ff fa5a 	bl	8006f10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	f003 0307 	and.w	r3, r3, #7
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00a      	beq.n	8007a7c <pvPortMalloc+0x174>
	__asm volatile
 8007a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6a:	f383 8811 	msr	BASEPRI, r3
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	60fb      	str	r3, [r7, #12]
}
 8007a78:	bf00      	nop
 8007a7a:	e7fe      	b.n	8007a7a <pvPortMalloc+0x172>
	return pvReturn;
 8007a7c:	69fb      	ldr	r3, [r7, #28]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3728      	adds	r7, #40	; 0x28
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	200013fc 	.word	0x200013fc
 8007a8c:	20001410 	.word	0x20001410
 8007a90:	20001400 	.word	0x20001400
 8007a94:	200013f4 	.word	0x200013f4
 8007a98:	20001404 	.word	0x20001404
 8007a9c:	20001408 	.word	0x20001408

08007aa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b086      	sub	sp, #24
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d04d      	beq.n	8007b4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ab2:	2308      	movs	r3, #8
 8007ab4:	425b      	negs	r3, r3
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	4413      	add	r3, r2
 8007aba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	685a      	ldr	r2, [r3, #4]
 8007ac4:	4b24      	ldr	r3, [pc, #144]	; (8007b58 <vPortFree+0xb8>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4013      	ands	r3, r2
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d10a      	bne.n	8007ae4 <vPortFree+0x44>
	__asm volatile
 8007ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad2:	f383 8811 	msr	BASEPRI, r3
 8007ad6:	f3bf 8f6f 	isb	sy
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	60fb      	str	r3, [r7, #12]
}
 8007ae0:	bf00      	nop
 8007ae2:	e7fe      	b.n	8007ae2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00a      	beq.n	8007b02 <vPortFree+0x62>
	__asm volatile
 8007aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af0:	f383 8811 	msr	BASEPRI, r3
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	60bb      	str	r3, [r7, #8]
}
 8007afe:	bf00      	nop
 8007b00:	e7fe      	b.n	8007b00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	685a      	ldr	r2, [r3, #4]
 8007b06:	4b14      	ldr	r3, [pc, #80]	; (8007b58 <vPortFree+0xb8>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d01e      	beq.n	8007b4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d11a      	bne.n	8007b4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	4b0e      	ldr	r3, [pc, #56]	; (8007b58 <vPortFree+0xb8>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	43db      	mvns	r3, r3
 8007b22:	401a      	ands	r2, r3
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b28:	f7ff f9e4 	bl	8006ef4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	685a      	ldr	r2, [r3, #4]
 8007b30:	4b0a      	ldr	r3, [pc, #40]	; (8007b5c <vPortFree+0xbc>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4413      	add	r3, r2
 8007b36:	4a09      	ldr	r2, [pc, #36]	; (8007b5c <vPortFree+0xbc>)
 8007b38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b3a:	6938      	ldr	r0, [r7, #16]
 8007b3c:	f000 f874 	bl	8007c28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007b40:	4b07      	ldr	r3, [pc, #28]	; (8007b60 <vPortFree+0xc0>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	3301      	adds	r3, #1
 8007b46:	4a06      	ldr	r2, [pc, #24]	; (8007b60 <vPortFree+0xc0>)
 8007b48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007b4a:	f7ff f9e1 	bl	8006f10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007b4e:	bf00      	nop
 8007b50:	3718      	adds	r7, #24
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	20001410 	.word	0x20001410
 8007b5c:	20001400 	.word	0x20001400
 8007b60:	2000140c 	.word	0x2000140c

08007b64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b6a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007b6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b70:	4b27      	ldr	r3, [pc, #156]	; (8007c10 <prvHeapInit+0xac>)
 8007b72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f003 0307 	and.w	r3, r3, #7
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00c      	beq.n	8007b98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3307      	adds	r3, #7
 8007b82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f023 0307 	bic.w	r3, r3, #7
 8007b8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	4a1f      	ldr	r2, [pc, #124]	; (8007c10 <prvHeapInit+0xac>)
 8007b94:	4413      	add	r3, r2
 8007b96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b9c:	4a1d      	ldr	r2, [pc, #116]	; (8007c14 <prvHeapInit+0xb0>)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ba2:	4b1c      	ldr	r3, [pc, #112]	; (8007c14 <prvHeapInit+0xb0>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	4413      	add	r3, r2
 8007bae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007bb0:	2208      	movs	r2, #8
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	1a9b      	subs	r3, r3, r2
 8007bb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f023 0307 	bic.w	r3, r3, #7
 8007bbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	4a15      	ldr	r2, [pc, #84]	; (8007c18 <prvHeapInit+0xb4>)
 8007bc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007bc6:	4b14      	ldr	r3, [pc, #80]	; (8007c18 <prvHeapInit+0xb4>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007bce:	4b12      	ldr	r3, [pc, #72]	; (8007c18 <prvHeapInit+0xb4>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	1ad2      	subs	r2, r2, r3
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007be4:	4b0c      	ldr	r3, [pc, #48]	; (8007c18 <prvHeapInit+0xb4>)
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	4a0a      	ldr	r2, [pc, #40]	; (8007c1c <prvHeapInit+0xb8>)
 8007bf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	4a09      	ldr	r2, [pc, #36]	; (8007c20 <prvHeapInit+0xbc>)
 8007bfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007bfc:	4b09      	ldr	r3, [pc, #36]	; (8007c24 <prvHeapInit+0xc0>)
 8007bfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007c02:	601a      	str	r2, [r3, #0]
}
 8007c04:	bf00      	nop
 8007c06:	3714      	adds	r7, #20
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr
 8007c10:	2000083c 	.word	0x2000083c
 8007c14:	200013f4 	.word	0x200013f4
 8007c18:	200013fc 	.word	0x200013fc
 8007c1c:	20001404 	.word	0x20001404
 8007c20:	20001400 	.word	0x20001400
 8007c24:	20001410 	.word	0x20001410

08007c28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c30:	4b28      	ldr	r3, [pc, #160]	; (8007cd4 <prvInsertBlockIntoFreeList+0xac>)
 8007c32:	60fb      	str	r3, [r7, #12]
 8007c34:	e002      	b.n	8007c3c <prvInsertBlockIntoFreeList+0x14>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	60fb      	str	r3, [r7, #12]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d8f7      	bhi.n	8007c36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	4413      	add	r3, r2
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d108      	bne.n	8007c6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	441a      	add	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	68ba      	ldr	r2, [r7, #8]
 8007c74:	441a      	add	r2, r3
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d118      	bne.n	8007cb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	4b15      	ldr	r3, [pc, #84]	; (8007cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d00d      	beq.n	8007ca6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685a      	ldr	r2, [r3, #4]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	441a      	add	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	e008      	b.n	8007cb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ca6:	4b0c      	ldr	r3, [pc, #48]	; (8007cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	601a      	str	r2, [r3, #0]
 8007cae:	e003      	b.n	8007cb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d002      	beq.n	8007cc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cc6:	bf00      	nop
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	200013f4 	.word	0x200013f4
 8007cd8:	200013fc 	.word	0x200013fc

08007cdc <__errno>:
 8007cdc:	4b01      	ldr	r3, [pc, #4]	; (8007ce4 <__errno+0x8>)
 8007cde:	6818      	ldr	r0, [r3, #0]
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	20000090 	.word	0x20000090

08007ce8 <__libc_init_array>:
 8007ce8:	b570      	push	{r4, r5, r6, lr}
 8007cea:	4d0d      	ldr	r5, [pc, #52]	; (8007d20 <__libc_init_array+0x38>)
 8007cec:	4c0d      	ldr	r4, [pc, #52]	; (8007d24 <__libc_init_array+0x3c>)
 8007cee:	1b64      	subs	r4, r4, r5
 8007cf0:	10a4      	asrs	r4, r4, #2
 8007cf2:	2600      	movs	r6, #0
 8007cf4:	42a6      	cmp	r6, r4
 8007cf6:	d109      	bne.n	8007d0c <__libc_init_array+0x24>
 8007cf8:	4d0b      	ldr	r5, [pc, #44]	; (8007d28 <__libc_init_array+0x40>)
 8007cfa:	4c0c      	ldr	r4, [pc, #48]	; (8007d2c <__libc_init_array+0x44>)
 8007cfc:	f002 ff1c 	bl	800ab38 <_init>
 8007d00:	1b64      	subs	r4, r4, r5
 8007d02:	10a4      	asrs	r4, r4, #2
 8007d04:	2600      	movs	r6, #0
 8007d06:	42a6      	cmp	r6, r4
 8007d08:	d105      	bne.n	8007d16 <__libc_init_array+0x2e>
 8007d0a:	bd70      	pop	{r4, r5, r6, pc}
 8007d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d10:	4798      	blx	r3
 8007d12:	3601      	adds	r6, #1
 8007d14:	e7ee      	b.n	8007cf4 <__libc_init_array+0xc>
 8007d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d1a:	4798      	blx	r3
 8007d1c:	3601      	adds	r6, #1
 8007d1e:	e7f2      	b.n	8007d06 <__libc_init_array+0x1e>
 8007d20:	0800b0e4 	.word	0x0800b0e4
 8007d24:	0800b0e4 	.word	0x0800b0e4
 8007d28:	0800b0e4 	.word	0x0800b0e4
 8007d2c:	0800b0e8 	.word	0x0800b0e8

08007d30 <memcpy>:
 8007d30:	440a      	add	r2, r1
 8007d32:	4291      	cmp	r1, r2
 8007d34:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007d38:	d100      	bne.n	8007d3c <memcpy+0xc>
 8007d3a:	4770      	bx	lr
 8007d3c:	b510      	push	{r4, lr}
 8007d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d46:	4291      	cmp	r1, r2
 8007d48:	d1f9      	bne.n	8007d3e <memcpy+0xe>
 8007d4a:	bd10      	pop	{r4, pc}

08007d4c <memset>:
 8007d4c:	4402      	add	r2, r0
 8007d4e:	4603      	mov	r3, r0
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d100      	bne.n	8007d56 <memset+0xa>
 8007d54:	4770      	bx	lr
 8007d56:	f803 1b01 	strb.w	r1, [r3], #1
 8007d5a:	e7f9      	b.n	8007d50 <memset+0x4>

08007d5c <__cvt>:
 8007d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d60:	ec55 4b10 	vmov	r4, r5, d0
 8007d64:	2d00      	cmp	r5, #0
 8007d66:	460e      	mov	r6, r1
 8007d68:	4619      	mov	r1, r3
 8007d6a:	462b      	mov	r3, r5
 8007d6c:	bfbb      	ittet	lt
 8007d6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007d72:	461d      	movlt	r5, r3
 8007d74:	2300      	movge	r3, #0
 8007d76:	232d      	movlt	r3, #45	; 0x2d
 8007d78:	700b      	strb	r3, [r1, #0]
 8007d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007d80:	4691      	mov	r9, r2
 8007d82:	f023 0820 	bic.w	r8, r3, #32
 8007d86:	bfbc      	itt	lt
 8007d88:	4622      	movlt	r2, r4
 8007d8a:	4614      	movlt	r4, r2
 8007d8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d90:	d005      	beq.n	8007d9e <__cvt+0x42>
 8007d92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007d96:	d100      	bne.n	8007d9a <__cvt+0x3e>
 8007d98:	3601      	adds	r6, #1
 8007d9a:	2102      	movs	r1, #2
 8007d9c:	e000      	b.n	8007da0 <__cvt+0x44>
 8007d9e:	2103      	movs	r1, #3
 8007da0:	ab03      	add	r3, sp, #12
 8007da2:	9301      	str	r3, [sp, #4]
 8007da4:	ab02      	add	r3, sp, #8
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	ec45 4b10 	vmov	d0, r4, r5
 8007dac:	4653      	mov	r3, sl
 8007dae:	4632      	mov	r2, r6
 8007db0:	f000 fd02 	bl	80087b8 <_dtoa_r>
 8007db4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007db8:	4607      	mov	r7, r0
 8007dba:	d102      	bne.n	8007dc2 <__cvt+0x66>
 8007dbc:	f019 0f01 	tst.w	r9, #1
 8007dc0:	d022      	beq.n	8007e08 <__cvt+0xac>
 8007dc2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007dc6:	eb07 0906 	add.w	r9, r7, r6
 8007dca:	d110      	bne.n	8007dee <__cvt+0x92>
 8007dcc:	783b      	ldrb	r3, [r7, #0]
 8007dce:	2b30      	cmp	r3, #48	; 0x30
 8007dd0:	d10a      	bne.n	8007de8 <__cvt+0x8c>
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	4629      	mov	r1, r5
 8007dda:	f7f8 fe8d 	bl	8000af8 <__aeabi_dcmpeq>
 8007dde:	b918      	cbnz	r0, 8007de8 <__cvt+0x8c>
 8007de0:	f1c6 0601 	rsb	r6, r6, #1
 8007de4:	f8ca 6000 	str.w	r6, [sl]
 8007de8:	f8da 3000 	ldr.w	r3, [sl]
 8007dec:	4499      	add	r9, r3
 8007dee:	2200      	movs	r2, #0
 8007df0:	2300      	movs	r3, #0
 8007df2:	4620      	mov	r0, r4
 8007df4:	4629      	mov	r1, r5
 8007df6:	f7f8 fe7f 	bl	8000af8 <__aeabi_dcmpeq>
 8007dfa:	b108      	cbz	r0, 8007e00 <__cvt+0xa4>
 8007dfc:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e00:	2230      	movs	r2, #48	; 0x30
 8007e02:	9b03      	ldr	r3, [sp, #12]
 8007e04:	454b      	cmp	r3, r9
 8007e06:	d307      	bcc.n	8007e18 <__cvt+0xbc>
 8007e08:	9b03      	ldr	r3, [sp, #12]
 8007e0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e0c:	1bdb      	subs	r3, r3, r7
 8007e0e:	4638      	mov	r0, r7
 8007e10:	6013      	str	r3, [r2, #0]
 8007e12:	b004      	add	sp, #16
 8007e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e18:	1c59      	adds	r1, r3, #1
 8007e1a:	9103      	str	r1, [sp, #12]
 8007e1c:	701a      	strb	r2, [r3, #0]
 8007e1e:	e7f0      	b.n	8007e02 <__cvt+0xa6>

08007e20 <__exponent>:
 8007e20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e22:	4603      	mov	r3, r0
 8007e24:	2900      	cmp	r1, #0
 8007e26:	bfb8      	it	lt
 8007e28:	4249      	neglt	r1, r1
 8007e2a:	f803 2b02 	strb.w	r2, [r3], #2
 8007e2e:	bfb4      	ite	lt
 8007e30:	222d      	movlt	r2, #45	; 0x2d
 8007e32:	222b      	movge	r2, #43	; 0x2b
 8007e34:	2909      	cmp	r1, #9
 8007e36:	7042      	strb	r2, [r0, #1]
 8007e38:	dd2a      	ble.n	8007e90 <__exponent+0x70>
 8007e3a:	f10d 0407 	add.w	r4, sp, #7
 8007e3e:	46a4      	mov	ip, r4
 8007e40:	270a      	movs	r7, #10
 8007e42:	46a6      	mov	lr, r4
 8007e44:	460a      	mov	r2, r1
 8007e46:	fb91 f6f7 	sdiv	r6, r1, r7
 8007e4a:	fb07 1516 	mls	r5, r7, r6, r1
 8007e4e:	3530      	adds	r5, #48	; 0x30
 8007e50:	2a63      	cmp	r2, #99	; 0x63
 8007e52:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007e56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007e5a:	4631      	mov	r1, r6
 8007e5c:	dcf1      	bgt.n	8007e42 <__exponent+0x22>
 8007e5e:	3130      	adds	r1, #48	; 0x30
 8007e60:	f1ae 0502 	sub.w	r5, lr, #2
 8007e64:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007e68:	1c44      	adds	r4, r0, #1
 8007e6a:	4629      	mov	r1, r5
 8007e6c:	4561      	cmp	r1, ip
 8007e6e:	d30a      	bcc.n	8007e86 <__exponent+0x66>
 8007e70:	f10d 0209 	add.w	r2, sp, #9
 8007e74:	eba2 020e 	sub.w	r2, r2, lr
 8007e78:	4565      	cmp	r5, ip
 8007e7a:	bf88      	it	hi
 8007e7c:	2200      	movhi	r2, #0
 8007e7e:	4413      	add	r3, r2
 8007e80:	1a18      	subs	r0, r3, r0
 8007e82:	b003      	add	sp, #12
 8007e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e8a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007e8e:	e7ed      	b.n	8007e6c <__exponent+0x4c>
 8007e90:	2330      	movs	r3, #48	; 0x30
 8007e92:	3130      	adds	r1, #48	; 0x30
 8007e94:	7083      	strb	r3, [r0, #2]
 8007e96:	70c1      	strb	r1, [r0, #3]
 8007e98:	1d03      	adds	r3, r0, #4
 8007e9a:	e7f1      	b.n	8007e80 <__exponent+0x60>

08007e9c <_printf_float>:
 8007e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea0:	ed2d 8b02 	vpush	{d8}
 8007ea4:	b08d      	sub	sp, #52	; 0x34
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007eac:	4616      	mov	r6, r2
 8007eae:	461f      	mov	r7, r3
 8007eb0:	4605      	mov	r5, r0
 8007eb2:	f001 fb65 	bl	8009580 <_localeconv_r>
 8007eb6:	f8d0 a000 	ldr.w	sl, [r0]
 8007eba:	4650      	mov	r0, sl
 8007ebc:	f7f8 f9a0 	bl	8000200 <strlen>
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ec4:	6823      	ldr	r3, [r4, #0]
 8007ec6:	9305      	str	r3, [sp, #20]
 8007ec8:	f8d8 3000 	ldr.w	r3, [r8]
 8007ecc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007ed0:	3307      	adds	r3, #7
 8007ed2:	f023 0307 	bic.w	r3, r3, #7
 8007ed6:	f103 0208 	add.w	r2, r3, #8
 8007eda:	f8c8 2000 	str.w	r2, [r8]
 8007ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007ee6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007eea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007eee:	9307      	str	r3, [sp, #28]
 8007ef0:	f8cd 8018 	str.w	r8, [sp, #24]
 8007ef4:	ee08 0a10 	vmov	s16, r0
 8007ef8:	4b9f      	ldr	r3, [pc, #636]	; (8008178 <_printf_float+0x2dc>)
 8007efa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007efe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f02:	f7f8 fe2b 	bl	8000b5c <__aeabi_dcmpun>
 8007f06:	bb88      	cbnz	r0, 8007f6c <_printf_float+0xd0>
 8007f08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f0c:	4b9a      	ldr	r3, [pc, #616]	; (8008178 <_printf_float+0x2dc>)
 8007f0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f12:	f7f8 fe05 	bl	8000b20 <__aeabi_dcmple>
 8007f16:	bb48      	cbnz	r0, 8007f6c <_printf_float+0xd0>
 8007f18:	2200      	movs	r2, #0
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	4640      	mov	r0, r8
 8007f1e:	4649      	mov	r1, r9
 8007f20:	f7f8 fdf4 	bl	8000b0c <__aeabi_dcmplt>
 8007f24:	b110      	cbz	r0, 8007f2c <_printf_float+0x90>
 8007f26:	232d      	movs	r3, #45	; 0x2d
 8007f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f2c:	4b93      	ldr	r3, [pc, #588]	; (800817c <_printf_float+0x2e0>)
 8007f2e:	4894      	ldr	r0, [pc, #592]	; (8008180 <_printf_float+0x2e4>)
 8007f30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007f34:	bf94      	ite	ls
 8007f36:	4698      	movls	r8, r3
 8007f38:	4680      	movhi	r8, r0
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	6123      	str	r3, [r4, #16]
 8007f3e:	9b05      	ldr	r3, [sp, #20]
 8007f40:	f023 0204 	bic.w	r2, r3, #4
 8007f44:	6022      	str	r2, [r4, #0]
 8007f46:	f04f 0900 	mov.w	r9, #0
 8007f4a:	9700      	str	r7, [sp, #0]
 8007f4c:	4633      	mov	r3, r6
 8007f4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007f50:	4621      	mov	r1, r4
 8007f52:	4628      	mov	r0, r5
 8007f54:	f000 f9d8 	bl	8008308 <_printf_common>
 8007f58:	3001      	adds	r0, #1
 8007f5a:	f040 8090 	bne.w	800807e <_printf_float+0x1e2>
 8007f5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f62:	b00d      	add	sp, #52	; 0x34
 8007f64:	ecbd 8b02 	vpop	{d8}
 8007f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f6c:	4642      	mov	r2, r8
 8007f6e:	464b      	mov	r3, r9
 8007f70:	4640      	mov	r0, r8
 8007f72:	4649      	mov	r1, r9
 8007f74:	f7f8 fdf2 	bl	8000b5c <__aeabi_dcmpun>
 8007f78:	b140      	cbz	r0, 8007f8c <_printf_float+0xf0>
 8007f7a:	464b      	mov	r3, r9
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	bfbc      	itt	lt
 8007f80:	232d      	movlt	r3, #45	; 0x2d
 8007f82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007f86:	487f      	ldr	r0, [pc, #508]	; (8008184 <_printf_float+0x2e8>)
 8007f88:	4b7f      	ldr	r3, [pc, #508]	; (8008188 <_printf_float+0x2ec>)
 8007f8a:	e7d1      	b.n	8007f30 <_printf_float+0x94>
 8007f8c:	6863      	ldr	r3, [r4, #4]
 8007f8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007f92:	9206      	str	r2, [sp, #24]
 8007f94:	1c5a      	adds	r2, r3, #1
 8007f96:	d13f      	bne.n	8008018 <_printf_float+0x17c>
 8007f98:	2306      	movs	r3, #6
 8007f9a:	6063      	str	r3, [r4, #4]
 8007f9c:	9b05      	ldr	r3, [sp, #20]
 8007f9e:	6861      	ldr	r1, [r4, #4]
 8007fa0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	9303      	str	r3, [sp, #12]
 8007fa8:	ab0a      	add	r3, sp, #40	; 0x28
 8007faa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007fae:	ab09      	add	r3, sp, #36	; 0x24
 8007fb0:	ec49 8b10 	vmov	d0, r8, r9
 8007fb4:	9300      	str	r3, [sp, #0]
 8007fb6:	6022      	str	r2, [r4, #0]
 8007fb8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007fbc:	4628      	mov	r0, r5
 8007fbe:	f7ff fecd 	bl	8007d5c <__cvt>
 8007fc2:	9b06      	ldr	r3, [sp, #24]
 8007fc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fc6:	2b47      	cmp	r3, #71	; 0x47
 8007fc8:	4680      	mov	r8, r0
 8007fca:	d108      	bne.n	8007fde <_printf_float+0x142>
 8007fcc:	1cc8      	adds	r0, r1, #3
 8007fce:	db02      	blt.n	8007fd6 <_printf_float+0x13a>
 8007fd0:	6863      	ldr	r3, [r4, #4]
 8007fd2:	4299      	cmp	r1, r3
 8007fd4:	dd41      	ble.n	800805a <_printf_float+0x1be>
 8007fd6:	f1ab 0b02 	sub.w	fp, fp, #2
 8007fda:	fa5f fb8b 	uxtb.w	fp, fp
 8007fde:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007fe2:	d820      	bhi.n	8008026 <_printf_float+0x18a>
 8007fe4:	3901      	subs	r1, #1
 8007fe6:	465a      	mov	r2, fp
 8007fe8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007fec:	9109      	str	r1, [sp, #36]	; 0x24
 8007fee:	f7ff ff17 	bl	8007e20 <__exponent>
 8007ff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ff4:	1813      	adds	r3, r2, r0
 8007ff6:	2a01      	cmp	r2, #1
 8007ff8:	4681      	mov	r9, r0
 8007ffa:	6123      	str	r3, [r4, #16]
 8007ffc:	dc02      	bgt.n	8008004 <_printf_float+0x168>
 8007ffe:	6822      	ldr	r2, [r4, #0]
 8008000:	07d2      	lsls	r2, r2, #31
 8008002:	d501      	bpl.n	8008008 <_printf_float+0x16c>
 8008004:	3301      	adds	r3, #1
 8008006:	6123      	str	r3, [r4, #16]
 8008008:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800800c:	2b00      	cmp	r3, #0
 800800e:	d09c      	beq.n	8007f4a <_printf_float+0xae>
 8008010:	232d      	movs	r3, #45	; 0x2d
 8008012:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008016:	e798      	b.n	8007f4a <_printf_float+0xae>
 8008018:	9a06      	ldr	r2, [sp, #24]
 800801a:	2a47      	cmp	r2, #71	; 0x47
 800801c:	d1be      	bne.n	8007f9c <_printf_float+0x100>
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1bc      	bne.n	8007f9c <_printf_float+0x100>
 8008022:	2301      	movs	r3, #1
 8008024:	e7b9      	b.n	8007f9a <_printf_float+0xfe>
 8008026:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800802a:	d118      	bne.n	800805e <_printf_float+0x1c2>
 800802c:	2900      	cmp	r1, #0
 800802e:	6863      	ldr	r3, [r4, #4]
 8008030:	dd0b      	ble.n	800804a <_printf_float+0x1ae>
 8008032:	6121      	str	r1, [r4, #16]
 8008034:	b913      	cbnz	r3, 800803c <_printf_float+0x1a0>
 8008036:	6822      	ldr	r2, [r4, #0]
 8008038:	07d0      	lsls	r0, r2, #31
 800803a:	d502      	bpl.n	8008042 <_printf_float+0x1a6>
 800803c:	3301      	adds	r3, #1
 800803e:	440b      	add	r3, r1
 8008040:	6123      	str	r3, [r4, #16]
 8008042:	65a1      	str	r1, [r4, #88]	; 0x58
 8008044:	f04f 0900 	mov.w	r9, #0
 8008048:	e7de      	b.n	8008008 <_printf_float+0x16c>
 800804a:	b913      	cbnz	r3, 8008052 <_printf_float+0x1b6>
 800804c:	6822      	ldr	r2, [r4, #0]
 800804e:	07d2      	lsls	r2, r2, #31
 8008050:	d501      	bpl.n	8008056 <_printf_float+0x1ba>
 8008052:	3302      	adds	r3, #2
 8008054:	e7f4      	b.n	8008040 <_printf_float+0x1a4>
 8008056:	2301      	movs	r3, #1
 8008058:	e7f2      	b.n	8008040 <_printf_float+0x1a4>
 800805a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800805e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008060:	4299      	cmp	r1, r3
 8008062:	db05      	blt.n	8008070 <_printf_float+0x1d4>
 8008064:	6823      	ldr	r3, [r4, #0]
 8008066:	6121      	str	r1, [r4, #16]
 8008068:	07d8      	lsls	r0, r3, #31
 800806a:	d5ea      	bpl.n	8008042 <_printf_float+0x1a6>
 800806c:	1c4b      	adds	r3, r1, #1
 800806e:	e7e7      	b.n	8008040 <_printf_float+0x1a4>
 8008070:	2900      	cmp	r1, #0
 8008072:	bfd4      	ite	le
 8008074:	f1c1 0202 	rsble	r2, r1, #2
 8008078:	2201      	movgt	r2, #1
 800807a:	4413      	add	r3, r2
 800807c:	e7e0      	b.n	8008040 <_printf_float+0x1a4>
 800807e:	6823      	ldr	r3, [r4, #0]
 8008080:	055a      	lsls	r2, r3, #21
 8008082:	d407      	bmi.n	8008094 <_printf_float+0x1f8>
 8008084:	6923      	ldr	r3, [r4, #16]
 8008086:	4642      	mov	r2, r8
 8008088:	4631      	mov	r1, r6
 800808a:	4628      	mov	r0, r5
 800808c:	47b8      	blx	r7
 800808e:	3001      	adds	r0, #1
 8008090:	d12c      	bne.n	80080ec <_printf_float+0x250>
 8008092:	e764      	b.n	8007f5e <_printf_float+0xc2>
 8008094:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008098:	f240 80e0 	bls.w	800825c <_printf_float+0x3c0>
 800809c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080a0:	2200      	movs	r2, #0
 80080a2:	2300      	movs	r3, #0
 80080a4:	f7f8 fd28 	bl	8000af8 <__aeabi_dcmpeq>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d034      	beq.n	8008116 <_printf_float+0x27a>
 80080ac:	4a37      	ldr	r2, [pc, #220]	; (800818c <_printf_float+0x2f0>)
 80080ae:	2301      	movs	r3, #1
 80080b0:	4631      	mov	r1, r6
 80080b2:	4628      	mov	r0, r5
 80080b4:	47b8      	blx	r7
 80080b6:	3001      	adds	r0, #1
 80080b8:	f43f af51 	beq.w	8007f5e <_printf_float+0xc2>
 80080bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080c0:	429a      	cmp	r2, r3
 80080c2:	db02      	blt.n	80080ca <_printf_float+0x22e>
 80080c4:	6823      	ldr	r3, [r4, #0]
 80080c6:	07d8      	lsls	r0, r3, #31
 80080c8:	d510      	bpl.n	80080ec <_printf_float+0x250>
 80080ca:	ee18 3a10 	vmov	r3, s16
 80080ce:	4652      	mov	r2, sl
 80080d0:	4631      	mov	r1, r6
 80080d2:	4628      	mov	r0, r5
 80080d4:	47b8      	blx	r7
 80080d6:	3001      	adds	r0, #1
 80080d8:	f43f af41 	beq.w	8007f5e <_printf_float+0xc2>
 80080dc:	f04f 0800 	mov.w	r8, #0
 80080e0:	f104 091a 	add.w	r9, r4, #26
 80080e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080e6:	3b01      	subs	r3, #1
 80080e8:	4543      	cmp	r3, r8
 80080ea:	dc09      	bgt.n	8008100 <_printf_float+0x264>
 80080ec:	6823      	ldr	r3, [r4, #0]
 80080ee:	079b      	lsls	r3, r3, #30
 80080f0:	f100 8105 	bmi.w	80082fe <_printf_float+0x462>
 80080f4:	68e0      	ldr	r0, [r4, #12]
 80080f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080f8:	4298      	cmp	r0, r3
 80080fa:	bfb8      	it	lt
 80080fc:	4618      	movlt	r0, r3
 80080fe:	e730      	b.n	8007f62 <_printf_float+0xc6>
 8008100:	2301      	movs	r3, #1
 8008102:	464a      	mov	r2, r9
 8008104:	4631      	mov	r1, r6
 8008106:	4628      	mov	r0, r5
 8008108:	47b8      	blx	r7
 800810a:	3001      	adds	r0, #1
 800810c:	f43f af27 	beq.w	8007f5e <_printf_float+0xc2>
 8008110:	f108 0801 	add.w	r8, r8, #1
 8008114:	e7e6      	b.n	80080e4 <_printf_float+0x248>
 8008116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008118:	2b00      	cmp	r3, #0
 800811a:	dc39      	bgt.n	8008190 <_printf_float+0x2f4>
 800811c:	4a1b      	ldr	r2, [pc, #108]	; (800818c <_printf_float+0x2f0>)
 800811e:	2301      	movs	r3, #1
 8008120:	4631      	mov	r1, r6
 8008122:	4628      	mov	r0, r5
 8008124:	47b8      	blx	r7
 8008126:	3001      	adds	r0, #1
 8008128:	f43f af19 	beq.w	8007f5e <_printf_float+0xc2>
 800812c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008130:	4313      	orrs	r3, r2
 8008132:	d102      	bne.n	800813a <_printf_float+0x29e>
 8008134:	6823      	ldr	r3, [r4, #0]
 8008136:	07d9      	lsls	r1, r3, #31
 8008138:	d5d8      	bpl.n	80080ec <_printf_float+0x250>
 800813a:	ee18 3a10 	vmov	r3, s16
 800813e:	4652      	mov	r2, sl
 8008140:	4631      	mov	r1, r6
 8008142:	4628      	mov	r0, r5
 8008144:	47b8      	blx	r7
 8008146:	3001      	adds	r0, #1
 8008148:	f43f af09 	beq.w	8007f5e <_printf_float+0xc2>
 800814c:	f04f 0900 	mov.w	r9, #0
 8008150:	f104 0a1a 	add.w	sl, r4, #26
 8008154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008156:	425b      	negs	r3, r3
 8008158:	454b      	cmp	r3, r9
 800815a:	dc01      	bgt.n	8008160 <_printf_float+0x2c4>
 800815c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800815e:	e792      	b.n	8008086 <_printf_float+0x1ea>
 8008160:	2301      	movs	r3, #1
 8008162:	4652      	mov	r2, sl
 8008164:	4631      	mov	r1, r6
 8008166:	4628      	mov	r0, r5
 8008168:	47b8      	blx	r7
 800816a:	3001      	adds	r0, #1
 800816c:	f43f aef7 	beq.w	8007f5e <_printf_float+0xc2>
 8008170:	f109 0901 	add.w	r9, r9, #1
 8008174:	e7ee      	b.n	8008154 <_printf_float+0x2b8>
 8008176:	bf00      	nop
 8008178:	7fefffff 	.word	0x7fefffff
 800817c:	0800ad04 	.word	0x0800ad04
 8008180:	0800ad08 	.word	0x0800ad08
 8008184:	0800ad10 	.word	0x0800ad10
 8008188:	0800ad0c 	.word	0x0800ad0c
 800818c:	0800ad14 	.word	0x0800ad14
 8008190:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008192:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008194:	429a      	cmp	r2, r3
 8008196:	bfa8      	it	ge
 8008198:	461a      	movge	r2, r3
 800819a:	2a00      	cmp	r2, #0
 800819c:	4691      	mov	r9, r2
 800819e:	dc37      	bgt.n	8008210 <_printf_float+0x374>
 80081a0:	f04f 0b00 	mov.w	fp, #0
 80081a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081a8:	f104 021a 	add.w	r2, r4, #26
 80081ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081ae:	9305      	str	r3, [sp, #20]
 80081b0:	eba3 0309 	sub.w	r3, r3, r9
 80081b4:	455b      	cmp	r3, fp
 80081b6:	dc33      	bgt.n	8008220 <_printf_float+0x384>
 80081b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081bc:	429a      	cmp	r2, r3
 80081be:	db3b      	blt.n	8008238 <_printf_float+0x39c>
 80081c0:	6823      	ldr	r3, [r4, #0]
 80081c2:	07da      	lsls	r2, r3, #31
 80081c4:	d438      	bmi.n	8008238 <_printf_float+0x39c>
 80081c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081c8:	9a05      	ldr	r2, [sp, #20]
 80081ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081cc:	1a9a      	subs	r2, r3, r2
 80081ce:	eba3 0901 	sub.w	r9, r3, r1
 80081d2:	4591      	cmp	r9, r2
 80081d4:	bfa8      	it	ge
 80081d6:	4691      	movge	r9, r2
 80081d8:	f1b9 0f00 	cmp.w	r9, #0
 80081dc:	dc35      	bgt.n	800824a <_printf_float+0x3ae>
 80081de:	f04f 0800 	mov.w	r8, #0
 80081e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081e6:	f104 0a1a 	add.w	sl, r4, #26
 80081ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081ee:	1a9b      	subs	r3, r3, r2
 80081f0:	eba3 0309 	sub.w	r3, r3, r9
 80081f4:	4543      	cmp	r3, r8
 80081f6:	f77f af79 	ble.w	80080ec <_printf_float+0x250>
 80081fa:	2301      	movs	r3, #1
 80081fc:	4652      	mov	r2, sl
 80081fe:	4631      	mov	r1, r6
 8008200:	4628      	mov	r0, r5
 8008202:	47b8      	blx	r7
 8008204:	3001      	adds	r0, #1
 8008206:	f43f aeaa 	beq.w	8007f5e <_printf_float+0xc2>
 800820a:	f108 0801 	add.w	r8, r8, #1
 800820e:	e7ec      	b.n	80081ea <_printf_float+0x34e>
 8008210:	4613      	mov	r3, r2
 8008212:	4631      	mov	r1, r6
 8008214:	4642      	mov	r2, r8
 8008216:	4628      	mov	r0, r5
 8008218:	47b8      	blx	r7
 800821a:	3001      	adds	r0, #1
 800821c:	d1c0      	bne.n	80081a0 <_printf_float+0x304>
 800821e:	e69e      	b.n	8007f5e <_printf_float+0xc2>
 8008220:	2301      	movs	r3, #1
 8008222:	4631      	mov	r1, r6
 8008224:	4628      	mov	r0, r5
 8008226:	9205      	str	r2, [sp, #20]
 8008228:	47b8      	blx	r7
 800822a:	3001      	adds	r0, #1
 800822c:	f43f ae97 	beq.w	8007f5e <_printf_float+0xc2>
 8008230:	9a05      	ldr	r2, [sp, #20]
 8008232:	f10b 0b01 	add.w	fp, fp, #1
 8008236:	e7b9      	b.n	80081ac <_printf_float+0x310>
 8008238:	ee18 3a10 	vmov	r3, s16
 800823c:	4652      	mov	r2, sl
 800823e:	4631      	mov	r1, r6
 8008240:	4628      	mov	r0, r5
 8008242:	47b8      	blx	r7
 8008244:	3001      	adds	r0, #1
 8008246:	d1be      	bne.n	80081c6 <_printf_float+0x32a>
 8008248:	e689      	b.n	8007f5e <_printf_float+0xc2>
 800824a:	9a05      	ldr	r2, [sp, #20]
 800824c:	464b      	mov	r3, r9
 800824e:	4442      	add	r2, r8
 8008250:	4631      	mov	r1, r6
 8008252:	4628      	mov	r0, r5
 8008254:	47b8      	blx	r7
 8008256:	3001      	adds	r0, #1
 8008258:	d1c1      	bne.n	80081de <_printf_float+0x342>
 800825a:	e680      	b.n	8007f5e <_printf_float+0xc2>
 800825c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800825e:	2a01      	cmp	r2, #1
 8008260:	dc01      	bgt.n	8008266 <_printf_float+0x3ca>
 8008262:	07db      	lsls	r3, r3, #31
 8008264:	d538      	bpl.n	80082d8 <_printf_float+0x43c>
 8008266:	2301      	movs	r3, #1
 8008268:	4642      	mov	r2, r8
 800826a:	4631      	mov	r1, r6
 800826c:	4628      	mov	r0, r5
 800826e:	47b8      	blx	r7
 8008270:	3001      	adds	r0, #1
 8008272:	f43f ae74 	beq.w	8007f5e <_printf_float+0xc2>
 8008276:	ee18 3a10 	vmov	r3, s16
 800827a:	4652      	mov	r2, sl
 800827c:	4631      	mov	r1, r6
 800827e:	4628      	mov	r0, r5
 8008280:	47b8      	blx	r7
 8008282:	3001      	adds	r0, #1
 8008284:	f43f ae6b 	beq.w	8007f5e <_printf_float+0xc2>
 8008288:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800828c:	2200      	movs	r2, #0
 800828e:	2300      	movs	r3, #0
 8008290:	f7f8 fc32 	bl	8000af8 <__aeabi_dcmpeq>
 8008294:	b9d8      	cbnz	r0, 80082ce <_printf_float+0x432>
 8008296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008298:	f108 0201 	add.w	r2, r8, #1
 800829c:	3b01      	subs	r3, #1
 800829e:	4631      	mov	r1, r6
 80082a0:	4628      	mov	r0, r5
 80082a2:	47b8      	blx	r7
 80082a4:	3001      	adds	r0, #1
 80082a6:	d10e      	bne.n	80082c6 <_printf_float+0x42a>
 80082a8:	e659      	b.n	8007f5e <_printf_float+0xc2>
 80082aa:	2301      	movs	r3, #1
 80082ac:	4652      	mov	r2, sl
 80082ae:	4631      	mov	r1, r6
 80082b0:	4628      	mov	r0, r5
 80082b2:	47b8      	blx	r7
 80082b4:	3001      	adds	r0, #1
 80082b6:	f43f ae52 	beq.w	8007f5e <_printf_float+0xc2>
 80082ba:	f108 0801 	add.w	r8, r8, #1
 80082be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082c0:	3b01      	subs	r3, #1
 80082c2:	4543      	cmp	r3, r8
 80082c4:	dcf1      	bgt.n	80082aa <_printf_float+0x40e>
 80082c6:	464b      	mov	r3, r9
 80082c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80082cc:	e6dc      	b.n	8008088 <_printf_float+0x1ec>
 80082ce:	f04f 0800 	mov.w	r8, #0
 80082d2:	f104 0a1a 	add.w	sl, r4, #26
 80082d6:	e7f2      	b.n	80082be <_printf_float+0x422>
 80082d8:	2301      	movs	r3, #1
 80082da:	4642      	mov	r2, r8
 80082dc:	e7df      	b.n	800829e <_printf_float+0x402>
 80082de:	2301      	movs	r3, #1
 80082e0:	464a      	mov	r2, r9
 80082e2:	4631      	mov	r1, r6
 80082e4:	4628      	mov	r0, r5
 80082e6:	47b8      	blx	r7
 80082e8:	3001      	adds	r0, #1
 80082ea:	f43f ae38 	beq.w	8007f5e <_printf_float+0xc2>
 80082ee:	f108 0801 	add.w	r8, r8, #1
 80082f2:	68e3      	ldr	r3, [r4, #12]
 80082f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082f6:	1a5b      	subs	r3, r3, r1
 80082f8:	4543      	cmp	r3, r8
 80082fa:	dcf0      	bgt.n	80082de <_printf_float+0x442>
 80082fc:	e6fa      	b.n	80080f4 <_printf_float+0x258>
 80082fe:	f04f 0800 	mov.w	r8, #0
 8008302:	f104 0919 	add.w	r9, r4, #25
 8008306:	e7f4      	b.n	80082f2 <_printf_float+0x456>

08008308 <_printf_common>:
 8008308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800830c:	4616      	mov	r6, r2
 800830e:	4699      	mov	r9, r3
 8008310:	688a      	ldr	r2, [r1, #8]
 8008312:	690b      	ldr	r3, [r1, #16]
 8008314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008318:	4293      	cmp	r3, r2
 800831a:	bfb8      	it	lt
 800831c:	4613      	movlt	r3, r2
 800831e:	6033      	str	r3, [r6, #0]
 8008320:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008324:	4607      	mov	r7, r0
 8008326:	460c      	mov	r4, r1
 8008328:	b10a      	cbz	r2, 800832e <_printf_common+0x26>
 800832a:	3301      	adds	r3, #1
 800832c:	6033      	str	r3, [r6, #0]
 800832e:	6823      	ldr	r3, [r4, #0]
 8008330:	0699      	lsls	r1, r3, #26
 8008332:	bf42      	ittt	mi
 8008334:	6833      	ldrmi	r3, [r6, #0]
 8008336:	3302      	addmi	r3, #2
 8008338:	6033      	strmi	r3, [r6, #0]
 800833a:	6825      	ldr	r5, [r4, #0]
 800833c:	f015 0506 	ands.w	r5, r5, #6
 8008340:	d106      	bne.n	8008350 <_printf_common+0x48>
 8008342:	f104 0a19 	add.w	sl, r4, #25
 8008346:	68e3      	ldr	r3, [r4, #12]
 8008348:	6832      	ldr	r2, [r6, #0]
 800834a:	1a9b      	subs	r3, r3, r2
 800834c:	42ab      	cmp	r3, r5
 800834e:	dc26      	bgt.n	800839e <_printf_common+0x96>
 8008350:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008354:	1e13      	subs	r3, r2, #0
 8008356:	6822      	ldr	r2, [r4, #0]
 8008358:	bf18      	it	ne
 800835a:	2301      	movne	r3, #1
 800835c:	0692      	lsls	r2, r2, #26
 800835e:	d42b      	bmi.n	80083b8 <_printf_common+0xb0>
 8008360:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008364:	4649      	mov	r1, r9
 8008366:	4638      	mov	r0, r7
 8008368:	47c0      	blx	r8
 800836a:	3001      	adds	r0, #1
 800836c:	d01e      	beq.n	80083ac <_printf_common+0xa4>
 800836e:	6823      	ldr	r3, [r4, #0]
 8008370:	68e5      	ldr	r5, [r4, #12]
 8008372:	6832      	ldr	r2, [r6, #0]
 8008374:	f003 0306 	and.w	r3, r3, #6
 8008378:	2b04      	cmp	r3, #4
 800837a:	bf08      	it	eq
 800837c:	1aad      	subeq	r5, r5, r2
 800837e:	68a3      	ldr	r3, [r4, #8]
 8008380:	6922      	ldr	r2, [r4, #16]
 8008382:	bf0c      	ite	eq
 8008384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008388:	2500      	movne	r5, #0
 800838a:	4293      	cmp	r3, r2
 800838c:	bfc4      	itt	gt
 800838e:	1a9b      	subgt	r3, r3, r2
 8008390:	18ed      	addgt	r5, r5, r3
 8008392:	2600      	movs	r6, #0
 8008394:	341a      	adds	r4, #26
 8008396:	42b5      	cmp	r5, r6
 8008398:	d11a      	bne.n	80083d0 <_printf_common+0xc8>
 800839a:	2000      	movs	r0, #0
 800839c:	e008      	b.n	80083b0 <_printf_common+0xa8>
 800839e:	2301      	movs	r3, #1
 80083a0:	4652      	mov	r2, sl
 80083a2:	4649      	mov	r1, r9
 80083a4:	4638      	mov	r0, r7
 80083a6:	47c0      	blx	r8
 80083a8:	3001      	adds	r0, #1
 80083aa:	d103      	bne.n	80083b4 <_printf_common+0xac>
 80083ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083b4:	3501      	adds	r5, #1
 80083b6:	e7c6      	b.n	8008346 <_printf_common+0x3e>
 80083b8:	18e1      	adds	r1, r4, r3
 80083ba:	1c5a      	adds	r2, r3, #1
 80083bc:	2030      	movs	r0, #48	; 0x30
 80083be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083c2:	4422      	add	r2, r4
 80083c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083cc:	3302      	adds	r3, #2
 80083ce:	e7c7      	b.n	8008360 <_printf_common+0x58>
 80083d0:	2301      	movs	r3, #1
 80083d2:	4622      	mov	r2, r4
 80083d4:	4649      	mov	r1, r9
 80083d6:	4638      	mov	r0, r7
 80083d8:	47c0      	blx	r8
 80083da:	3001      	adds	r0, #1
 80083dc:	d0e6      	beq.n	80083ac <_printf_common+0xa4>
 80083de:	3601      	adds	r6, #1
 80083e0:	e7d9      	b.n	8008396 <_printf_common+0x8e>
	...

080083e4 <_printf_i>:
 80083e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083e8:	7e0f      	ldrb	r7, [r1, #24]
 80083ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80083ec:	2f78      	cmp	r7, #120	; 0x78
 80083ee:	4691      	mov	r9, r2
 80083f0:	4680      	mov	r8, r0
 80083f2:	460c      	mov	r4, r1
 80083f4:	469a      	mov	sl, r3
 80083f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80083fa:	d807      	bhi.n	800840c <_printf_i+0x28>
 80083fc:	2f62      	cmp	r7, #98	; 0x62
 80083fe:	d80a      	bhi.n	8008416 <_printf_i+0x32>
 8008400:	2f00      	cmp	r7, #0
 8008402:	f000 80d8 	beq.w	80085b6 <_printf_i+0x1d2>
 8008406:	2f58      	cmp	r7, #88	; 0x58
 8008408:	f000 80a3 	beq.w	8008552 <_printf_i+0x16e>
 800840c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008410:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008414:	e03a      	b.n	800848c <_printf_i+0xa8>
 8008416:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800841a:	2b15      	cmp	r3, #21
 800841c:	d8f6      	bhi.n	800840c <_printf_i+0x28>
 800841e:	a101      	add	r1, pc, #4	; (adr r1, 8008424 <_printf_i+0x40>)
 8008420:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008424:	0800847d 	.word	0x0800847d
 8008428:	08008491 	.word	0x08008491
 800842c:	0800840d 	.word	0x0800840d
 8008430:	0800840d 	.word	0x0800840d
 8008434:	0800840d 	.word	0x0800840d
 8008438:	0800840d 	.word	0x0800840d
 800843c:	08008491 	.word	0x08008491
 8008440:	0800840d 	.word	0x0800840d
 8008444:	0800840d 	.word	0x0800840d
 8008448:	0800840d 	.word	0x0800840d
 800844c:	0800840d 	.word	0x0800840d
 8008450:	0800859d 	.word	0x0800859d
 8008454:	080084c1 	.word	0x080084c1
 8008458:	0800857f 	.word	0x0800857f
 800845c:	0800840d 	.word	0x0800840d
 8008460:	0800840d 	.word	0x0800840d
 8008464:	080085bf 	.word	0x080085bf
 8008468:	0800840d 	.word	0x0800840d
 800846c:	080084c1 	.word	0x080084c1
 8008470:	0800840d 	.word	0x0800840d
 8008474:	0800840d 	.word	0x0800840d
 8008478:	08008587 	.word	0x08008587
 800847c:	682b      	ldr	r3, [r5, #0]
 800847e:	1d1a      	adds	r2, r3, #4
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	602a      	str	r2, [r5, #0]
 8008484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800848c:	2301      	movs	r3, #1
 800848e:	e0a3      	b.n	80085d8 <_printf_i+0x1f4>
 8008490:	6820      	ldr	r0, [r4, #0]
 8008492:	6829      	ldr	r1, [r5, #0]
 8008494:	0606      	lsls	r6, r0, #24
 8008496:	f101 0304 	add.w	r3, r1, #4
 800849a:	d50a      	bpl.n	80084b2 <_printf_i+0xce>
 800849c:	680e      	ldr	r6, [r1, #0]
 800849e:	602b      	str	r3, [r5, #0]
 80084a0:	2e00      	cmp	r6, #0
 80084a2:	da03      	bge.n	80084ac <_printf_i+0xc8>
 80084a4:	232d      	movs	r3, #45	; 0x2d
 80084a6:	4276      	negs	r6, r6
 80084a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084ac:	485e      	ldr	r0, [pc, #376]	; (8008628 <_printf_i+0x244>)
 80084ae:	230a      	movs	r3, #10
 80084b0:	e019      	b.n	80084e6 <_printf_i+0x102>
 80084b2:	680e      	ldr	r6, [r1, #0]
 80084b4:	602b      	str	r3, [r5, #0]
 80084b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80084ba:	bf18      	it	ne
 80084bc:	b236      	sxthne	r6, r6
 80084be:	e7ef      	b.n	80084a0 <_printf_i+0xbc>
 80084c0:	682b      	ldr	r3, [r5, #0]
 80084c2:	6820      	ldr	r0, [r4, #0]
 80084c4:	1d19      	adds	r1, r3, #4
 80084c6:	6029      	str	r1, [r5, #0]
 80084c8:	0601      	lsls	r1, r0, #24
 80084ca:	d501      	bpl.n	80084d0 <_printf_i+0xec>
 80084cc:	681e      	ldr	r6, [r3, #0]
 80084ce:	e002      	b.n	80084d6 <_printf_i+0xf2>
 80084d0:	0646      	lsls	r6, r0, #25
 80084d2:	d5fb      	bpl.n	80084cc <_printf_i+0xe8>
 80084d4:	881e      	ldrh	r6, [r3, #0]
 80084d6:	4854      	ldr	r0, [pc, #336]	; (8008628 <_printf_i+0x244>)
 80084d8:	2f6f      	cmp	r7, #111	; 0x6f
 80084da:	bf0c      	ite	eq
 80084dc:	2308      	moveq	r3, #8
 80084de:	230a      	movne	r3, #10
 80084e0:	2100      	movs	r1, #0
 80084e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084e6:	6865      	ldr	r5, [r4, #4]
 80084e8:	60a5      	str	r5, [r4, #8]
 80084ea:	2d00      	cmp	r5, #0
 80084ec:	bfa2      	ittt	ge
 80084ee:	6821      	ldrge	r1, [r4, #0]
 80084f0:	f021 0104 	bicge.w	r1, r1, #4
 80084f4:	6021      	strge	r1, [r4, #0]
 80084f6:	b90e      	cbnz	r6, 80084fc <_printf_i+0x118>
 80084f8:	2d00      	cmp	r5, #0
 80084fa:	d04d      	beq.n	8008598 <_printf_i+0x1b4>
 80084fc:	4615      	mov	r5, r2
 80084fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8008502:	fb03 6711 	mls	r7, r3, r1, r6
 8008506:	5dc7      	ldrb	r7, [r0, r7]
 8008508:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800850c:	4637      	mov	r7, r6
 800850e:	42bb      	cmp	r3, r7
 8008510:	460e      	mov	r6, r1
 8008512:	d9f4      	bls.n	80084fe <_printf_i+0x11a>
 8008514:	2b08      	cmp	r3, #8
 8008516:	d10b      	bne.n	8008530 <_printf_i+0x14c>
 8008518:	6823      	ldr	r3, [r4, #0]
 800851a:	07de      	lsls	r6, r3, #31
 800851c:	d508      	bpl.n	8008530 <_printf_i+0x14c>
 800851e:	6923      	ldr	r3, [r4, #16]
 8008520:	6861      	ldr	r1, [r4, #4]
 8008522:	4299      	cmp	r1, r3
 8008524:	bfde      	ittt	le
 8008526:	2330      	movle	r3, #48	; 0x30
 8008528:	f805 3c01 	strble.w	r3, [r5, #-1]
 800852c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008530:	1b52      	subs	r2, r2, r5
 8008532:	6122      	str	r2, [r4, #16]
 8008534:	f8cd a000 	str.w	sl, [sp]
 8008538:	464b      	mov	r3, r9
 800853a:	aa03      	add	r2, sp, #12
 800853c:	4621      	mov	r1, r4
 800853e:	4640      	mov	r0, r8
 8008540:	f7ff fee2 	bl	8008308 <_printf_common>
 8008544:	3001      	adds	r0, #1
 8008546:	d14c      	bne.n	80085e2 <_printf_i+0x1fe>
 8008548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800854c:	b004      	add	sp, #16
 800854e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008552:	4835      	ldr	r0, [pc, #212]	; (8008628 <_printf_i+0x244>)
 8008554:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008558:	6829      	ldr	r1, [r5, #0]
 800855a:	6823      	ldr	r3, [r4, #0]
 800855c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008560:	6029      	str	r1, [r5, #0]
 8008562:	061d      	lsls	r5, r3, #24
 8008564:	d514      	bpl.n	8008590 <_printf_i+0x1ac>
 8008566:	07df      	lsls	r7, r3, #31
 8008568:	bf44      	itt	mi
 800856a:	f043 0320 	orrmi.w	r3, r3, #32
 800856e:	6023      	strmi	r3, [r4, #0]
 8008570:	b91e      	cbnz	r6, 800857a <_printf_i+0x196>
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	f023 0320 	bic.w	r3, r3, #32
 8008578:	6023      	str	r3, [r4, #0]
 800857a:	2310      	movs	r3, #16
 800857c:	e7b0      	b.n	80084e0 <_printf_i+0xfc>
 800857e:	6823      	ldr	r3, [r4, #0]
 8008580:	f043 0320 	orr.w	r3, r3, #32
 8008584:	6023      	str	r3, [r4, #0]
 8008586:	2378      	movs	r3, #120	; 0x78
 8008588:	4828      	ldr	r0, [pc, #160]	; (800862c <_printf_i+0x248>)
 800858a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800858e:	e7e3      	b.n	8008558 <_printf_i+0x174>
 8008590:	0659      	lsls	r1, r3, #25
 8008592:	bf48      	it	mi
 8008594:	b2b6      	uxthmi	r6, r6
 8008596:	e7e6      	b.n	8008566 <_printf_i+0x182>
 8008598:	4615      	mov	r5, r2
 800859a:	e7bb      	b.n	8008514 <_printf_i+0x130>
 800859c:	682b      	ldr	r3, [r5, #0]
 800859e:	6826      	ldr	r6, [r4, #0]
 80085a0:	6961      	ldr	r1, [r4, #20]
 80085a2:	1d18      	adds	r0, r3, #4
 80085a4:	6028      	str	r0, [r5, #0]
 80085a6:	0635      	lsls	r5, r6, #24
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	d501      	bpl.n	80085b0 <_printf_i+0x1cc>
 80085ac:	6019      	str	r1, [r3, #0]
 80085ae:	e002      	b.n	80085b6 <_printf_i+0x1d2>
 80085b0:	0670      	lsls	r0, r6, #25
 80085b2:	d5fb      	bpl.n	80085ac <_printf_i+0x1c8>
 80085b4:	8019      	strh	r1, [r3, #0]
 80085b6:	2300      	movs	r3, #0
 80085b8:	6123      	str	r3, [r4, #16]
 80085ba:	4615      	mov	r5, r2
 80085bc:	e7ba      	b.n	8008534 <_printf_i+0x150>
 80085be:	682b      	ldr	r3, [r5, #0]
 80085c0:	1d1a      	adds	r2, r3, #4
 80085c2:	602a      	str	r2, [r5, #0]
 80085c4:	681d      	ldr	r5, [r3, #0]
 80085c6:	6862      	ldr	r2, [r4, #4]
 80085c8:	2100      	movs	r1, #0
 80085ca:	4628      	mov	r0, r5
 80085cc:	f7f7 fe20 	bl	8000210 <memchr>
 80085d0:	b108      	cbz	r0, 80085d6 <_printf_i+0x1f2>
 80085d2:	1b40      	subs	r0, r0, r5
 80085d4:	6060      	str	r0, [r4, #4]
 80085d6:	6863      	ldr	r3, [r4, #4]
 80085d8:	6123      	str	r3, [r4, #16]
 80085da:	2300      	movs	r3, #0
 80085dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085e0:	e7a8      	b.n	8008534 <_printf_i+0x150>
 80085e2:	6923      	ldr	r3, [r4, #16]
 80085e4:	462a      	mov	r2, r5
 80085e6:	4649      	mov	r1, r9
 80085e8:	4640      	mov	r0, r8
 80085ea:	47d0      	blx	sl
 80085ec:	3001      	adds	r0, #1
 80085ee:	d0ab      	beq.n	8008548 <_printf_i+0x164>
 80085f0:	6823      	ldr	r3, [r4, #0]
 80085f2:	079b      	lsls	r3, r3, #30
 80085f4:	d413      	bmi.n	800861e <_printf_i+0x23a>
 80085f6:	68e0      	ldr	r0, [r4, #12]
 80085f8:	9b03      	ldr	r3, [sp, #12]
 80085fa:	4298      	cmp	r0, r3
 80085fc:	bfb8      	it	lt
 80085fe:	4618      	movlt	r0, r3
 8008600:	e7a4      	b.n	800854c <_printf_i+0x168>
 8008602:	2301      	movs	r3, #1
 8008604:	4632      	mov	r2, r6
 8008606:	4649      	mov	r1, r9
 8008608:	4640      	mov	r0, r8
 800860a:	47d0      	blx	sl
 800860c:	3001      	adds	r0, #1
 800860e:	d09b      	beq.n	8008548 <_printf_i+0x164>
 8008610:	3501      	adds	r5, #1
 8008612:	68e3      	ldr	r3, [r4, #12]
 8008614:	9903      	ldr	r1, [sp, #12]
 8008616:	1a5b      	subs	r3, r3, r1
 8008618:	42ab      	cmp	r3, r5
 800861a:	dcf2      	bgt.n	8008602 <_printf_i+0x21e>
 800861c:	e7eb      	b.n	80085f6 <_printf_i+0x212>
 800861e:	2500      	movs	r5, #0
 8008620:	f104 0619 	add.w	r6, r4, #25
 8008624:	e7f5      	b.n	8008612 <_printf_i+0x22e>
 8008626:	bf00      	nop
 8008628:	0800ad16 	.word	0x0800ad16
 800862c:	0800ad27 	.word	0x0800ad27

08008630 <iprintf>:
 8008630:	b40f      	push	{r0, r1, r2, r3}
 8008632:	4b0a      	ldr	r3, [pc, #40]	; (800865c <iprintf+0x2c>)
 8008634:	b513      	push	{r0, r1, r4, lr}
 8008636:	681c      	ldr	r4, [r3, #0]
 8008638:	b124      	cbz	r4, 8008644 <iprintf+0x14>
 800863a:	69a3      	ldr	r3, [r4, #24]
 800863c:	b913      	cbnz	r3, 8008644 <iprintf+0x14>
 800863e:	4620      	mov	r0, r4
 8008640:	f000 ff00 	bl	8009444 <__sinit>
 8008644:	ab05      	add	r3, sp, #20
 8008646:	9a04      	ldr	r2, [sp, #16]
 8008648:	68a1      	ldr	r1, [r4, #8]
 800864a:	9301      	str	r3, [sp, #4]
 800864c:	4620      	mov	r0, r4
 800864e:	f001 fda7 	bl	800a1a0 <_vfiprintf_r>
 8008652:	b002      	add	sp, #8
 8008654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008658:	b004      	add	sp, #16
 800865a:	4770      	bx	lr
 800865c:	20000090 	.word	0x20000090

08008660 <siprintf>:
 8008660:	b40e      	push	{r1, r2, r3}
 8008662:	b500      	push	{lr}
 8008664:	b09c      	sub	sp, #112	; 0x70
 8008666:	ab1d      	add	r3, sp, #116	; 0x74
 8008668:	9002      	str	r0, [sp, #8]
 800866a:	9006      	str	r0, [sp, #24]
 800866c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008670:	4809      	ldr	r0, [pc, #36]	; (8008698 <siprintf+0x38>)
 8008672:	9107      	str	r1, [sp, #28]
 8008674:	9104      	str	r1, [sp, #16]
 8008676:	4909      	ldr	r1, [pc, #36]	; (800869c <siprintf+0x3c>)
 8008678:	f853 2b04 	ldr.w	r2, [r3], #4
 800867c:	9105      	str	r1, [sp, #20]
 800867e:	6800      	ldr	r0, [r0, #0]
 8008680:	9301      	str	r3, [sp, #4]
 8008682:	a902      	add	r1, sp, #8
 8008684:	f001 fc62 	bl	8009f4c <_svfiprintf_r>
 8008688:	9b02      	ldr	r3, [sp, #8]
 800868a:	2200      	movs	r2, #0
 800868c:	701a      	strb	r2, [r3, #0]
 800868e:	b01c      	add	sp, #112	; 0x70
 8008690:	f85d eb04 	ldr.w	lr, [sp], #4
 8008694:	b003      	add	sp, #12
 8008696:	4770      	bx	lr
 8008698:	20000090 	.word	0x20000090
 800869c:	ffff0208 	.word	0xffff0208

080086a0 <quorem>:
 80086a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086a4:	6903      	ldr	r3, [r0, #16]
 80086a6:	690c      	ldr	r4, [r1, #16]
 80086a8:	42a3      	cmp	r3, r4
 80086aa:	4607      	mov	r7, r0
 80086ac:	f2c0 8081 	blt.w	80087b2 <quorem+0x112>
 80086b0:	3c01      	subs	r4, #1
 80086b2:	f101 0814 	add.w	r8, r1, #20
 80086b6:	f100 0514 	add.w	r5, r0, #20
 80086ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80086be:	9301      	str	r3, [sp, #4]
 80086c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80086c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80086c8:	3301      	adds	r3, #1
 80086ca:	429a      	cmp	r2, r3
 80086cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80086d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80086d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80086d8:	d331      	bcc.n	800873e <quorem+0x9e>
 80086da:	f04f 0e00 	mov.w	lr, #0
 80086de:	4640      	mov	r0, r8
 80086e0:	46ac      	mov	ip, r5
 80086e2:	46f2      	mov	sl, lr
 80086e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80086e8:	b293      	uxth	r3, r2
 80086ea:	fb06 e303 	mla	r3, r6, r3, lr
 80086ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	ebaa 0303 	sub.w	r3, sl, r3
 80086f8:	f8dc a000 	ldr.w	sl, [ip]
 80086fc:	0c12      	lsrs	r2, r2, #16
 80086fe:	fa13 f38a 	uxtah	r3, r3, sl
 8008702:	fb06 e202 	mla	r2, r6, r2, lr
 8008706:	9300      	str	r3, [sp, #0]
 8008708:	9b00      	ldr	r3, [sp, #0]
 800870a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800870e:	b292      	uxth	r2, r2
 8008710:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008714:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008718:	f8bd 3000 	ldrh.w	r3, [sp]
 800871c:	4581      	cmp	r9, r0
 800871e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008722:	f84c 3b04 	str.w	r3, [ip], #4
 8008726:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800872a:	d2db      	bcs.n	80086e4 <quorem+0x44>
 800872c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008730:	b92b      	cbnz	r3, 800873e <quorem+0x9e>
 8008732:	9b01      	ldr	r3, [sp, #4]
 8008734:	3b04      	subs	r3, #4
 8008736:	429d      	cmp	r5, r3
 8008738:	461a      	mov	r2, r3
 800873a:	d32e      	bcc.n	800879a <quorem+0xfa>
 800873c:	613c      	str	r4, [r7, #16]
 800873e:	4638      	mov	r0, r7
 8008740:	f001 f9b0 	bl	8009aa4 <__mcmp>
 8008744:	2800      	cmp	r0, #0
 8008746:	db24      	blt.n	8008792 <quorem+0xf2>
 8008748:	3601      	adds	r6, #1
 800874a:	4628      	mov	r0, r5
 800874c:	f04f 0c00 	mov.w	ip, #0
 8008750:	f858 2b04 	ldr.w	r2, [r8], #4
 8008754:	f8d0 e000 	ldr.w	lr, [r0]
 8008758:	b293      	uxth	r3, r2
 800875a:	ebac 0303 	sub.w	r3, ip, r3
 800875e:	0c12      	lsrs	r2, r2, #16
 8008760:	fa13 f38e 	uxtah	r3, r3, lr
 8008764:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008768:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800876c:	b29b      	uxth	r3, r3
 800876e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008772:	45c1      	cmp	r9, r8
 8008774:	f840 3b04 	str.w	r3, [r0], #4
 8008778:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800877c:	d2e8      	bcs.n	8008750 <quorem+0xb0>
 800877e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008782:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008786:	b922      	cbnz	r2, 8008792 <quorem+0xf2>
 8008788:	3b04      	subs	r3, #4
 800878a:	429d      	cmp	r5, r3
 800878c:	461a      	mov	r2, r3
 800878e:	d30a      	bcc.n	80087a6 <quorem+0x106>
 8008790:	613c      	str	r4, [r7, #16]
 8008792:	4630      	mov	r0, r6
 8008794:	b003      	add	sp, #12
 8008796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800879a:	6812      	ldr	r2, [r2, #0]
 800879c:	3b04      	subs	r3, #4
 800879e:	2a00      	cmp	r2, #0
 80087a0:	d1cc      	bne.n	800873c <quorem+0x9c>
 80087a2:	3c01      	subs	r4, #1
 80087a4:	e7c7      	b.n	8008736 <quorem+0x96>
 80087a6:	6812      	ldr	r2, [r2, #0]
 80087a8:	3b04      	subs	r3, #4
 80087aa:	2a00      	cmp	r2, #0
 80087ac:	d1f0      	bne.n	8008790 <quorem+0xf0>
 80087ae:	3c01      	subs	r4, #1
 80087b0:	e7eb      	b.n	800878a <quorem+0xea>
 80087b2:	2000      	movs	r0, #0
 80087b4:	e7ee      	b.n	8008794 <quorem+0xf4>
	...

080087b8 <_dtoa_r>:
 80087b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087bc:	ed2d 8b04 	vpush	{d8-d9}
 80087c0:	ec57 6b10 	vmov	r6, r7, d0
 80087c4:	b093      	sub	sp, #76	; 0x4c
 80087c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80087c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80087cc:	9106      	str	r1, [sp, #24]
 80087ce:	ee10 aa10 	vmov	sl, s0
 80087d2:	4604      	mov	r4, r0
 80087d4:	9209      	str	r2, [sp, #36]	; 0x24
 80087d6:	930c      	str	r3, [sp, #48]	; 0x30
 80087d8:	46bb      	mov	fp, r7
 80087da:	b975      	cbnz	r5, 80087fa <_dtoa_r+0x42>
 80087dc:	2010      	movs	r0, #16
 80087de:	f000 fed7 	bl	8009590 <malloc>
 80087e2:	4602      	mov	r2, r0
 80087e4:	6260      	str	r0, [r4, #36]	; 0x24
 80087e6:	b920      	cbnz	r0, 80087f2 <_dtoa_r+0x3a>
 80087e8:	4ba7      	ldr	r3, [pc, #668]	; (8008a88 <_dtoa_r+0x2d0>)
 80087ea:	21ea      	movs	r1, #234	; 0xea
 80087ec:	48a7      	ldr	r0, [pc, #668]	; (8008a8c <_dtoa_r+0x2d4>)
 80087ee:	f001 ff2d 	bl	800a64c <__assert_func>
 80087f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80087f6:	6005      	str	r5, [r0, #0]
 80087f8:	60c5      	str	r5, [r0, #12]
 80087fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087fc:	6819      	ldr	r1, [r3, #0]
 80087fe:	b151      	cbz	r1, 8008816 <_dtoa_r+0x5e>
 8008800:	685a      	ldr	r2, [r3, #4]
 8008802:	604a      	str	r2, [r1, #4]
 8008804:	2301      	movs	r3, #1
 8008806:	4093      	lsls	r3, r2
 8008808:	608b      	str	r3, [r1, #8]
 800880a:	4620      	mov	r0, r4
 800880c:	f000 ff08 	bl	8009620 <_Bfree>
 8008810:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008812:	2200      	movs	r2, #0
 8008814:	601a      	str	r2, [r3, #0]
 8008816:	1e3b      	subs	r3, r7, #0
 8008818:	bfaa      	itet	ge
 800881a:	2300      	movge	r3, #0
 800881c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008820:	f8c8 3000 	strge.w	r3, [r8]
 8008824:	4b9a      	ldr	r3, [pc, #616]	; (8008a90 <_dtoa_r+0x2d8>)
 8008826:	bfbc      	itt	lt
 8008828:	2201      	movlt	r2, #1
 800882a:	f8c8 2000 	strlt.w	r2, [r8]
 800882e:	ea33 030b 	bics.w	r3, r3, fp
 8008832:	d11b      	bne.n	800886c <_dtoa_r+0xb4>
 8008834:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008836:	f242 730f 	movw	r3, #9999	; 0x270f
 800883a:	6013      	str	r3, [r2, #0]
 800883c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008840:	4333      	orrs	r3, r6
 8008842:	f000 8592 	beq.w	800936a <_dtoa_r+0xbb2>
 8008846:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008848:	b963      	cbnz	r3, 8008864 <_dtoa_r+0xac>
 800884a:	4b92      	ldr	r3, [pc, #584]	; (8008a94 <_dtoa_r+0x2dc>)
 800884c:	e022      	b.n	8008894 <_dtoa_r+0xdc>
 800884e:	4b92      	ldr	r3, [pc, #584]	; (8008a98 <_dtoa_r+0x2e0>)
 8008850:	9301      	str	r3, [sp, #4]
 8008852:	3308      	adds	r3, #8
 8008854:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008856:	6013      	str	r3, [r2, #0]
 8008858:	9801      	ldr	r0, [sp, #4]
 800885a:	b013      	add	sp, #76	; 0x4c
 800885c:	ecbd 8b04 	vpop	{d8-d9}
 8008860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008864:	4b8b      	ldr	r3, [pc, #556]	; (8008a94 <_dtoa_r+0x2dc>)
 8008866:	9301      	str	r3, [sp, #4]
 8008868:	3303      	adds	r3, #3
 800886a:	e7f3      	b.n	8008854 <_dtoa_r+0x9c>
 800886c:	2200      	movs	r2, #0
 800886e:	2300      	movs	r3, #0
 8008870:	4650      	mov	r0, sl
 8008872:	4659      	mov	r1, fp
 8008874:	f7f8 f940 	bl	8000af8 <__aeabi_dcmpeq>
 8008878:	ec4b ab19 	vmov	d9, sl, fp
 800887c:	4680      	mov	r8, r0
 800887e:	b158      	cbz	r0, 8008898 <_dtoa_r+0xe0>
 8008880:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008882:	2301      	movs	r3, #1
 8008884:	6013      	str	r3, [r2, #0]
 8008886:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008888:	2b00      	cmp	r3, #0
 800888a:	f000 856b 	beq.w	8009364 <_dtoa_r+0xbac>
 800888e:	4883      	ldr	r0, [pc, #524]	; (8008a9c <_dtoa_r+0x2e4>)
 8008890:	6018      	str	r0, [r3, #0]
 8008892:	1e43      	subs	r3, r0, #1
 8008894:	9301      	str	r3, [sp, #4]
 8008896:	e7df      	b.n	8008858 <_dtoa_r+0xa0>
 8008898:	ec4b ab10 	vmov	d0, sl, fp
 800889c:	aa10      	add	r2, sp, #64	; 0x40
 800889e:	a911      	add	r1, sp, #68	; 0x44
 80088a0:	4620      	mov	r0, r4
 80088a2:	f001 f9a5 	bl	8009bf0 <__d2b>
 80088a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80088aa:	ee08 0a10 	vmov	s16, r0
 80088ae:	2d00      	cmp	r5, #0
 80088b0:	f000 8084 	beq.w	80089bc <_dtoa_r+0x204>
 80088b4:	ee19 3a90 	vmov	r3, s19
 80088b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80088c0:	4656      	mov	r6, sl
 80088c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80088c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80088ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80088ce:	4b74      	ldr	r3, [pc, #464]	; (8008aa0 <_dtoa_r+0x2e8>)
 80088d0:	2200      	movs	r2, #0
 80088d2:	4630      	mov	r0, r6
 80088d4:	4639      	mov	r1, r7
 80088d6:	f7f7 fcef 	bl	80002b8 <__aeabi_dsub>
 80088da:	a365      	add	r3, pc, #404	; (adr r3, 8008a70 <_dtoa_r+0x2b8>)
 80088dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e0:	f7f7 fea2 	bl	8000628 <__aeabi_dmul>
 80088e4:	a364      	add	r3, pc, #400	; (adr r3, 8008a78 <_dtoa_r+0x2c0>)
 80088e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ea:	f7f7 fce7 	bl	80002bc <__adddf3>
 80088ee:	4606      	mov	r6, r0
 80088f0:	4628      	mov	r0, r5
 80088f2:	460f      	mov	r7, r1
 80088f4:	f7f7 fe2e 	bl	8000554 <__aeabi_i2d>
 80088f8:	a361      	add	r3, pc, #388	; (adr r3, 8008a80 <_dtoa_r+0x2c8>)
 80088fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fe:	f7f7 fe93 	bl	8000628 <__aeabi_dmul>
 8008902:	4602      	mov	r2, r0
 8008904:	460b      	mov	r3, r1
 8008906:	4630      	mov	r0, r6
 8008908:	4639      	mov	r1, r7
 800890a:	f7f7 fcd7 	bl	80002bc <__adddf3>
 800890e:	4606      	mov	r6, r0
 8008910:	460f      	mov	r7, r1
 8008912:	f7f8 f939 	bl	8000b88 <__aeabi_d2iz>
 8008916:	2200      	movs	r2, #0
 8008918:	9000      	str	r0, [sp, #0]
 800891a:	2300      	movs	r3, #0
 800891c:	4630      	mov	r0, r6
 800891e:	4639      	mov	r1, r7
 8008920:	f7f8 f8f4 	bl	8000b0c <__aeabi_dcmplt>
 8008924:	b150      	cbz	r0, 800893c <_dtoa_r+0x184>
 8008926:	9800      	ldr	r0, [sp, #0]
 8008928:	f7f7 fe14 	bl	8000554 <__aeabi_i2d>
 800892c:	4632      	mov	r2, r6
 800892e:	463b      	mov	r3, r7
 8008930:	f7f8 f8e2 	bl	8000af8 <__aeabi_dcmpeq>
 8008934:	b910      	cbnz	r0, 800893c <_dtoa_r+0x184>
 8008936:	9b00      	ldr	r3, [sp, #0]
 8008938:	3b01      	subs	r3, #1
 800893a:	9300      	str	r3, [sp, #0]
 800893c:	9b00      	ldr	r3, [sp, #0]
 800893e:	2b16      	cmp	r3, #22
 8008940:	d85a      	bhi.n	80089f8 <_dtoa_r+0x240>
 8008942:	9a00      	ldr	r2, [sp, #0]
 8008944:	4b57      	ldr	r3, [pc, #348]	; (8008aa4 <_dtoa_r+0x2ec>)
 8008946:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800894a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894e:	ec51 0b19 	vmov	r0, r1, d9
 8008952:	f7f8 f8db 	bl	8000b0c <__aeabi_dcmplt>
 8008956:	2800      	cmp	r0, #0
 8008958:	d050      	beq.n	80089fc <_dtoa_r+0x244>
 800895a:	9b00      	ldr	r3, [sp, #0]
 800895c:	3b01      	subs	r3, #1
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	2300      	movs	r3, #0
 8008962:	930b      	str	r3, [sp, #44]	; 0x2c
 8008964:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008966:	1b5d      	subs	r5, r3, r5
 8008968:	1e6b      	subs	r3, r5, #1
 800896a:	9305      	str	r3, [sp, #20]
 800896c:	bf45      	ittet	mi
 800896e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008972:	9304      	strmi	r3, [sp, #16]
 8008974:	2300      	movpl	r3, #0
 8008976:	2300      	movmi	r3, #0
 8008978:	bf4c      	ite	mi
 800897a:	9305      	strmi	r3, [sp, #20]
 800897c:	9304      	strpl	r3, [sp, #16]
 800897e:	9b00      	ldr	r3, [sp, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	db3d      	blt.n	8008a00 <_dtoa_r+0x248>
 8008984:	9b05      	ldr	r3, [sp, #20]
 8008986:	9a00      	ldr	r2, [sp, #0]
 8008988:	920a      	str	r2, [sp, #40]	; 0x28
 800898a:	4413      	add	r3, r2
 800898c:	9305      	str	r3, [sp, #20]
 800898e:	2300      	movs	r3, #0
 8008990:	9307      	str	r3, [sp, #28]
 8008992:	9b06      	ldr	r3, [sp, #24]
 8008994:	2b09      	cmp	r3, #9
 8008996:	f200 8089 	bhi.w	8008aac <_dtoa_r+0x2f4>
 800899a:	2b05      	cmp	r3, #5
 800899c:	bfc4      	itt	gt
 800899e:	3b04      	subgt	r3, #4
 80089a0:	9306      	strgt	r3, [sp, #24]
 80089a2:	9b06      	ldr	r3, [sp, #24]
 80089a4:	f1a3 0302 	sub.w	r3, r3, #2
 80089a8:	bfcc      	ite	gt
 80089aa:	2500      	movgt	r5, #0
 80089ac:	2501      	movle	r5, #1
 80089ae:	2b03      	cmp	r3, #3
 80089b0:	f200 8087 	bhi.w	8008ac2 <_dtoa_r+0x30a>
 80089b4:	e8df f003 	tbb	[pc, r3]
 80089b8:	59383a2d 	.word	0x59383a2d
 80089bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80089c0:	441d      	add	r5, r3
 80089c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80089c6:	2b20      	cmp	r3, #32
 80089c8:	bfc1      	itttt	gt
 80089ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80089ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80089d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80089d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80089da:	bfda      	itte	le
 80089dc:	f1c3 0320 	rsble	r3, r3, #32
 80089e0:	fa06 f003 	lslle.w	r0, r6, r3
 80089e4:	4318      	orrgt	r0, r3
 80089e6:	f7f7 fda5 	bl	8000534 <__aeabi_ui2d>
 80089ea:	2301      	movs	r3, #1
 80089ec:	4606      	mov	r6, r0
 80089ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80089f2:	3d01      	subs	r5, #1
 80089f4:	930e      	str	r3, [sp, #56]	; 0x38
 80089f6:	e76a      	b.n	80088ce <_dtoa_r+0x116>
 80089f8:	2301      	movs	r3, #1
 80089fa:	e7b2      	b.n	8008962 <_dtoa_r+0x1aa>
 80089fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80089fe:	e7b1      	b.n	8008964 <_dtoa_r+0x1ac>
 8008a00:	9b04      	ldr	r3, [sp, #16]
 8008a02:	9a00      	ldr	r2, [sp, #0]
 8008a04:	1a9b      	subs	r3, r3, r2
 8008a06:	9304      	str	r3, [sp, #16]
 8008a08:	4253      	negs	r3, r2
 8008a0a:	9307      	str	r3, [sp, #28]
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	930a      	str	r3, [sp, #40]	; 0x28
 8008a10:	e7bf      	b.n	8008992 <_dtoa_r+0x1da>
 8008a12:	2300      	movs	r3, #0
 8008a14:	9308      	str	r3, [sp, #32]
 8008a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	dc55      	bgt.n	8008ac8 <_dtoa_r+0x310>
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008a22:	461a      	mov	r2, r3
 8008a24:	9209      	str	r2, [sp, #36]	; 0x24
 8008a26:	e00c      	b.n	8008a42 <_dtoa_r+0x28a>
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e7f3      	b.n	8008a14 <_dtoa_r+0x25c>
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a30:	9308      	str	r3, [sp, #32]
 8008a32:	9b00      	ldr	r3, [sp, #0]
 8008a34:	4413      	add	r3, r2
 8008a36:	9302      	str	r3, [sp, #8]
 8008a38:	3301      	adds	r3, #1
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	9303      	str	r3, [sp, #12]
 8008a3e:	bfb8      	it	lt
 8008a40:	2301      	movlt	r3, #1
 8008a42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008a44:	2200      	movs	r2, #0
 8008a46:	6042      	str	r2, [r0, #4]
 8008a48:	2204      	movs	r2, #4
 8008a4a:	f102 0614 	add.w	r6, r2, #20
 8008a4e:	429e      	cmp	r6, r3
 8008a50:	6841      	ldr	r1, [r0, #4]
 8008a52:	d93d      	bls.n	8008ad0 <_dtoa_r+0x318>
 8008a54:	4620      	mov	r0, r4
 8008a56:	f000 fda3 	bl	80095a0 <_Balloc>
 8008a5a:	9001      	str	r0, [sp, #4]
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	d13b      	bne.n	8008ad8 <_dtoa_r+0x320>
 8008a60:	4b11      	ldr	r3, [pc, #68]	; (8008aa8 <_dtoa_r+0x2f0>)
 8008a62:	4602      	mov	r2, r0
 8008a64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008a68:	e6c0      	b.n	80087ec <_dtoa_r+0x34>
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e7df      	b.n	8008a2e <_dtoa_r+0x276>
 8008a6e:	bf00      	nop
 8008a70:	636f4361 	.word	0x636f4361
 8008a74:	3fd287a7 	.word	0x3fd287a7
 8008a78:	8b60c8b3 	.word	0x8b60c8b3
 8008a7c:	3fc68a28 	.word	0x3fc68a28
 8008a80:	509f79fb 	.word	0x509f79fb
 8008a84:	3fd34413 	.word	0x3fd34413
 8008a88:	0800ad45 	.word	0x0800ad45
 8008a8c:	0800ad5c 	.word	0x0800ad5c
 8008a90:	7ff00000 	.word	0x7ff00000
 8008a94:	0800ad41 	.word	0x0800ad41
 8008a98:	0800ad38 	.word	0x0800ad38
 8008a9c:	0800ad15 	.word	0x0800ad15
 8008aa0:	3ff80000 	.word	0x3ff80000
 8008aa4:	0800aeb0 	.word	0x0800aeb0
 8008aa8:	0800adb7 	.word	0x0800adb7
 8008aac:	2501      	movs	r5, #1
 8008aae:	2300      	movs	r3, #0
 8008ab0:	9306      	str	r3, [sp, #24]
 8008ab2:	9508      	str	r5, [sp, #32]
 8008ab4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ab8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008abc:	2200      	movs	r2, #0
 8008abe:	2312      	movs	r3, #18
 8008ac0:	e7b0      	b.n	8008a24 <_dtoa_r+0x26c>
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	9308      	str	r3, [sp, #32]
 8008ac6:	e7f5      	b.n	8008ab4 <_dtoa_r+0x2fc>
 8008ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008ace:	e7b8      	b.n	8008a42 <_dtoa_r+0x28a>
 8008ad0:	3101      	adds	r1, #1
 8008ad2:	6041      	str	r1, [r0, #4]
 8008ad4:	0052      	lsls	r2, r2, #1
 8008ad6:	e7b8      	b.n	8008a4a <_dtoa_r+0x292>
 8008ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ada:	9a01      	ldr	r2, [sp, #4]
 8008adc:	601a      	str	r2, [r3, #0]
 8008ade:	9b03      	ldr	r3, [sp, #12]
 8008ae0:	2b0e      	cmp	r3, #14
 8008ae2:	f200 809d 	bhi.w	8008c20 <_dtoa_r+0x468>
 8008ae6:	2d00      	cmp	r5, #0
 8008ae8:	f000 809a 	beq.w	8008c20 <_dtoa_r+0x468>
 8008aec:	9b00      	ldr	r3, [sp, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	dd32      	ble.n	8008b58 <_dtoa_r+0x3a0>
 8008af2:	4ab7      	ldr	r2, [pc, #732]	; (8008dd0 <_dtoa_r+0x618>)
 8008af4:	f003 030f 	and.w	r3, r3, #15
 8008af8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008afc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b00:	9b00      	ldr	r3, [sp, #0]
 8008b02:	05d8      	lsls	r0, r3, #23
 8008b04:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008b08:	d516      	bpl.n	8008b38 <_dtoa_r+0x380>
 8008b0a:	4bb2      	ldr	r3, [pc, #712]	; (8008dd4 <_dtoa_r+0x61c>)
 8008b0c:	ec51 0b19 	vmov	r0, r1, d9
 8008b10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b14:	f7f7 feb2 	bl	800087c <__aeabi_ddiv>
 8008b18:	f007 070f 	and.w	r7, r7, #15
 8008b1c:	4682      	mov	sl, r0
 8008b1e:	468b      	mov	fp, r1
 8008b20:	2503      	movs	r5, #3
 8008b22:	4eac      	ldr	r6, [pc, #688]	; (8008dd4 <_dtoa_r+0x61c>)
 8008b24:	b957      	cbnz	r7, 8008b3c <_dtoa_r+0x384>
 8008b26:	4642      	mov	r2, r8
 8008b28:	464b      	mov	r3, r9
 8008b2a:	4650      	mov	r0, sl
 8008b2c:	4659      	mov	r1, fp
 8008b2e:	f7f7 fea5 	bl	800087c <__aeabi_ddiv>
 8008b32:	4682      	mov	sl, r0
 8008b34:	468b      	mov	fp, r1
 8008b36:	e028      	b.n	8008b8a <_dtoa_r+0x3d2>
 8008b38:	2502      	movs	r5, #2
 8008b3a:	e7f2      	b.n	8008b22 <_dtoa_r+0x36a>
 8008b3c:	07f9      	lsls	r1, r7, #31
 8008b3e:	d508      	bpl.n	8008b52 <_dtoa_r+0x39a>
 8008b40:	4640      	mov	r0, r8
 8008b42:	4649      	mov	r1, r9
 8008b44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008b48:	f7f7 fd6e 	bl	8000628 <__aeabi_dmul>
 8008b4c:	3501      	adds	r5, #1
 8008b4e:	4680      	mov	r8, r0
 8008b50:	4689      	mov	r9, r1
 8008b52:	107f      	asrs	r7, r7, #1
 8008b54:	3608      	adds	r6, #8
 8008b56:	e7e5      	b.n	8008b24 <_dtoa_r+0x36c>
 8008b58:	f000 809b 	beq.w	8008c92 <_dtoa_r+0x4da>
 8008b5c:	9b00      	ldr	r3, [sp, #0]
 8008b5e:	4f9d      	ldr	r7, [pc, #628]	; (8008dd4 <_dtoa_r+0x61c>)
 8008b60:	425e      	negs	r6, r3
 8008b62:	4b9b      	ldr	r3, [pc, #620]	; (8008dd0 <_dtoa_r+0x618>)
 8008b64:	f006 020f 	and.w	r2, r6, #15
 8008b68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b70:	ec51 0b19 	vmov	r0, r1, d9
 8008b74:	f7f7 fd58 	bl	8000628 <__aeabi_dmul>
 8008b78:	1136      	asrs	r6, r6, #4
 8008b7a:	4682      	mov	sl, r0
 8008b7c:	468b      	mov	fp, r1
 8008b7e:	2300      	movs	r3, #0
 8008b80:	2502      	movs	r5, #2
 8008b82:	2e00      	cmp	r6, #0
 8008b84:	d17a      	bne.n	8008c7c <_dtoa_r+0x4c4>
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1d3      	bne.n	8008b32 <_dtoa_r+0x37a>
 8008b8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	f000 8082 	beq.w	8008c96 <_dtoa_r+0x4de>
 8008b92:	4b91      	ldr	r3, [pc, #580]	; (8008dd8 <_dtoa_r+0x620>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	4650      	mov	r0, sl
 8008b98:	4659      	mov	r1, fp
 8008b9a:	f7f7 ffb7 	bl	8000b0c <__aeabi_dcmplt>
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	d079      	beq.n	8008c96 <_dtoa_r+0x4de>
 8008ba2:	9b03      	ldr	r3, [sp, #12]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d076      	beq.n	8008c96 <_dtoa_r+0x4de>
 8008ba8:	9b02      	ldr	r3, [sp, #8]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	dd36      	ble.n	8008c1c <_dtoa_r+0x464>
 8008bae:	9b00      	ldr	r3, [sp, #0]
 8008bb0:	4650      	mov	r0, sl
 8008bb2:	4659      	mov	r1, fp
 8008bb4:	1e5f      	subs	r7, r3, #1
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	4b88      	ldr	r3, [pc, #544]	; (8008ddc <_dtoa_r+0x624>)
 8008bba:	f7f7 fd35 	bl	8000628 <__aeabi_dmul>
 8008bbe:	9e02      	ldr	r6, [sp, #8]
 8008bc0:	4682      	mov	sl, r0
 8008bc2:	468b      	mov	fp, r1
 8008bc4:	3501      	adds	r5, #1
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	f7f7 fcc4 	bl	8000554 <__aeabi_i2d>
 8008bcc:	4652      	mov	r2, sl
 8008bce:	465b      	mov	r3, fp
 8008bd0:	f7f7 fd2a 	bl	8000628 <__aeabi_dmul>
 8008bd4:	4b82      	ldr	r3, [pc, #520]	; (8008de0 <_dtoa_r+0x628>)
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f7f7 fb70 	bl	80002bc <__adddf3>
 8008bdc:	46d0      	mov	r8, sl
 8008bde:	46d9      	mov	r9, fp
 8008be0:	4682      	mov	sl, r0
 8008be2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008be6:	2e00      	cmp	r6, #0
 8008be8:	d158      	bne.n	8008c9c <_dtoa_r+0x4e4>
 8008bea:	4b7e      	ldr	r3, [pc, #504]	; (8008de4 <_dtoa_r+0x62c>)
 8008bec:	2200      	movs	r2, #0
 8008bee:	4640      	mov	r0, r8
 8008bf0:	4649      	mov	r1, r9
 8008bf2:	f7f7 fb61 	bl	80002b8 <__aeabi_dsub>
 8008bf6:	4652      	mov	r2, sl
 8008bf8:	465b      	mov	r3, fp
 8008bfa:	4680      	mov	r8, r0
 8008bfc:	4689      	mov	r9, r1
 8008bfe:	f7f7 ffa3 	bl	8000b48 <__aeabi_dcmpgt>
 8008c02:	2800      	cmp	r0, #0
 8008c04:	f040 8295 	bne.w	8009132 <_dtoa_r+0x97a>
 8008c08:	4652      	mov	r2, sl
 8008c0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008c0e:	4640      	mov	r0, r8
 8008c10:	4649      	mov	r1, r9
 8008c12:	f7f7 ff7b 	bl	8000b0c <__aeabi_dcmplt>
 8008c16:	2800      	cmp	r0, #0
 8008c18:	f040 8289 	bne.w	800912e <_dtoa_r+0x976>
 8008c1c:	ec5b ab19 	vmov	sl, fp, d9
 8008c20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f2c0 8148 	blt.w	8008eb8 <_dtoa_r+0x700>
 8008c28:	9a00      	ldr	r2, [sp, #0]
 8008c2a:	2a0e      	cmp	r2, #14
 8008c2c:	f300 8144 	bgt.w	8008eb8 <_dtoa_r+0x700>
 8008c30:	4b67      	ldr	r3, [pc, #412]	; (8008dd0 <_dtoa_r+0x618>)
 8008c32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f280 80d5 	bge.w	8008dec <_dtoa_r+0x634>
 8008c42:	9b03      	ldr	r3, [sp, #12]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	f300 80d1 	bgt.w	8008dec <_dtoa_r+0x634>
 8008c4a:	f040 826f 	bne.w	800912c <_dtoa_r+0x974>
 8008c4e:	4b65      	ldr	r3, [pc, #404]	; (8008de4 <_dtoa_r+0x62c>)
 8008c50:	2200      	movs	r2, #0
 8008c52:	4640      	mov	r0, r8
 8008c54:	4649      	mov	r1, r9
 8008c56:	f7f7 fce7 	bl	8000628 <__aeabi_dmul>
 8008c5a:	4652      	mov	r2, sl
 8008c5c:	465b      	mov	r3, fp
 8008c5e:	f7f7 ff69 	bl	8000b34 <__aeabi_dcmpge>
 8008c62:	9e03      	ldr	r6, [sp, #12]
 8008c64:	4637      	mov	r7, r6
 8008c66:	2800      	cmp	r0, #0
 8008c68:	f040 8245 	bne.w	80090f6 <_dtoa_r+0x93e>
 8008c6c:	9d01      	ldr	r5, [sp, #4]
 8008c6e:	2331      	movs	r3, #49	; 0x31
 8008c70:	f805 3b01 	strb.w	r3, [r5], #1
 8008c74:	9b00      	ldr	r3, [sp, #0]
 8008c76:	3301      	adds	r3, #1
 8008c78:	9300      	str	r3, [sp, #0]
 8008c7a:	e240      	b.n	80090fe <_dtoa_r+0x946>
 8008c7c:	07f2      	lsls	r2, r6, #31
 8008c7e:	d505      	bpl.n	8008c8c <_dtoa_r+0x4d4>
 8008c80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c84:	f7f7 fcd0 	bl	8000628 <__aeabi_dmul>
 8008c88:	3501      	adds	r5, #1
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	1076      	asrs	r6, r6, #1
 8008c8e:	3708      	adds	r7, #8
 8008c90:	e777      	b.n	8008b82 <_dtoa_r+0x3ca>
 8008c92:	2502      	movs	r5, #2
 8008c94:	e779      	b.n	8008b8a <_dtoa_r+0x3d2>
 8008c96:	9f00      	ldr	r7, [sp, #0]
 8008c98:	9e03      	ldr	r6, [sp, #12]
 8008c9a:	e794      	b.n	8008bc6 <_dtoa_r+0x40e>
 8008c9c:	9901      	ldr	r1, [sp, #4]
 8008c9e:	4b4c      	ldr	r3, [pc, #304]	; (8008dd0 <_dtoa_r+0x618>)
 8008ca0:	4431      	add	r1, r6
 8008ca2:	910d      	str	r1, [sp, #52]	; 0x34
 8008ca4:	9908      	ldr	r1, [sp, #32]
 8008ca6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008caa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008cae:	2900      	cmp	r1, #0
 8008cb0:	d043      	beq.n	8008d3a <_dtoa_r+0x582>
 8008cb2:	494d      	ldr	r1, [pc, #308]	; (8008de8 <_dtoa_r+0x630>)
 8008cb4:	2000      	movs	r0, #0
 8008cb6:	f7f7 fde1 	bl	800087c <__aeabi_ddiv>
 8008cba:	4652      	mov	r2, sl
 8008cbc:	465b      	mov	r3, fp
 8008cbe:	f7f7 fafb 	bl	80002b8 <__aeabi_dsub>
 8008cc2:	9d01      	ldr	r5, [sp, #4]
 8008cc4:	4682      	mov	sl, r0
 8008cc6:	468b      	mov	fp, r1
 8008cc8:	4649      	mov	r1, r9
 8008cca:	4640      	mov	r0, r8
 8008ccc:	f7f7 ff5c 	bl	8000b88 <__aeabi_d2iz>
 8008cd0:	4606      	mov	r6, r0
 8008cd2:	f7f7 fc3f 	bl	8000554 <__aeabi_i2d>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	460b      	mov	r3, r1
 8008cda:	4640      	mov	r0, r8
 8008cdc:	4649      	mov	r1, r9
 8008cde:	f7f7 faeb 	bl	80002b8 <__aeabi_dsub>
 8008ce2:	3630      	adds	r6, #48	; 0x30
 8008ce4:	f805 6b01 	strb.w	r6, [r5], #1
 8008ce8:	4652      	mov	r2, sl
 8008cea:	465b      	mov	r3, fp
 8008cec:	4680      	mov	r8, r0
 8008cee:	4689      	mov	r9, r1
 8008cf0:	f7f7 ff0c 	bl	8000b0c <__aeabi_dcmplt>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	d163      	bne.n	8008dc0 <_dtoa_r+0x608>
 8008cf8:	4642      	mov	r2, r8
 8008cfa:	464b      	mov	r3, r9
 8008cfc:	4936      	ldr	r1, [pc, #216]	; (8008dd8 <_dtoa_r+0x620>)
 8008cfe:	2000      	movs	r0, #0
 8008d00:	f7f7 fada 	bl	80002b8 <__aeabi_dsub>
 8008d04:	4652      	mov	r2, sl
 8008d06:	465b      	mov	r3, fp
 8008d08:	f7f7 ff00 	bl	8000b0c <__aeabi_dcmplt>
 8008d0c:	2800      	cmp	r0, #0
 8008d0e:	f040 80b5 	bne.w	8008e7c <_dtoa_r+0x6c4>
 8008d12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d14:	429d      	cmp	r5, r3
 8008d16:	d081      	beq.n	8008c1c <_dtoa_r+0x464>
 8008d18:	4b30      	ldr	r3, [pc, #192]	; (8008ddc <_dtoa_r+0x624>)
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	4650      	mov	r0, sl
 8008d1e:	4659      	mov	r1, fp
 8008d20:	f7f7 fc82 	bl	8000628 <__aeabi_dmul>
 8008d24:	4b2d      	ldr	r3, [pc, #180]	; (8008ddc <_dtoa_r+0x624>)
 8008d26:	4682      	mov	sl, r0
 8008d28:	468b      	mov	fp, r1
 8008d2a:	4640      	mov	r0, r8
 8008d2c:	4649      	mov	r1, r9
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f7f7 fc7a 	bl	8000628 <__aeabi_dmul>
 8008d34:	4680      	mov	r8, r0
 8008d36:	4689      	mov	r9, r1
 8008d38:	e7c6      	b.n	8008cc8 <_dtoa_r+0x510>
 8008d3a:	4650      	mov	r0, sl
 8008d3c:	4659      	mov	r1, fp
 8008d3e:	f7f7 fc73 	bl	8000628 <__aeabi_dmul>
 8008d42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d44:	9d01      	ldr	r5, [sp, #4]
 8008d46:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d48:	4682      	mov	sl, r0
 8008d4a:	468b      	mov	fp, r1
 8008d4c:	4649      	mov	r1, r9
 8008d4e:	4640      	mov	r0, r8
 8008d50:	f7f7 ff1a 	bl	8000b88 <__aeabi_d2iz>
 8008d54:	4606      	mov	r6, r0
 8008d56:	f7f7 fbfd 	bl	8000554 <__aeabi_i2d>
 8008d5a:	3630      	adds	r6, #48	; 0x30
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	460b      	mov	r3, r1
 8008d60:	4640      	mov	r0, r8
 8008d62:	4649      	mov	r1, r9
 8008d64:	f7f7 faa8 	bl	80002b8 <__aeabi_dsub>
 8008d68:	f805 6b01 	strb.w	r6, [r5], #1
 8008d6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d6e:	429d      	cmp	r5, r3
 8008d70:	4680      	mov	r8, r0
 8008d72:	4689      	mov	r9, r1
 8008d74:	f04f 0200 	mov.w	r2, #0
 8008d78:	d124      	bne.n	8008dc4 <_dtoa_r+0x60c>
 8008d7a:	4b1b      	ldr	r3, [pc, #108]	; (8008de8 <_dtoa_r+0x630>)
 8008d7c:	4650      	mov	r0, sl
 8008d7e:	4659      	mov	r1, fp
 8008d80:	f7f7 fa9c 	bl	80002bc <__adddf3>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	4640      	mov	r0, r8
 8008d8a:	4649      	mov	r1, r9
 8008d8c:	f7f7 fedc 	bl	8000b48 <__aeabi_dcmpgt>
 8008d90:	2800      	cmp	r0, #0
 8008d92:	d173      	bne.n	8008e7c <_dtoa_r+0x6c4>
 8008d94:	4652      	mov	r2, sl
 8008d96:	465b      	mov	r3, fp
 8008d98:	4913      	ldr	r1, [pc, #76]	; (8008de8 <_dtoa_r+0x630>)
 8008d9a:	2000      	movs	r0, #0
 8008d9c:	f7f7 fa8c 	bl	80002b8 <__aeabi_dsub>
 8008da0:	4602      	mov	r2, r0
 8008da2:	460b      	mov	r3, r1
 8008da4:	4640      	mov	r0, r8
 8008da6:	4649      	mov	r1, r9
 8008da8:	f7f7 feb0 	bl	8000b0c <__aeabi_dcmplt>
 8008dac:	2800      	cmp	r0, #0
 8008dae:	f43f af35 	beq.w	8008c1c <_dtoa_r+0x464>
 8008db2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008db4:	1e6b      	subs	r3, r5, #1
 8008db6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008db8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008dbc:	2b30      	cmp	r3, #48	; 0x30
 8008dbe:	d0f8      	beq.n	8008db2 <_dtoa_r+0x5fa>
 8008dc0:	9700      	str	r7, [sp, #0]
 8008dc2:	e049      	b.n	8008e58 <_dtoa_r+0x6a0>
 8008dc4:	4b05      	ldr	r3, [pc, #20]	; (8008ddc <_dtoa_r+0x624>)
 8008dc6:	f7f7 fc2f 	bl	8000628 <__aeabi_dmul>
 8008dca:	4680      	mov	r8, r0
 8008dcc:	4689      	mov	r9, r1
 8008dce:	e7bd      	b.n	8008d4c <_dtoa_r+0x594>
 8008dd0:	0800aeb0 	.word	0x0800aeb0
 8008dd4:	0800ae88 	.word	0x0800ae88
 8008dd8:	3ff00000 	.word	0x3ff00000
 8008ddc:	40240000 	.word	0x40240000
 8008de0:	401c0000 	.word	0x401c0000
 8008de4:	40140000 	.word	0x40140000
 8008de8:	3fe00000 	.word	0x3fe00000
 8008dec:	9d01      	ldr	r5, [sp, #4]
 8008dee:	4656      	mov	r6, sl
 8008df0:	465f      	mov	r7, fp
 8008df2:	4642      	mov	r2, r8
 8008df4:	464b      	mov	r3, r9
 8008df6:	4630      	mov	r0, r6
 8008df8:	4639      	mov	r1, r7
 8008dfa:	f7f7 fd3f 	bl	800087c <__aeabi_ddiv>
 8008dfe:	f7f7 fec3 	bl	8000b88 <__aeabi_d2iz>
 8008e02:	4682      	mov	sl, r0
 8008e04:	f7f7 fba6 	bl	8000554 <__aeabi_i2d>
 8008e08:	4642      	mov	r2, r8
 8008e0a:	464b      	mov	r3, r9
 8008e0c:	f7f7 fc0c 	bl	8000628 <__aeabi_dmul>
 8008e10:	4602      	mov	r2, r0
 8008e12:	460b      	mov	r3, r1
 8008e14:	4630      	mov	r0, r6
 8008e16:	4639      	mov	r1, r7
 8008e18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008e1c:	f7f7 fa4c 	bl	80002b8 <__aeabi_dsub>
 8008e20:	f805 6b01 	strb.w	r6, [r5], #1
 8008e24:	9e01      	ldr	r6, [sp, #4]
 8008e26:	9f03      	ldr	r7, [sp, #12]
 8008e28:	1bae      	subs	r6, r5, r6
 8008e2a:	42b7      	cmp	r7, r6
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	460b      	mov	r3, r1
 8008e30:	d135      	bne.n	8008e9e <_dtoa_r+0x6e6>
 8008e32:	f7f7 fa43 	bl	80002bc <__adddf3>
 8008e36:	4642      	mov	r2, r8
 8008e38:	464b      	mov	r3, r9
 8008e3a:	4606      	mov	r6, r0
 8008e3c:	460f      	mov	r7, r1
 8008e3e:	f7f7 fe83 	bl	8000b48 <__aeabi_dcmpgt>
 8008e42:	b9d0      	cbnz	r0, 8008e7a <_dtoa_r+0x6c2>
 8008e44:	4642      	mov	r2, r8
 8008e46:	464b      	mov	r3, r9
 8008e48:	4630      	mov	r0, r6
 8008e4a:	4639      	mov	r1, r7
 8008e4c:	f7f7 fe54 	bl	8000af8 <__aeabi_dcmpeq>
 8008e50:	b110      	cbz	r0, 8008e58 <_dtoa_r+0x6a0>
 8008e52:	f01a 0f01 	tst.w	sl, #1
 8008e56:	d110      	bne.n	8008e7a <_dtoa_r+0x6c2>
 8008e58:	4620      	mov	r0, r4
 8008e5a:	ee18 1a10 	vmov	r1, s16
 8008e5e:	f000 fbdf 	bl	8009620 <_Bfree>
 8008e62:	2300      	movs	r3, #0
 8008e64:	9800      	ldr	r0, [sp, #0]
 8008e66:	702b      	strb	r3, [r5, #0]
 8008e68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e6a:	3001      	adds	r0, #1
 8008e6c:	6018      	str	r0, [r3, #0]
 8008e6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f43f acf1 	beq.w	8008858 <_dtoa_r+0xa0>
 8008e76:	601d      	str	r5, [r3, #0]
 8008e78:	e4ee      	b.n	8008858 <_dtoa_r+0xa0>
 8008e7a:	9f00      	ldr	r7, [sp, #0]
 8008e7c:	462b      	mov	r3, r5
 8008e7e:	461d      	mov	r5, r3
 8008e80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e84:	2a39      	cmp	r2, #57	; 0x39
 8008e86:	d106      	bne.n	8008e96 <_dtoa_r+0x6de>
 8008e88:	9a01      	ldr	r2, [sp, #4]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d1f7      	bne.n	8008e7e <_dtoa_r+0x6c6>
 8008e8e:	9901      	ldr	r1, [sp, #4]
 8008e90:	2230      	movs	r2, #48	; 0x30
 8008e92:	3701      	adds	r7, #1
 8008e94:	700a      	strb	r2, [r1, #0]
 8008e96:	781a      	ldrb	r2, [r3, #0]
 8008e98:	3201      	adds	r2, #1
 8008e9a:	701a      	strb	r2, [r3, #0]
 8008e9c:	e790      	b.n	8008dc0 <_dtoa_r+0x608>
 8008e9e:	4ba6      	ldr	r3, [pc, #664]	; (8009138 <_dtoa_r+0x980>)
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f7f7 fbc1 	bl	8000628 <__aeabi_dmul>
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	4606      	mov	r6, r0
 8008eac:	460f      	mov	r7, r1
 8008eae:	f7f7 fe23 	bl	8000af8 <__aeabi_dcmpeq>
 8008eb2:	2800      	cmp	r0, #0
 8008eb4:	d09d      	beq.n	8008df2 <_dtoa_r+0x63a>
 8008eb6:	e7cf      	b.n	8008e58 <_dtoa_r+0x6a0>
 8008eb8:	9a08      	ldr	r2, [sp, #32]
 8008eba:	2a00      	cmp	r2, #0
 8008ebc:	f000 80d7 	beq.w	800906e <_dtoa_r+0x8b6>
 8008ec0:	9a06      	ldr	r2, [sp, #24]
 8008ec2:	2a01      	cmp	r2, #1
 8008ec4:	f300 80ba 	bgt.w	800903c <_dtoa_r+0x884>
 8008ec8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008eca:	2a00      	cmp	r2, #0
 8008ecc:	f000 80b2 	beq.w	8009034 <_dtoa_r+0x87c>
 8008ed0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008ed4:	9e07      	ldr	r6, [sp, #28]
 8008ed6:	9d04      	ldr	r5, [sp, #16]
 8008ed8:	9a04      	ldr	r2, [sp, #16]
 8008eda:	441a      	add	r2, r3
 8008edc:	9204      	str	r2, [sp, #16]
 8008ede:	9a05      	ldr	r2, [sp, #20]
 8008ee0:	2101      	movs	r1, #1
 8008ee2:	441a      	add	r2, r3
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	9205      	str	r2, [sp, #20]
 8008ee8:	f000 fc52 	bl	8009790 <__i2b>
 8008eec:	4607      	mov	r7, r0
 8008eee:	2d00      	cmp	r5, #0
 8008ef0:	dd0c      	ble.n	8008f0c <_dtoa_r+0x754>
 8008ef2:	9b05      	ldr	r3, [sp, #20]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	dd09      	ble.n	8008f0c <_dtoa_r+0x754>
 8008ef8:	42ab      	cmp	r3, r5
 8008efa:	9a04      	ldr	r2, [sp, #16]
 8008efc:	bfa8      	it	ge
 8008efe:	462b      	movge	r3, r5
 8008f00:	1ad2      	subs	r2, r2, r3
 8008f02:	9204      	str	r2, [sp, #16]
 8008f04:	9a05      	ldr	r2, [sp, #20]
 8008f06:	1aed      	subs	r5, r5, r3
 8008f08:	1ad3      	subs	r3, r2, r3
 8008f0a:	9305      	str	r3, [sp, #20]
 8008f0c:	9b07      	ldr	r3, [sp, #28]
 8008f0e:	b31b      	cbz	r3, 8008f58 <_dtoa_r+0x7a0>
 8008f10:	9b08      	ldr	r3, [sp, #32]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f000 80af 	beq.w	8009076 <_dtoa_r+0x8be>
 8008f18:	2e00      	cmp	r6, #0
 8008f1a:	dd13      	ble.n	8008f44 <_dtoa_r+0x78c>
 8008f1c:	4639      	mov	r1, r7
 8008f1e:	4632      	mov	r2, r6
 8008f20:	4620      	mov	r0, r4
 8008f22:	f000 fcf5 	bl	8009910 <__pow5mult>
 8008f26:	ee18 2a10 	vmov	r2, s16
 8008f2a:	4601      	mov	r1, r0
 8008f2c:	4607      	mov	r7, r0
 8008f2e:	4620      	mov	r0, r4
 8008f30:	f000 fc44 	bl	80097bc <__multiply>
 8008f34:	ee18 1a10 	vmov	r1, s16
 8008f38:	4680      	mov	r8, r0
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	f000 fb70 	bl	8009620 <_Bfree>
 8008f40:	ee08 8a10 	vmov	s16, r8
 8008f44:	9b07      	ldr	r3, [sp, #28]
 8008f46:	1b9a      	subs	r2, r3, r6
 8008f48:	d006      	beq.n	8008f58 <_dtoa_r+0x7a0>
 8008f4a:	ee18 1a10 	vmov	r1, s16
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f000 fcde 	bl	8009910 <__pow5mult>
 8008f54:	ee08 0a10 	vmov	s16, r0
 8008f58:	2101      	movs	r1, #1
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	f000 fc18 	bl	8009790 <__i2b>
 8008f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	4606      	mov	r6, r0
 8008f66:	f340 8088 	ble.w	800907a <_dtoa_r+0x8c2>
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	4601      	mov	r1, r0
 8008f6e:	4620      	mov	r0, r4
 8008f70:	f000 fcce 	bl	8009910 <__pow5mult>
 8008f74:	9b06      	ldr	r3, [sp, #24]
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	4606      	mov	r6, r0
 8008f7a:	f340 8081 	ble.w	8009080 <_dtoa_r+0x8c8>
 8008f7e:	f04f 0800 	mov.w	r8, #0
 8008f82:	6933      	ldr	r3, [r6, #16]
 8008f84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008f88:	6918      	ldr	r0, [r3, #16]
 8008f8a:	f000 fbb1 	bl	80096f0 <__hi0bits>
 8008f8e:	f1c0 0020 	rsb	r0, r0, #32
 8008f92:	9b05      	ldr	r3, [sp, #20]
 8008f94:	4418      	add	r0, r3
 8008f96:	f010 001f 	ands.w	r0, r0, #31
 8008f9a:	f000 8092 	beq.w	80090c2 <_dtoa_r+0x90a>
 8008f9e:	f1c0 0320 	rsb	r3, r0, #32
 8008fa2:	2b04      	cmp	r3, #4
 8008fa4:	f340 808a 	ble.w	80090bc <_dtoa_r+0x904>
 8008fa8:	f1c0 001c 	rsb	r0, r0, #28
 8008fac:	9b04      	ldr	r3, [sp, #16]
 8008fae:	4403      	add	r3, r0
 8008fb0:	9304      	str	r3, [sp, #16]
 8008fb2:	9b05      	ldr	r3, [sp, #20]
 8008fb4:	4403      	add	r3, r0
 8008fb6:	4405      	add	r5, r0
 8008fb8:	9305      	str	r3, [sp, #20]
 8008fba:	9b04      	ldr	r3, [sp, #16]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	dd07      	ble.n	8008fd0 <_dtoa_r+0x818>
 8008fc0:	ee18 1a10 	vmov	r1, s16
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	f000 fcfc 	bl	80099c4 <__lshift>
 8008fcc:	ee08 0a10 	vmov	s16, r0
 8008fd0:	9b05      	ldr	r3, [sp, #20]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	dd05      	ble.n	8008fe2 <_dtoa_r+0x82a>
 8008fd6:	4631      	mov	r1, r6
 8008fd8:	461a      	mov	r2, r3
 8008fda:	4620      	mov	r0, r4
 8008fdc:	f000 fcf2 	bl	80099c4 <__lshift>
 8008fe0:	4606      	mov	r6, r0
 8008fe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d06e      	beq.n	80090c6 <_dtoa_r+0x90e>
 8008fe8:	ee18 0a10 	vmov	r0, s16
 8008fec:	4631      	mov	r1, r6
 8008fee:	f000 fd59 	bl	8009aa4 <__mcmp>
 8008ff2:	2800      	cmp	r0, #0
 8008ff4:	da67      	bge.n	80090c6 <_dtoa_r+0x90e>
 8008ff6:	9b00      	ldr	r3, [sp, #0]
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	ee18 1a10 	vmov	r1, s16
 8008ffe:	9300      	str	r3, [sp, #0]
 8009000:	220a      	movs	r2, #10
 8009002:	2300      	movs	r3, #0
 8009004:	4620      	mov	r0, r4
 8009006:	f000 fb2d 	bl	8009664 <__multadd>
 800900a:	9b08      	ldr	r3, [sp, #32]
 800900c:	ee08 0a10 	vmov	s16, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	f000 81b1 	beq.w	8009378 <_dtoa_r+0xbc0>
 8009016:	2300      	movs	r3, #0
 8009018:	4639      	mov	r1, r7
 800901a:	220a      	movs	r2, #10
 800901c:	4620      	mov	r0, r4
 800901e:	f000 fb21 	bl	8009664 <__multadd>
 8009022:	9b02      	ldr	r3, [sp, #8]
 8009024:	2b00      	cmp	r3, #0
 8009026:	4607      	mov	r7, r0
 8009028:	f300 808e 	bgt.w	8009148 <_dtoa_r+0x990>
 800902c:	9b06      	ldr	r3, [sp, #24]
 800902e:	2b02      	cmp	r3, #2
 8009030:	dc51      	bgt.n	80090d6 <_dtoa_r+0x91e>
 8009032:	e089      	b.n	8009148 <_dtoa_r+0x990>
 8009034:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009036:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800903a:	e74b      	b.n	8008ed4 <_dtoa_r+0x71c>
 800903c:	9b03      	ldr	r3, [sp, #12]
 800903e:	1e5e      	subs	r6, r3, #1
 8009040:	9b07      	ldr	r3, [sp, #28]
 8009042:	42b3      	cmp	r3, r6
 8009044:	bfbf      	itttt	lt
 8009046:	9b07      	ldrlt	r3, [sp, #28]
 8009048:	9607      	strlt	r6, [sp, #28]
 800904a:	1af2      	sublt	r2, r6, r3
 800904c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800904e:	bfb6      	itet	lt
 8009050:	189b      	addlt	r3, r3, r2
 8009052:	1b9e      	subge	r6, r3, r6
 8009054:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009056:	9b03      	ldr	r3, [sp, #12]
 8009058:	bfb8      	it	lt
 800905a:	2600      	movlt	r6, #0
 800905c:	2b00      	cmp	r3, #0
 800905e:	bfb7      	itett	lt
 8009060:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009064:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009068:	1a9d      	sublt	r5, r3, r2
 800906a:	2300      	movlt	r3, #0
 800906c:	e734      	b.n	8008ed8 <_dtoa_r+0x720>
 800906e:	9e07      	ldr	r6, [sp, #28]
 8009070:	9d04      	ldr	r5, [sp, #16]
 8009072:	9f08      	ldr	r7, [sp, #32]
 8009074:	e73b      	b.n	8008eee <_dtoa_r+0x736>
 8009076:	9a07      	ldr	r2, [sp, #28]
 8009078:	e767      	b.n	8008f4a <_dtoa_r+0x792>
 800907a:	9b06      	ldr	r3, [sp, #24]
 800907c:	2b01      	cmp	r3, #1
 800907e:	dc18      	bgt.n	80090b2 <_dtoa_r+0x8fa>
 8009080:	f1ba 0f00 	cmp.w	sl, #0
 8009084:	d115      	bne.n	80090b2 <_dtoa_r+0x8fa>
 8009086:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800908a:	b993      	cbnz	r3, 80090b2 <_dtoa_r+0x8fa>
 800908c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009090:	0d1b      	lsrs	r3, r3, #20
 8009092:	051b      	lsls	r3, r3, #20
 8009094:	b183      	cbz	r3, 80090b8 <_dtoa_r+0x900>
 8009096:	9b04      	ldr	r3, [sp, #16]
 8009098:	3301      	adds	r3, #1
 800909a:	9304      	str	r3, [sp, #16]
 800909c:	9b05      	ldr	r3, [sp, #20]
 800909e:	3301      	adds	r3, #1
 80090a0:	9305      	str	r3, [sp, #20]
 80090a2:	f04f 0801 	mov.w	r8, #1
 80090a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f47f af6a 	bne.w	8008f82 <_dtoa_r+0x7ca>
 80090ae:	2001      	movs	r0, #1
 80090b0:	e76f      	b.n	8008f92 <_dtoa_r+0x7da>
 80090b2:	f04f 0800 	mov.w	r8, #0
 80090b6:	e7f6      	b.n	80090a6 <_dtoa_r+0x8ee>
 80090b8:	4698      	mov	r8, r3
 80090ba:	e7f4      	b.n	80090a6 <_dtoa_r+0x8ee>
 80090bc:	f43f af7d 	beq.w	8008fba <_dtoa_r+0x802>
 80090c0:	4618      	mov	r0, r3
 80090c2:	301c      	adds	r0, #28
 80090c4:	e772      	b.n	8008fac <_dtoa_r+0x7f4>
 80090c6:	9b03      	ldr	r3, [sp, #12]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	dc37      	bgt.n	800913c <_dtoa_r+0x984>
 80090cc:	9b06      	ldr	r3, [sp, #24]
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	dd34      	ble.n	800913c <_dtoa_r+0x984>
 80090d2:	9b03      	ldr	r3, [sp, #12]
 80090d4:	9302      	str	r3, [sp, #8]
 80090d6:	9b02      	ldr	r3, [sp, #8]
 80090d8:	b96b      	cbnz	r3, 80090f6 <_dtoa_r+0x93e>
 80090da:	4631      	mov	r1, r6
 80090dc:	2205      	movs	r2, #5
 80090de:	4620      	mov	r0, r4
 80090e0:	f000 fac0 	bl	8009664 <__multadd>
 80090e4:	4601      	mov	r1, r0
 80090e6:	4606      	mov	r6, r0
 80090e8:	ee18 0a10 	vmov	r0, s16
 80090ec:	f000 fcda 	bl	8009aa4 <__mcmp>
 80090f0:	2800      	cmp	r0, #0
 80090f2:	f73f adbb 	bgt.w	8008c6c <_dtoa_r+0x4b4>
 80090f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090f8:	9d01      	ldr	r5, [sp, #4]
 80090fa:	43db      	mvns	r3, r3
 80090fc:	9300      	str	r3, [sp, #0]
 80090fe:	f04f 0800 	mov.w	r8, #0
 8009102:	4631      	mov	r1, r6
 8009104:	4620      	mov	r0, r4
 8009106:	f000 fa8b 	bl	8009620 <_Bfree>
 800910a:	2f00      	cmp	r7, #0
 800910c:	f43f aea4 	beq.w	8008e58 <_dtoa_r+0x6a0>
 8009110:	f1b8 0f00 	cmp.w	r8, #0
 8009114:	d005      	beq.n	8009122 <_dtoa_r+0x96a>
 8009116:	45b8      	cmp	r8, r7
 8009118:	d003      	beq.n	8009122 <_dtoa_r+0x96a>
 800911a:	4641      	mov	r1, r8
 800911c:	4620      	mov	r0, r4
 800911e:	f000 fa7f 	bl	8009620 <_Bfree>
 8009122:	4639      	mov	r1, r7
 8009124:	4620      	mov	r0, r4
 8009126:	f000 fa7b 	bl	8009620 <_Bfree>
 800912a:	e695      	b.n	8008e58 <_dtoa_r+0x6a0>
 800912c:	2600      	movs	r6, #0
 800912e:	4637      	mov	r7, r6
 8009130:	e7e1      	b.n	80090f6 <_dtoa_r+0x93e>
 8009132:	9700      	str	r7, [sp, #0]
 8009134:	4637      	mov	r7, r6
 8009136:	e599      	b.n	8008c6c <_dtoa_r+0x4b4>
 8009138:	40240000 	.word	0x40240000
 800913c:	9b08      	ldr	r3, [sp, #32]
 800913e:	2b00      	cmp	r3, #0
 8009140:	f000 80ca 	beq.w	80092d8 <_dtoa_r+0xb20>
 8009144:	9b03      	ldr	r3, [sp, #12]
 8009146:	9302      	str	r3, [sp, #8]
 8009148:	2d00      	cmp	r5, #0
 800914a:	dd05      	ble.n	8009158 <_dtoa_r+0x9a0>
 800914c:	4639      	mov	r1, r7
 800914e:	462a      	mov	r2, r5
 8009150:	4620      	mov	r0, r4
 8009152:	f000 fc37 	bl	80099c4 <__lshift>
 8009156:	4607      	mov	r7, r0
 8009158:	f1b8 0f00 	cmp.w	r8, #0
 800915c:	d05b      	beq.n	8009216 <_dtoa_r+0xa5e>
 800915e:	6879      	ldr	r1, [r7, #4]
 8009160:	4620      	mov	r0, r4
 8009162:	f000 fa1d 	bl	80095a0 <_Balloc>
 8009166:	4605      	mov	r5, r0
 8009168:	b928      	cbnz	r0, 8009176 <_dtoa_r+0x9be>
 800916a:	4b87      	ldr	r3, [pc, #540]	; (8009388 <_dtoa_r+0xbd0>)
 800916c:	4602      	mov	r2, r0
 800916e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009172:	f7ff bb3b 	b.w	80087ec <_dtoa_r+0x34>
 8009176:	693a      	ldr	r2, [r7, #16]
 8009178:	3202      	adds	r2, #2
 800917a:	0092      	lsls	r2, r2, #2
 800917c:	f107 010c 	add.w	r1, r7, #12
 8009180:	300c      	adds	r0, #12
 8009182:	f7fe fdd5 	bl	8007d30 <memcpy>
 8009186:	2201      	movs	r2, #1
 8009188:	4629      	mov	r1, r5
 800918a:	4620      	mov	r0, r4
 800918c:	f000 fc1a 	bl	80099c4 <__lshift>
 8009190:	9b01      	ldr	r3, [sp, #4]
 8009192:	f103 0901 	add.w	r9, r3, #1
 8009196:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800919a:	4413      	add	r3, r2
 800919c:	9305      	str	r3, [sp, #20]
 800919e:	f00a 0301 	and.w	r3, sl, #1
 80091a2:	46b8      	mov	r8, r7
 80091a4:	9304      	str	r3, [sp, #16]
 80091a6:	4607      	mov	r7, r0
 80091a8:	4631      	mov	r1, r6
 80091aa:	ee18 0a10 	vmov	r0, s16
 80091ae:	f7ff fa77 	bl	80086a0 <quorem>
 80091b2:	4641      	mov	r1, r8
 80091b4:	9002      	str	r0, [sp, #8]
 80091b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80091ba:	ee18 0a10 	vmov	r0, s16
 80091be:	f000 fc71 	bl	8009aa4 <__mcmp>
 80091c2:	463a      	mov	r2, r7
 80091c4:	9003      	str	r0, [sp, #12]
 80091c6:	4631      	mov	r1, r6
 80091c8:	4620      	mov	r0, r4
 80091ca:	f000 fc87 	bl	8009adc <__mdiff>
 80091ce:	68c2      	ldr	r2, [r0, #12]
 80091d0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80091d4:	4605      	mov	r5, r0
 80091d6:	bb02      	cbnz	r2, 800921a <_dtoa_r+0xa62>
 80091d8:	4601      	mov	r1, r0
 80091da:	ee18 0a10 	vmov	r0, s16
 80091de:	f000 fc61 	bl	8009aa4 <__mcmp>
 80091e2:	4602      	mov	r2, r0
 80091e4:	4629      	mov	r1, r5
 80091e6:	4620      	mov	r0, r4
 80091e8:	9207      	str	r2, [sp, #28]
 80091ea:	f000 fa19 	bl	8009620 <_Bfree>
 80091ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80091f2:	ea43 0102 	orr.w	r1, r3, r2
 80091f6:	9b04      	ldr	r3, [sp, #16]
 80091f8:	430b      	orrs	r3, r1
 80091fa:	464d      	mov	r5, r9
 80091fc:	d10f      	bne.n	800921e <_dtoa_r+0xa66>
 80091fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009202:	d02a      	beq.n	800925a <_dtoa_r+0xaa2>
 8009204:	9b03      	ldr	r3, [sp, #12]
 8009206:	2b00      	cmp	r3, #0
 8009208:	dd02      	ble.n	8009210 <_dtoa_r+0xa58>
 800920a:	9b02      	ldr	r3, [sp, #8]
 800920c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009210:	f88b a000 	strb.w	sl, [fp]
 8009214:	e775      	b.n	8009102 <_dtoa_r+0x94a>
 8009216:	4638      	mov	r0, r7
 8009218:	e7ba      	b.n	8009190 <_dtoa_r+0x9d8>
 800921a:	2201      	movs	r2, #1
 800921c:	e7e2      	b.n	80091e4 <_dtoa_r+0xa2c>
 800921e:	9b03      	ldr	r3, [sp, #12]
 8009220:	2b00      	cmp	r3, #0
 8009222:	db04      	blt.n	800922e <_dtoa_r+0xa76>
 8009224:	9906      	ldr	r1, [sp, #24]
 8009226:	430b      	orrs	r3, r1
 8009228:	9904      	ldr	r1, [sp, #16]
 800922a:	430b      	orrs	r3, r1
 800922c:	d122      	bne.n	8009274 <_dtoa_r+0xabc>
 800922e:	2a00      	cmp	r2, #0
 8009230:	ddee      	ble.n	8009210 <_dtoa_r+0xa58>
 8009232:	ee18 1a10 	vmov	r1, s16
 8009236:	2201      	movs	r2, #1
 8009238:	4620      	mov	r0, r4
 800923a:	f000 fbc3 	bl	80099c4 <__lshift>
 800923e:	4631      	mov	r1, r6
 8009240:	ee08 0a10 	vmov	s16, r0
 8009244:	f000 fc2e 	bl	8009aa4 <__mcmp>
 8009248:	2800      	cmp	r0, #0
 800924a:	dc03      	bgt.n	8009254 <_dtoa_r+0xa9c>
 800924c:	d1e0      	bne.n	8009210 <_dtoa_r+0xa58>
 800924e:	f01a 0f01 	tst.w	sl, #1
 8009252:	d0dd      	beq.n	8009210 <_dtoa_r+0xa58>
 8009254:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009258:	d1d7      	bne.n	800920a <_dtoa_r+0xa52>
 800925a:	2339      	movs	r3, #57	; 0x39
 800925c:	f88b 3000 	strb.w	r3, [fp]
 8009260:	462b      	mov	r3, r5
 8009262:	461d      	mov	r5, r3
 8009264:	3b01      	subs	r3, #1
 8009266:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800926a:	2a39      	cmp	r2, #57	; 0x39
 800926c:	d071      	beq.n	8009352 <_dtoa_r+0xb9a>
 800926e:	3201      	adds	r2, #1
 8009270:	701a      	strb	r2, [r3, #0]
 8009272:	e746      	b.n	8009102 <_dtoa_r+0x94a>
 8009274:	2a00      	cmp	r2, #0
 8009276:	dd07      	ble.n	8009288 <_dtoa_r+0xad0>
 8009278:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800927c:	d0ed      	beq.n	800925a <_dtoa_r+0xaa2>
 800927e:	f10a 0301 	add.w	r3, sl, #1
 8009282:	f88b 3000 	strb.w	r3, [fp]
 8009286:	e73c      	b.n	8009102 <_dtoa_r+0x94a>
 8009288:	9b05      	ldr	r3, [sp, #20]
 800928a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800928e:	4599      	cmp	r9, r3
 8009290:	d047      	beq.n	8009322 <_dtoa_r+0xb6a>
 8009292:	ee18 1a10 	vmov	r1, s16
 8009296:	2300      	movs	r3, #0
 8009298:	220a      	movs	r2, #10
 800929a:	4620      	mov	r0, r4
 800929c:	f000 f9e2 	bl	8009664 <__multadd>
 80092a0:	45b8      	cmp	r8, r7
 80092a2:	ee08 0a10 	vmov	s16, r0
 80092a6:	f04f 0300 	mov.w	r3, #0
 80092aa:	f04f 020a 	mov.w	r2, #10
 80092ae:	4641      	mov	r1, r8
 80092b0:	4620      	mov	r0, r4
 80092b2:	d106      	bne.n	80092c2 <_dtoa_r+0xb0a>
 80092b4:	f000 f9d6 	bl	8009664 <__multadd>
 80092b8:	4680      	mov	r8, r0
 80092ba:	4607      	mov	r7, r0
 80092bc:	f109 0901 	add.w	r9, r9, #1
 80092c0:	e772      	b.n	80091a8 <_dtoa_r+0x9f0>
 80092c2:	f000 f9cf 	bl	8009664 <__multadd>
 80092c6:	4639      	mov	r1, r7
 80092c8:	4680      	mov	r8, r0
 80092ca:	2300      	movs	r3, #0
 80092cc:	220a      	movs	r2, #10
 80092ce:	4620      	mov	r0, r4
 80092d0:	f000 f9c8 	bl	8009664 <__multadd>
 80092d4:	4607      	mov	r7, r0
 80092d6:	e7f1      	b.n	80092bc <_dtoa_r+0xb04>
 80092d8:	9b03      	ldr	r3, [sp, #12]
 80092da:	9302      	str	r3, [sp, #8]
 80092dc:	9d01      	ldr	r5, [sp, #4]
 80092de:	ee18 0a10 	vmov	r0, s16
 80092e2:	4631      	mov	r1, r6
 80092e4:	f7ff f9dc 	bl	80086a0 <quorem>
 80092e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80092ec:	9b01      	ldr	r3, [sp, #4]
 80092ee:	f805 ab01 	strb.w	sl, [r5], #1
 80092f2:	1aea      	subs	r2, r5, r3
 80092f4:	9b02      	ldr	r3, [sp, #8]
 80092f6:	4293      	cmp	r3, r2
 80092f8:	dd09      	ble.n	800930e <_dtoa_r+0xb56>
 80092fa:	ee18 1a10 	vmov	r1, s16
 80092fe:	2300      	movs	r3, #0
 8009300:	220a      	movs	r2, #10
 8009302:	4620      	mov	r0, r4
 8009304:	f000 f9ae 	bl	8009664 <__multadd>
 8009308:	ee08 0a10 	vmov	s16, r0
 800930c:	e7e7      	b.n	80092de <_dtoa_r+0xb26>
 800930e:	9b02      	ldr	r3, [sp, #8]
 8009310:	2b00      	cmp	r3, #0
 8009312:	bfc8      	it	gt
 8009314:	461d      	movgt	r5, r3
 8009316:	9b01      	ldr	r3, [sp, #4]
 8009318:	bfd8      	it	le
 800931a:	2501      	movle	r5, #1
 800931c:	441d      	add	r5, r3
 800931e:	f04f 0800 	mov.w	r8, #0
 8009322:	ee18 1a10 	vmov	r1, s16
 8009326:	2201      	movs	r2, #1
 8009328:	4620      	mov	r0, r4
 800932a:	f000 fb4b 	bl	80099c4 <__lshift>
 800932e:	4631      	mov	r1, r6
 8009330:	ee08 0a10 	vmov	s16, r0
 8009334:	f000 fbb6 	bl	8009aa4 <__mcmp>
 8009338:	2800      	cmp	r0, #0
 800933a:	dc91      	bgt.n	8009260 <_dtoa_r+0xaa8>
 800933c:	d102      	bne.n	8009344 <_dtoa_r+0xb8c>
 800933e:	f01a 0f01 	tst.w	sl, #1
 8009342:	d18d      	bne.n	8009260 <_dtoa_r+0xaa8>
 8009344:	462b      	mov	r3, r5
 8009346:	461d      	mov	r5, r3
 8009348:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800934c:	2a30      	cmp	r2, #48	; 0x30
 800934e:	d0fa      	beq.n	8009346 <_dtoa_r+0xb8e>
 8009350:	e6d7      	b.n	8009102 <_dtoa_r+0x94a>
 8009352:	9a01      	ldr	r2, [sp, #4]
 8009354:	429a      	cmp	r2, r3
 8009356:	d184      	bne.n	8009262 <_dtoa_r+0xaaa>
 8009358:	9b00      	ldr	r3, [sp, #0]
 800935a:	3301      	adds	r3, #1
 800935c:	9300      	str	r3, [sp, #0]
 800935e:	2331      	movs	r3, #49	; 0x31
 8009360:	7013      	strb	r3, [r2, #0]
 8009362:	e6ce      	b.n	8009102 <_dtoa_r+0x94a>
 8009364:	4b09      	ldr	r3, [pc, #36]	; (800938c <_dtoa_r+0xbd4>)
 8009366:	f7ff ba95 	b.w	8008894 <_dtoa_r+0xdc>
 800936a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800936c:	2b00      	cmp	r3, #0
 800936e:	f47f aa6e 	bne.w	800884e <_dtoa_r+0x96>
 8009372:	4b07      	ldr	r3, [pc, #28]	; (8009390 <_dtoa_r+0xbd8>)
 8009374:	f7ff ba8e 	b.w	8008894 <_dtoa_r+0xdc>
 8009378:	9b02      	ldr	r3, [sp, #8]
 800937a:	2b00      	cmp	r3, #0
 800937c:	dcae      	bgt.n	80092dc <_dtoa_r+0xb24>
 800937e:	9b06      	ldr	r3, [sp, #24]
 8009380:	2b02      	cmp	r3, #2
 8009382:	f73f aea8 	bgt.w	80090d6 <_dtoa_r+0x91e>
 8009386:	e7a9      	b.n	80092dc <_dtoa_r+0xb24>
 8009388:	0800adb7 	.word	0x0800adb7
 800938c:	0800ad14 	.word	0x0800ad14
 8009390:	0800ad38 	.word	0x0800ad38

08009394 <std>:
 8009394:	2300      	movs	r3, #0
 8009396:	b510      	push	{r4, lr}
 8009398:	4604      	mov	r4, r0
 800939a:	e9c0 3300 	strd	r3, r3, [r0]
 800939e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093a2:	6083      	str	r3, [r0, #8]
 80093a4:	8181      	strh	r1, [r0, #12]
 80093a6:	6643      	str	r3, [r0, #100]	; 0x64
 80093a8:	81c2      	strh	r2, [r0, #14]
 80093aa:	6183      	str	r3, [r0, #24]
 80093ac:	4619      	mov	r1, r3
 80093ae:	2208      	movs	r2, #8
 80093b0:	305c      	adds	r0, #92	; 0x5c
 80093b2:	f7fe fccb 	bl	8007d4c <memset>
 80093b6:	4b05      	ldr	r3, [pc, #20]	; (80093cc <std+0x38>)
 80093b8:	6263      	str	r3, [r4, #36]	; 0x24
 80093ba:	4b05      	ldr	r3, [pc, #20]	; (80093d0 <std+0x3c>)
 80093bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80093be:	4b05      	ldr	r3, [pc, #20]	; (80093d4 <std+0x40>)
 80093c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80093c2:	4b05      	ldr	r3, [pc, #20]	; (80093d8 <std+0x44>)
 80093c4:	6224      	str	r4, [r4, #32]
 80093c6:	6323      	str	r3, [r4, #48]	; 0x30
 80093c8:	bd10      	pop	{r4, pc}
 80093ca:	bf00      	nop
 80093cc:	0800a421 	.word	0x0800a421
 80093d0:	0800a443 	.word	0x0800a443
 80093d4:	0800a47b 	.word	0x0800a47b
 80093d8:	0800a49f 	.word	0x0800a49f

080093dc <_cleanup_r>:
 80093dc:	4901      	ldr	r1, [pc, #4]	; (80093e4 <_cleanup_r+0x8>)
 80093de:	f000 b8af 	b.w	8009540 <_fwalk_reent>
 80093e2:	bf00      	nop
 80093e4:	0800a7b5 	.word	0x0800a7b5

080093e8 <__sfmoreglue>:
 80093e8:	b570      	push	{r4, r5, r6, lr}
 80093ea:	2268      	movs	r2, #104	; 0x68
 80093ec:	1e4d      	subs	r5, r1, #1
 80093ee:	4355      	muls	r5, r2
 80093f0:	460e      	mov	r6, r1
 80093f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80093f6:	f000 fcd9 	bl	8009dac <_malloc_r>
 80093fa:	4604      	mov	r4, r0
 80093fc:	b140      	cbz	r0, 8009410 <__sfmoreglue+0x28>
 80093fe:	2100      	movs	r1, #0
 8009400:	e9c0 1600 	strd	r1, r6, [r0]
 8009404:	300c      	adds	r0, #12
 8009406:	60a0      	str	r0, [r4, #8]
 8009408:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800940c:	f7fe fc9e 	bl	8007d4c <memset>
 8009410:	4620      	mov	r0, r4
 8009412:	bd70      	pop	{r4, r5, r6, pc}

08009414 <__sfp_lock_acquire>:
 8009414:	4801      	ldr	r0, [pc, #4]	; (800941c <__sfp_lock_acquire+0x8>)
 8009416:	f000 b8b8 	b.w	800958a <__retarget_lock_acquire_recursive>
 800941a:	bf00      	nop
 800941c:	20001415 	.word	0x20001415

08009420 <__sfp_lock_release>:
 8009420:	4801      	ldr	r0, [pc, #4]	; (8009428 <__sfp_lock_release+0x8>)
 8009422:	f000 b8b3 	b.w	800958c <__retarget_lock_release_recursive>
 8009426:	bf00      	nop
 8009428:	20001415 	.word	0x20001415

0800942c <__sinit_lock_acquire>:
 800942c:	4801      	ldr	r0, [pc, #4]	; (8009434 <__sinit_lock_acquire+0x8>)
 800942e:	f000 b8ac 	b.w	800958a <__retarget_lock_acquire_recursive>
 8009432:	bf00      	nop
 8009434:	20001416 	.word	0x20001416

08009438 <__sinit_lock_release>:
 8009438:	4801      	ldr	r0, [pc, #4]	; (8009440 <__sinit_lock_release+0x8>)
 800943a:	f000 b8a7 	b.w	800958c <__retarget_lock_release_recursive>
 800943e:	bf00      	nop
 8009440:	20001416 	.word	0x20001416

08009444 <__sinit>:
 8009444:	b510      	push	{r4, lr}
 8009446:	4604      	mov	r4, r0
 8009448:	f7ff fff0 	bl	800942c <__sinit_lock_acquire>
 800944c:	69a3      	ldr	r3, [r4, #24]
 800944e:	b11b      	cbz	r3, 8009458 <__sinit+0x14>
 8009450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009454:	f7ff bff0 	b.w	8009438 <__sinit_lock_release>
 8009458:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800945c:	6523      	str	r3, [r4, #80]	; 0x50
 800945e:	4b13      	ldr	r3, [pc, #76]	; (80094ac <__sinit+0x68>)
 8009460:	4a13      	ldr	r2, [pc, #76]	; (80094b0 <__sinit+0x6c>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	62a2      	str	r2, [r4, #40]	; 0x28
 8009466:	42a3      	cmp	r3, r4
 8009468:	bf04      	itt	eq
 800946a:	2301      	moveq	r3, #1
 800946c:	61a3      	streq	r3, [r4, #24]
 800946e:	4620      	mov	r0, r4
 8009470:	f000 f820 	bl	80094b4 <__sfp>
 8009474:	6060      	str	r0, [r4, #4]
 8009476:	4620      	mov	r0, r4
 8009478:	f000 f81c 	bl	80094b4 <__sfp>
 800947c:	60a0      	str	r0, [r4, #8]
 800947e:	4620      	mov	r0, r4
 8009480:	f000 f818 	bl	80094b4 <__sfp>
 8009484:	2200      	movs	r2, #0
 8009486:	60e0      	str	r0, [r4, #12]
 8009488:	2104      	movs	r1, #4
 800948a:	6860      	ldr	r0, [r4, #4]
 800948c:	f7ff ff82 	bl	8009394 <std>
 8009490:	68a0      	ldr	r0, [r4, #8]
 8009492:	2201      	movs	r2, #1
 8009494:	2109      	movs	r1, #9
 8009496:	f7ff ff7d 	bl	8009394 <std>
 800949a:	68e0      	ldr	r0, [r4, #12]
 800949c:	2202      	movs	r2, #2
 800949e:	2112      	movs	r1, #18
 80094a0:	f7ff ff78 	bl	8009394 <std>
 80094a4:	2301      	movs	r3, #1
 80094a6:	61a3      	str	r3, [r4, #24]
 80094a8:	e7d2      	b.n	8009450 <__sinit+0xc>
 80094aa:	bf00      	nop
 80094ac:	0800ad00 	.word	0x0800ad00
 80094b0:	080093dd 	.word	0x080093dd

080094b4 <__sfp>:
 80094b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094b6:	4607      	mov	r7, r0
 80094b8:	f7ff ffac 	bl	8009414 <__sfp_lock_acquire>
 80094bc:	4b1e      	ldr	r3, [pc, #120]	; (8009538 <__sfp+0x84>)
 80094be:	681e      	ldr	r6, [r3, #0]
 80094c0:	69b3      	ldr	r3, [r6, #24]
 80094c2:	b913      	cbnz	r3, 80094ca <__sfp+0x16>
 80094c4:	4630      	mov	r0, r6
 80094c6:	f7ff ffbd 	bl	8009444 <__sinit>
 80094ca:	3648      	adds	r6, #72	; 0x48
 80094cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80094d0:	3b01      	subs	r3, #1
 80094d2:	d503      	bpl.n	80094dc <__sfp+0x28>
 80094d4:	6833      	ldr	r3, [r6, #0]
 80094d6:	b30b      	cbz	r3, 800951c <__sfp+0x68>
 80094d8:	6836      	ldr	r6, [r6, #0]
 80094da:	e7f7      	b.n	80094cc <__sfp+0x18>
 80094dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80094e0:	b9d5      	cbnz	r5, 8009518 <__sfp+0x64>
 80094e2:	4b16      	ldr	r3, [pc, #88]	; (800953c <__sfp+0x88>)
 80094e4:	60e3      	str	r3, [r4, #12]
 80094e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80094ea:	6665      	str	r5, [r4, #100]	; 0x64
 80094ec:	f000 f84c 	bl	8009588 <__retarget_lock_init_recursive>
 80094f0:	f7ff ff96 	bl	8009420 <__sfp_lock_release>
 80094f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80094f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80094fc:	6025      	str	r5, [r4, #0]
 80094fe:	61a5      	str	r5, [r4, #24]
 8009500:	2208      	movs	r2, #8
 8009502:	4629      	mov	r1, r5
 8009504:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009508:	f7fe fc20 	bl	8007d4c <memset>
 800950c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009510:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009514:	4620      	mov	r0, r4
 8009516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009518:	3468      	adds	r4, #104	; 0x68
 800951a:	e7d9      	b.n	80094d0 <__sfp+0x1c>
 800951c:	2104      	movs	r1, #4
 800951e:	4638      	mov	r0, r7
 8009520:	f7ff ff62 	bl	80093e8 <__sfmoreglue>
 8009524:	4604      	mov	r4, r0
 8009526:	6030      	str	r0, [r6, #0]
 8009528:	2800      	cmp	r0, #0
 800952a:	d1d5      	bne.n	80094d8 <__sfp+0x24>
 800952c:	f7ff ff78 	bl	8009420 <__sfp_lock_release>
 8009530:	230c      	movs	r3, #12
 8009532:	603b      	str	r3, [r7, #0]
 8009534:	e7ee      	b.n	8009514 <__sfp+0x60>
 8009536:	bf00      	nop
 8009538:	0800ad00 	.word	0x0800ad00
 800953c:	ffff0001 	.word	0xffff0001

08009540 <_fwalk_reent>:
 8009540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009544:	4606      	mov	r6, r0
 8009546:	4688      	mov	r8, r1
 8009548:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800954c:	2700      	movs	r7, #0
 800954e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009552:	f1b9 0901 	subs.w	r9, r9, #1
 8009556:	d505      	bpl.n	8009564 <_fwalk_reent+0x24>
 8009558:	6824      	ldr	r4, [r4, #0]
 800955a:	2c00      	cmp	r4, #0
 800955c:	d1f7      	bne.n	800954e <_fwalk_reent+0xe>
 800955e:	4638      	mov	r0, r7
 8009560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009564:	89ab      	ldrh	r3, [r5, #12]
 8009566:	2b01      	cmp	r3, #1
 8009568:	d907      	bls.n	800957a <_fwalk_reent+0x3a>
 800956a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800956e:	3301      	adds	r3, #1
 8009570:	d003      	beq.n	800957a <_fwalk_reent+0x3a>
 8009572:	4629      	mov	r1, r5
 8009574:	4630      	mov	r0, r6
 8009576:	47c0      	blx	r8
 8009578:	4307      	orrs	r7, r0
 800957a:	3568      	adds	r5, #104	; 0x68
 800957c:	e7e9      	b.n	8009552 <_fwalk_reent+0x12>
	...

08009580 <_localeconv_r>:
 8009580:	4800      	ldr	r0, [pc, #0]	; (8009584 <_localeconv_r+0x4>)
 8009582:	4770      	bx	lr
 8009584:	200001e4 	.word	0x200001e4

08009588 <__retarget_lock_init_recursive>:
 8009588:	4770      	bx	lr

0800958a <__retarget_lock_acquire_recursive>:
 800958a:	4770      	bx	lr

0800958c <__retarget_lock_release_recursive>:
 800958c:	4770      	bx	lr
	...

08009590 <malloc>:
 8009590:	4b02      	ldr	r3, [pc, #8]	; (800959c <malloc+0xc>)
 8009592:	4601      	mov	r1, r0
 8009594:	6818      	ldr	r0, [r3, #0]
 8009596:	f000 bc09 	b.w	8009dac <_malloc_r>
 800959a:	bf00      	nop
 800959c:	20000090 	.word	0x20000090

080095a0 <_Balloc>:
 80095a0:	b570      	push	{r4, r5, r6, lr}
 80095a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80095a4:	4604      	mov	r4, r0
 80095a6:	460d      	mov	r5, r1
 80095a8:	b976      	cbnz	r6, 80095c8 <_Balloc+0x28>
 80095aa:	2010      	movs	r0, #16
 80095ac:	f7ff fff0 	bl	8009590 <malloc>
 80095b0:	4602      	mov	r2, r0
 80095b2:	6260      	str	r0, [r4, #36]	; 0x24
 80095b4:	b920      	cbnz	r0, 80095c0 <_Balloc+0x20>
 80095b6:	4b18      	ldr	r3, [pc, #96]	; (8009618 <_Balloc+0x78>)
 80095b8:	4818      	ldr	r0, [pc, #96]	; (800961c <_Balloc+0x7c>)
 80095ba:	2166      	movs	r1, #102	; 0x66
 80095bc:	f001 f846 	bl	800a64c <__assert_func>
 80095c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095c4:	6006      	str	r6, [r0, #0]
 80095c6:	60c6      	str	r6, [r0, #12]
 80095c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80095ca:	68f3      	ldr	r3, [r6, #12]
 80095cc:	b183      	cbz	r3, 80095f0 <_Balloc+0x50>
 80095ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80095d6:	b9b8      	cbnz	r0, 8009608 <_Balloc+0x68>
 80095d8:	2101      	movs	r1, #1
 80095da:	fa01 f605 	lsl.w	r6, r1, r5
 80095de:	1d72      	adds	r2, r6, #5
 80095e0:	0092      	lsls	r2, r2, #2
 80095e2:	4620      	mov	r0, r4
 80095e4:	f000 fb60 	bl	8009ca8 <_calloc_r>
 80095e8:	b160      	cbz	r0, 8009604 <_Balloc+0x64>
 80095ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80095ee:	e00e      	b.n	800960e <_Balloc+0x6e>
 80095f0:	2221      	movs	r2, #33	; 0x21
 80095f2:	2104      	movs	r1, #4
 80095f4:	4620      	mov	r0, r4
 80095f6:	f000 fb57 	bl	8009ca8 <_calloc_r>
 80095fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095fc:	60f0      	str	r0, [r6, #12]
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d1e4      	bne.n	80095ce <_Balloc+0x2e>
 8009604:	2000      	movs	r0, #0
 8009606:	bd70      	pop	{r4, r5, r6, pc}
 8009608:	6802      	ldr	r2, [r0, #0]
 800960a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800960e:	2300      	movs	r3, #0
 8009610:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009614:	e7f7      	b.n	8009606 <_Balloc+0x66>
 8009616:	bf00      	nop
 8009618:	0800ad45 	.word	0x0800ad45
 800961c:	0800ae28 	.word	0x0800ae28

08009620 <_Bfree>:
 8009620:	b570      	push	{r4, r5, r6, lr}
 8009622:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009624:	4605      	mov	r5, r0
 8009626:	460c      	mov	r4, r1
 8009628:	b976      	cbnz	r6, 8009648 <_Bfree+0x28>
 800962a:	2010      	movs	r0, #16
 800962c:	f7ff ffb0 	bl	8009590 <malloc>
 8009630:	4602      	mov	r2, r0
 8009632:	6268      	str	r0, [r5, #36]	; 0x24
 8009634:	b920      	cbnz	r0, 8009640 <_Bfree+0x20>
 8009636:	4b09      	ldr	r3, [pc, #36]	; (800965c <_Bfree+0x3c>)
 8009638:	4809      	ldr	r0, [pc, #36]	; (8009660 <_Bfree+0x40>)
 800963a:	218a      	movs	r1, #138	; 0x8a
 800963c:	f001 f806 	bl	800a64c <__assert_func>
 8009640:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009644:	6006      	str	r6, [r0, #0]
 8009646:	60c6      	str	r6, [r0, #12]
 8009648:	b13c      	cbz	r4, 800965a <_Bfree+0x3a>
 800964a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800964c:	6862      	ldr	r2, [r4, #4]
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009654:	6021      	str	r1, [r4, #0]
 8009656:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800965a:	bd70      	pop	{r4, r5, r6, pc}
 800965c:	0800ad45 	.word	0x0800ad45
 8009660:	0800ae28 	.word	0x0800ae28

08009664 <__multadd>:
 8009664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009668:	690d      	ldr	r5, [r1, #16]
 800966a:	4607      	mov	r7, r0
 800966c:	460c      	mov	r4, r1
 800966e:	461e      	mov	r6, r3
 8009670:	f101 0c14 	add.w	ip, r1, #20
 8009674:	2000      	movs	r0, #0
 8009676:	f8dc 3000 	ldr.w	r3, [ip]
 800967a:	b299      	uxth	r1, r3
 800967c:	fb02 6101 	mla	r1, r2, r1, r6
 8009680:	0c1e      	lsrs	r6, r3, #16
 8009682:	0c0b      	lsrs	r3, r1, #16
 8009684:	fb02 3306 	mla	r3, r2, r6, r3
 8009688:	b289      	uxth	r1, r1
 800968a:	3001      	adds	r0, #1
 800968c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009690:	4285      	cmp	r5, r0
 8009692:	f84c 1b04 	str.w	r1, [ip], #4
 8009696:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800969a:	dcec      	bgt.n	8009676 <__multadd+0x12>
 800969c:	b30e      	cbz	r6, 80096e2 <__multadd+0x7e>
 800969e:	68a3      	ldr	r3, [r4, #8]
 80096a0:	42ab      	cmp	r3, r5
 80096a2:	dc19      	bgt.n	80096d8 <__multadd+0x74>
 80096a4:	6861      	ldr	r1, [r4, #4]
 80096a6:	4638      	mov	r0, r7
 80096a8:	3101      	adds	r1, #1
 80096aa:	f7ff ff79 	bl	80095a0 <_Balloc>
 80096ae:	4680      	mov	r8, r0
 80096b0:	b928      	cbnz	r0, 80096be <__multadd+0x5a>
 80096b2:	4602      	mov	r2, r0
 80096b4:	4b0c      	ldr	r3, [pc, #48]	; (80096e8 <__multadd+0x84>)
 80096b6:	480d      	ldr	r0, [pc, #52]	; (80096ec <__multadd+0x88>)
 80096b8:	21b5      	movs	r1, #181	; 0xb5
 80096ba:	f000 ffc7 	bl	800a64c <__assert_func>
 80096be:	6922      	ldr	r2, [r4, #16]
 80096c0:	3202      	adds	r2, #2
 80096c2:	f104 010c 	add.w	r1, r4, #12
 80096c6:	0092      	lsls	r2, r2, #2
 80096c8:	300c      	adds	r0, #12
 80096ca:	f7fe fb31 	bl	8007d30 <memcpy>
 80096ce:	4621      	mov	r1, r4
 80096d0:	4638      	mov	r0, r7
 80096d2:	f7ff ffa5 	bl	8009620 <_Bfree>
 80096d6:	4644      	mov	r4, r8
 80096d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80096dc:	3501      	adds	r5, #1
 80096de:	615e      	str	r6, [r3, #20]
 80096e0:	6125      	str	r5, [r4, #16]
 80096e2:	4620      	mov	r0, r4
 80096e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096e8:	0800adb7 	.word	0x0800adb7
 80096ec:	0800ae28 	.word	0x0800ae28

080096f0 <__hi0bits>:
 80096f0:	0c03      	lsrs	r3, r0, #16
 80096f2:	041b      	lsls	r3, r3, #16
 80096f4:	b9d3      	cbnz	r3, 800972c <__hi0bits+0x3c>
 80096f6:	0400      	lsls	r0, r0, #16
 80096f8:	2310      	movs	r3, #16
 80096fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80096fe:	bf04      	itt	eq
 8009700:	0200      	lsleq	r0, r0, #8
 8009702:	3308      	addeq	r3, #8
 8009704:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009708:	bf04      	itt	eq
 800970a:	0100      	lsleq	r0, r0, #4
 800970c:	3304      	addeq	r3, #4
 800970e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009712:	bf04      	itt	eq
 8009714:	0080      	lsleq	r0, r0, #2
 8009716:	3302      	addeq	r3, #2
 8009718:	2800      	cmp	r0, #0
 800971a:	db05      	blt.n	8009728 <__hi0bits+0x38>
 800971c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009720:	f103 0301 	add.w	r3, r3, #1
 8009724:	bf08      	it	eq
 8009726:	2320      	moveq	r3, #32
 8009728:	4618      	mov	r0, r3
 800972a:	4770      	bx	lr
 800972c:	2300      	movs	r3, #0
 800972e:	e7e4      	b.n	80096fa <__hi0bits+0xa>

08009730 <__lo0bits>:
 8009730:	6803      	ldr	r3, [r0, #0]
 8009732:	f013 0207 	ands.w	r2, r3, #7
 8009736:	4601      	mov	r1, r0
 8009738:	d00b      	beq.n	8009752 <__lo0bits+0x22>
 800973a:	07da      	lsls	r2, r3, #31
 800973c:	d423      	bmi.n	8009786 <__lo0bits+0x56>
 800973e:	0798      	lsls	r0, r3, #30
 8009740:	bf49      	itett	mi
 8009742:	085b      	lsrmi	r3, r3, #1
 8009744:	089b      	lsrpl	r3, r3, #2
 8009746:	2001      	movmi	r0, #1
 8009748:	600b      	strmi	r3, [r1, #0]
 800974a:	bf5c      	itt	pl
 800974c:	600b      	strpl	r3, [r1, #0]
 800974e:	2002      	movpl	r0, #2
 8009750:	4770      	bx	lr
 8009752:	b298      	uxth	r0, r3
 8009754:	b9a8      	cbnz	r0, 8009782 <__lo0bits+0x52>
 8009756:	0c1b      	lsrs	r3, r3, #16
 8009758:	2010      	movs	r0, #16
 800975a:	b2da      	uxtb	r2, r3
 800975c:	b90a      	cbnz	r2, 8009762 <__lo0bits+0x32>
 800975e:	3008      	adds	r0, #8
 8009760:	0a1b      	lsrs	r3, r3, #8
 8009762:	071a      	lsls	r2, r3, #28
 8009764:	bf04      	itt	eq
 8009766:	091b      	lsreq	r3, r3, #4
 8009768:	3004      	addeq	r0, #4
 800976a:	079a      	lsls	r2, r3, #30
 800976c:	bf04      	itt	eq
 800976e:	089b      	lsreq	r3, r3, #2
 8009770:	3002      	addeq	r0, #2
 8009772:	07da      	lsls	r2, r3, #31
 8009774:	d403      	bmi.n	800977e <__lo0bits+0x4e>
 8009776:	085b      	lsrs	r3, r3, #1
 8009778:	f100 0001 	add.w	r0, r0, #1
 800977c:	d005      	beq.n	800978a <__lo0bits+0x5a>
 800977e:	600b      	str	r3, [r1, #0]
 8009780:	4770      	bx	lr
 8009782:	4610      	mov	r0, r2
 8009784:	e7e9      	b.n	800975a <__lo0bits+0x2a>
 8009786:	2000      	movs	r0, #0
 8009788:	4770      	bx	lr
 800978a:	2020      	movs	r0, #32
 800978c:	4770      	bx	lr
	...

08009790 <__i2b>:
 8009790:	b510      	push	{r4, lr}
 8009792:	460c      	mov	r4, r1
 8009794:	2101      	movs	r1, #1
 8009796:	f7ff ff03 	bl	80095a0 <_Balloc>
 800979a:	4602      	mov	r2, r0
 800979c:	b928      	cbnz	r0, 80097aa <__i2b+0x1a>
 800979e:	4b05      	ldr	r3, [pc, #20]	; (80097b4 <__i2b+0x24>)
 80097a0:	4805      	ldr	r0, [pc, #20]	; (80097b8 <__i2b+0x28>)
 80097a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80097a6:	f000 ff51 	bl	800a64c <__assert_func>
 80097aa:	2301      	movs	r3, #1
 80097ac:	6144      	str	r4, [r0, #20]
 80097ae:	6103      	str	r3, [r0, #16]
 80097b0:	bd10      	pop	{r4, pc}
 80097b2:	bf00      	nop
 80097b4:	0800adb7 	.word	0x0800adb7
 80097b8:	0800ae28 	.word	0x0800ae28

080097bc <__multiply>:
 80097bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c0:	4691      	mov	r9, r2
 80097c2:	690a      	ldr	r2, [r1, #16]
 80097c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	bfb8      	it	lt
 80097cc:	460b      	movlt	r3, r1
 80097ce:	460c      	mov	r4, r1
 80097d0:	bfbc      	itt	lt
 80097d2:	464c      	movlt	r4, r9
 80097d4:	4699      	movlt	r9, r3
 80097d6:	6927      	ldr	r7, [r4, #16]
 80097d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80097dc:	68a3      	ldr	r3, [r4, #8]
 80097de:	6861      	ldr	r1, [r4, #4]
 80097e0:	eb07 060a 	add.w	r6, r7, sl
 80097e4:	42b3      	cmp	r3, r6
 80097e6:	b085      	sub	sp, #20
 80097e8:	bfb8      	it	lt
 80097ea:	3101      	addlt	r1, #1
 80097ec:	f7ff fed8 	bl	80095a0 <_Balloc>
 80097f0:	b930      	cbnz	r0, 8009800 <__multiply+0x44>
 80097f2:	4602      	mov	r2, r0
 80097f4:	4b44      	ldr	r3, [pc, #272]	; (8009908 <__multiply+0x14c>)
 80097f6:	4845      	ldr	r0, [pc, #276]	; (800990c <__multiply+0x150>)
 80097f8:	f240 115d 	movw	r1, #349	; 0x15d
 80097fc:	f000 ff26 	bl	800a64c <__assert_func>
 8009800:	f100 0514 	add.w	r5, r0, #20
 8009804:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009808:	462b      	mov	r3, r5
 800980a:	2200      	movs	r2, #0
 800980c:	4543      	cmp	r3, r8
 800980e:	d321      	bcc.n	8009854 <__multiply+0x98>
 8009810:	f104 0314 	add.w	r3, r4, #20
 8009814:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009818:	f109 0314 	add.w	r3, r9, #20
 800981c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009820:	9202      	str	r2, [sp, #8]
 8009822:	1b3a      	subs	r2, r7, r4
 8009824:	3a15      	subs	r2, #21
 8009826:	f022 0203 	bic.w	r2, r2, #3
 800982a:	3204      	adds	r2, #4
 800982c:	f104 0115 	add.w	r1, r4, #21
 8009830:	428f      	cmp	r7, r1
 8009832:	bf38      	it	cc
 8009834:	2204      	movcc	r2, #4
 8009836:	9201      	str	r2, [sp, #4]
 8009838:	9a02      	ldr	r2, [sp, #8]
 800983a:	9303      	str	r3, [sp, #12]
 800983c:	429a      	cmp	r2, r3
 800983e:	d80c      	bhi.n	800985a <__multiply+0x9e>
 8009840:	2e00      	cmp	r6, #0
 8009842:	dd03      	ble.n	800984c <__multiply+0x90>
 8009844:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009848:	2b00      	cmp	r3, #0
 800984a:	d05a      	beq.n	8009902 <__multiply+0x146>
 800984c:	6106      	str	r6, [r0, #16]
 800984e:	b005      	add	sp, #20
 8009850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009854:	f843 2b04 	str.w	r2, [r3], #4
 8009858:	e7d8      	b.n	800980c <__multiply+0x50>
 800985a:	f8b3 a000 	ldrh.w	sl, [r3]
 800985e:	f1ba 0f00 	cmp.w	sl, #0
 8009862:	d024      	beq.n	80098ae <__multiply+0xf2>
 8009864:	f104 0e14 	add.w	lr, r4, #20
 8009868:	46a9      	mov	r9, r5
 800986a:	f04f 0c00 	mov.w	ip, #0
 800986e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009872:	f8d9 1000 	ldr.w	r1, [r9]
 8009876:	fa1f fb82 	uxth.w	fp, r2
 800987a:	b289      	uxth	r1, r1
 800987c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009880:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009884:	f8d9 2000 	ldr.w	r2, [r9]
 8009888:	4461      	add	r1, ip
 800988a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800988e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009892:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009896:	b289      	uxth	r1, r1
 8009898:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800989c:	4577      	cmp	r7, lr
 800989e:	f849 1b04 	str.w	r1, [r9], #4
 80098a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80098a6:	d8e2      	bhi.n	800986e <__multiply+0xb2>
 80098a8:	9a01      	ldr	r2, [sp, #4]
 80098aa:	f845 c002 	str.w	ip, [r5, r2]
 80098ae:	9a03      	ldr	r2, [sp, #12]
 80098b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80098b4:	3304      	adds	r3, #4
 80098b6:	f1b9 0f00 	cmp.w	r9, #0
 80098ba:	d020      	beq.n	80098fe <__multiply+0x142>
 80098bc:	6829      	ldr	r1, [r5, #0]
 80098be:	f104 0c14 	add.w	ip, r4, #20
 80098c2:	46ae      	mov	lr, r5
 80098c4:	f04f 0a00 	mov.w	sl, #0
 80098c8:	f8bc b000 	ldrh.w	fp, [ip]
 80098cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80098d0:	fb09 220b 	mla	r2, r9, fp, r2
 80098d4:	4492      	add	sl, r2
 80098d6:	b289      	uxth	r1, r1
 80098d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80098dc:	f84e 1b04 	str.w	r1, [lr], #4
 80098e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80098e4:	f8be 1000 	ldrh.w	r1, [lr]
 80098e8:	0c12      	lsrs	r2, r2, #16
 80098ea:	fb09 1102 	mla	r1, r9, r2, r1
 80098ee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80098f2:	4567      	cmp	r7, ip
 80098f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80098f8:	d8e6      	bhi.n	80098c8 <__multiply+0x10c>
 80098fa:	9a01      	ldr	r2, [sp, #4]
 80098fc:	50a9      	str	r1, [r5, r2]
 80098fe:	3504      	adds	r5, #4
 8009900:	e79a      	b.n	8009838 <__multiply+0x7c>
 8009902:	3e01      	subs	r6, #1
 8009904:	e79c      	b.n	8009840 <__multiply+0x84>
 8009906:	bf00      	nop
 8009908:	0800adb7 	.word	0x0800adb7
 800990c:	0800ae28 	.word	0x0800ae28

08009910 <__pow5mult>:
 8009910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009914:	4615      	mov	r5, r2
 8009916:	f012 0203 	ands.w	r2, r2, #3
 800991a:	4606      	mov	r6, r0
 800991c:	460f      	mov	r7, r1
 800991e:	d007      	beq.n	8009930 <__pow5mult+0x20>
 8009920:	4c25      	ldr	r4, [pc, #148]	; (80099b8 <__pow5mult+0xa8>)
 8009922:	3a01      	subs	r2, #1
 8009924:	2300      	movs	r3, #0
 8009926:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800992a:	f7ff fe9b 	bl	8009664 <__multadd>
 800992e:	4607      	mov	r7, r0
 8009930:	10ad      	asrs	r5, r5, #2
 8009932:	d03d      	beq.n	80099b0 <__pow5mult+0xa0>
 8009934:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009936:	b97c      	cbnz	r4, 8009958 <__pow5mult+0x48>
 8009938:	2010      	movs	r0, #16
 800993a:	f7ff fe29 	bl	8009590 <malloc>
 800993e:	4602      	mov	r2, r0
 8009940:	6270      	str	r0, [r6, #36]	; 0x24
 8009942:	b928      	cbnz	r0, 8009950 <__pow5mult+0x40>
 8009944:	4b1d      	ldr	r3, [pc, #116]	; (80099bc <__pow5mult+0xac>)
 8009946:	481e      	ldr	r0, [pc, #120]	; (80099c0 <__pow5mult+0xb0>)
 8009948:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800994c:	f000 fe7e 	bl	800a64c <__assert_func>
 8009950:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009954:	6004      	str	r4, [r0, #0]
 8009956:	60c4      	str	r4, [r0, #12]
 8009958:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800995c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009960:	b94c      	cbnz	r4, 8009976 <__pow5mult+0x66>
 8009962:	f240 2171 	movw	r1, #625	; 0x271
 8009966:	4630      	mov	r0, r6
 8009968:	f7ff ff12 	bl	8009790 <__i2b>
 800996c:	2300      	movs	r3, #0
 800996e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009972:	4604      	mov	r4, r0
 8009974:	6003      	str	r3, [r0, #0]
 8009976:	f04f 0900 	mov.w	r9, #0
 800997a:	07eb      	lsls	r3, r5, #31
 800997c:	d50a      	bpl.n	8009994 <__pow5mult+0x84>
 800997e:	4639      	mov	r1, r7
 8009980:	4622      	mov	r2, r4
 8009982:	4630      	mov	r0, r6
 8009984:	f7ff ff1a 	bl	80097bc <__multiply>
 8009988:	4639      	mov	r1, r7
 800998a:	4680      	mov	r8, r0
 800998c:	4630      	mov	r0, r6
 800998e:	f7ff fe47 	bl	8009620 <_Bfree>
 8009992:	4647      	mov	r7, r8
 8009994:	106d      	asrs	r5, r5, #1
 8009996:	d00b      	beq.n	80099b0 <__pow5mult+0xa0>
 8009998:	6820      	ldr	r0, [r4, #0]
 800999a:	b938      	cbnz	r0, 80099ac <__pow5mult+0x9c>
 800999c:	4622      	mov	r2, r4
 800999e:	4621      	mov	r1, r4
 80099a0:	4630      	mov	r0, r6
 80099a2:	f7ff ff0b 	bl	80097bc <__multiply>
 80099a6:	6020      	str	r0, [r4, #0]
 80099a8:	f8c0 9000 	str.w	r9, [r0]
 80099ac:	4604      	mov	r4, r0
 80099ae:	e7e4      	b.n	800997a <__pow5mult+0x6a>
 80099b0:	4638      	mov	r0, r7
 80099b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099b6:	bf00      	nop
 80099b8:	0800af78 	.word	0x0800af78
 80099bc:	0800ad45 	.word	0x0800ad45
 80099c0:	0800ae28 	.word	0x0800ae28

080099c4 <__lshift>:
 80099c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099c8:	460c      	mov	r4, r1
 80099ca:	6849      	ldr	r1, [r1, #4]
 80099cc:	6923      	ldr	r3, [r4, #16]
 80099ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80099d2:	68a3      	ldr	r3, [r4, #8]
 80099d4:	4607      	mov	r7, r0
 80099d6:	4691      	mov	r9, r2
 80099d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80099dc:	f108 0601 	add.w	r6, r8, #1
 80099e0:	42b3      	cmp	r3, r6
 80099e2:	db0b      	blt.n	80099fc <__lshift+0x38>
 80099e4:	4638      	mov	r0, r7
 80099e6:	f7ff fddb 	bl	80095a0 <_Balloc>
 80099ea:	4605      	mov	r5, r0
 80099ec:	b948      	cbnz	r0, 8009a02 <__lshift+0x3e>
 80099ee:	4602      	mov	r2, r0
 80099f0:	4b2a      	ldr	r3, [pc, #168]	; (8009a9c <__lshift+0xd8>)
 80099f2:	482b      	ldr	r0, [pc, #172]	; (8009aa0 <__lshift+0xdc>)
 80099f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80099f8:	f000 fe28 	bl	800a64c <__assert_func>
 80099fc:	3101      	adds	r1, #1
 80099fe:	005b      	lsls	r3, r3, #1
 8009a00:	e7ee      	b.n	80099e0 <__lshift+0x1c>
 8009a02:	2300      	movs	r3, #0
 8009a04:	f100 0114 	add.w	r1, r0, #20
 8009a08:	f100 0210 	add.w	r2, r0, #16
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	4553      	cmp	r3, sl
 8009a10:	db37      	blt.n	8009a82 <__lshift+0xbe>
 8009a12:	6920      	ldr	r0, [r4, #16]
 8009a14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a18:	f104 0314 	add.w	r3, r4, #20
 8009a1c:	f019 091f 	ands.w	r9, r9, #31
 8009a20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009a28:	d02f      	beq.n	8009a8a <__lshift+0xc6>
 8009a2a:	f1c9 0e20 	rsb	lr, r9, #32
 8009a2e:	468a      	mov	sl, r1
 8009a30:	f04f 0c00 	mov.w	ip, #0
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	fa02 f209 	lsl.w	r2, r2, r9
 8009a3a:	ea42 020c 	orr.w	r2, r2, ip
 8009a3e:	f84a 2b04 	str.w	r2, [sl], #4
 8009a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a46:	4298      	cmp	r0, r3
 8009a48:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009a4c:	d8f2      	bhi.n	8009a34 <__lshift+0x70>
 8009a4e:	1b03      	subs	r3, r0, r4
 8009a50:	3b15      	subs	r3, #21
 8009a52:	f023 0303 	bic.w	r3, r3, #3
 8009a56:	3304      	adds	r3, #4
 8009a58:	f104 0215 	add.w	r2, r4, #21
 8009a5c:	4290      	cmp	r0, r2
 8009a5e:	bf38      	it	cc
 8009a60:	2304      	movcc	r3, #4
 8009a62:	f841 c003 	str.w	ip, [r1, r3]
 8009a66:	f1bc 0f00 	cmp.w	ip, #0
 8009a6a:	d001      	beq.n	8009a70 <__lshift+0xac>
 8009a6c:	f108 0602 	add.w	r6, r8, #2
 8009a70:	3e01      	subs	r6, #1
 8009a72:	4638      	mov	r0, r7
 8009a74:	612e      	str	r6, [r5, #16]
 8009a76:	4621      	mov	r1, r4
 8009a78:	f7ff fdd2 	bl	8009620 <_Bfree>
 8009a7c:	4628      	mov	r0, r5
 8009a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a82:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a86:	3301      	adds	r3, #1
 8009a88:	e7c1      	b.n	8009a0e <__lshift+0x4a>
 8009a8a:	3904      	subs	r1, #4
 8009a8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a90:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a94:	4298      	cmp	r0, r3
 8009a96:	d8f9      	bhi.n	8009a8c <__lshift+0xc8>
 8009a98:	e7ea      	b.n	8009a70 <__lshift+0xac>
 8009a9a:	bf00      	nop
 8009a9c:	0800adb7 	.word	0x0800adb7
 8009aa0:	0800ae28 	.word	0x0800ae28

08009aa4 <__mcmp>:
 8009aa4:	b530      	push	{r4, r5, lr}
 8009aa6:	6902      	ldr	r2, [r0, #16]
 8009aa8:	690c      	ldr	r4, [r1, #16]
 8009aaa:	1b12      	subs	r2, r2, r4
 8009aac:	d10e      	bne.n	8009acc <__mcmp+0x28>
 8009aae:	f100 0314 	add.w	r3, r0, #20
 8009ab2:	3114      	adds	r1, #20
 8009ab4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ab8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009abc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009ac0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009ac4:	42a5      	cmp	r5, r4
 8009ac6:	d003      	beq.n	8009ad0 <__mcmp+0x2c>
 8009ac8:	d305      	bcc.n	8009ad6 <__mcmp+0x32>
 8009aca:	2201      	movs	r2, #1
 8009acc:	4610      	mov	r0, r2
 8009ace:	bd30      	pop	{r4, r5, pc}
 8009ad0:	4283      	cmp	r3, r0
 8009ad2:	d3f3      	bcc.n	8009abc <__mcmp+0x18>
 8009ad4:	e7fa      	b.n	8009acc <__mcmp+0x28>
 8009ad6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ada:	e7f7      	b.n	8009acc <__mcmp+0x28>

08009adc <__mdiff>:
 8009adc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae0:	460c      	mov	r4, r1
 8009ae2:	4606      	mov	r6, r0
 8009ae4:	4611      	mov	r1, r2
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	4690      	mov	r8, r2
 8009aea:	f7ff ffdb 	bl	8009aa4 <__mcmp>
 8009aee:	1e05      	subs	r5, r0, #0
 8009af0:	d110      	bne.n	8009b14 <__mdiff+0x38>
 8009af2:	4629      	mov	r1, r5
 8009af4:	4630      	mov	r0, r6
 8009af6:	f7ff fd53 	bl	80095a0 <_Balloc>
 8009afa:	b930      	cbnz	r0, 8009b0a <__mdiff+0x2e>
 8009afc:	4b3a      	ldr	r3, [pc, #232]	; (8009be8 <__mdiff+0x10c>)
 8009afe:	4602      	mov	r2, r0
 8009b00:	f240 2132 	movw	r1, #562	; 0x232
 8009b04:	4839      	ldr	r0, [pc, #228]	; (8009bec <__mdiff+0x110>)
 8009b06:	f000 fda1 	bl	800a64c <__assert_func>
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b14:	bfa4      	itt	ge
 8009b16:	4643      	movge	r3, r8
 8009b18:	46a0      	movge	r8, r4
 8009b1a:	4630      	mov	r0, r6
 8009b1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009b20:	bfa6      	itte	ge
 8009b22:	461c      	movge	r4, r3
 8009b24:	2500      	movge	r5, #0
 8009b26:	2501      	movlt	r5, #1
 8009b28:	f7ff fd3a 	bl	80095a0 <_Balloc>
 8009b2c:	b920      	cbnz	r0, 8009b38 <__mdiff+0x5c>
 8009b2e:	4b2e      	ldr	r3, [pc, #184]	; (8009be8 <__mdiff+0x10c>)
 8009b30:	4602      	mov	r2, r0
 8009b32:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009b36:	e7e5      	b.n	8009b04 <__mdiff+0x28>
 8009b38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009b3c:	6926      	ldr	r6, [r4, #16]
 8009b3e:	60c5      	str	r5, [r0, #12]
 8009b40:	f104 0914 	add.w	r9, r4, #20
 8009b44:	f108 0514 	add.w	r5, r8, #20
 8009b48:	f100 0e14 	add.w	lr, r0, #20
 8009b4c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009b50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009b54:	f108 0210 	add.w	r2, r8, #16
 8009b58:	46f2      	mov	sl, lr
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009b60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009b64:	fa1f f883 	uxth.w	r8, r3
 8009b68:	fa11 f18b 	uxtah	r1, r1, fp
 8009b6c:	0c1b      	lsrs	r3, r3, #16
 8009b6e:	eba1 0808 	sub.w	r8, r1, r8
 8009b72:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009b76:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009b7a:	fa1f f888 	uxth.w	r8, r8
 8009b7e:	1419      	asrs	r1, r3, #16
 8009b80:	454e      	cmp	r6, r9
 8009b82:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009b86:	f84a 3b04 	str.w	r3, [sl], #4
 8009b8a:	d8e7      	bhi.n	8009b5c <__mdiff+0x80>
 8009b8c:	1b33      	subs	r3, r6, r4
 8009b8e:	3b15      	subs	r3, #21
 8009b90:	f023 0303 	bic.w	r3, r3, #3
 8009b94:	3304      	adds	r3, #4
 8009b96:	3415      	adds	r4, #21
 8009b98:	42a6      	cmp	r6, r4
 8009b9a:	bf38      	it	cc
 8009b9c:	2304      	movcc	r3, #4
 8009b9e:	441d      	add	r5, r3
 8009ba0:	4473      	add	r3, lr
 8009ba2:	469e      	mov	lr, r3
 8009ba4:	462e      	mov	r6, r5
 8009ba6:	4566      	cmp	r6, ip
 8009ba8:	d30e      	bcc.n	8009bc8 <__mdiff+0xec>
 8009baa:	f10c 0203 	add.w	r2, ip, #3
 8009bae:	1b52      	subs	r2, r2, r5
 8009bb0:	f022 0203 	bic.w	r2, r2, #3
 8009bb4:	3d03      	subs	r5, #3
 8009bb6:	45ac      	cmp	ip, r5
 8009bb8:	bf38      	it	cc
 8009bba:	2200      	movcc	r2, #0
 8009bbc:	441a      	add	r2, r3
 8009bbe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009bc2:	b17b      	cbz	r3, 8009be4 <__mdiff+0x108>
 8009bc4:	6107      	str	r7, [r0, #16]
 8009bc6:	e7a3      	b.n	8009b10 <__mdiff+0x34>
 8009bc8:	f856 8b04 	ldr.w	r8, [r6], #4
 8009bcc:	fa11 f288 	uxtah	r2, r1, r8
 8009bd0:	1414      	asrs	r4, r2, #16
 8009bd2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009bd6:	b292      	uxth	r2, r2
 8009bd8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009bdc:	f84e 2b04 	str.w	r2, [lr], #4
 8009be0:	1421      	asrs	r1, r4, #16
 8009be2:	e7e0      	b.n	8009ba6 <__mdiff+0xca>
 8009be4:	3f01      	subs	r7, #1
 8009be6:	e7ea      	b.n	8009bbe <__mdiff+0xe2>
 8009be8:	0800adb7 	.word	0x0800adb7
 8009bec:	0800ae28 	.word	0x0800ae28

08009bf0 <__d2b>:
 8009bf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009bf4:	4689      	mov	r9, r1
 8009bf6:	2101      	movs	r1, #1
 8009bf8:	ec57 6b10 	vmov	r6, r7, d0
 8009bfc:	4690      	mov	r8, r2
 8009bfe:	f7ff fccf 	bl	80095a0 <_Balloc>
 8009c02:	4604      	mov	r4, r0
 8009c04:	b930      	cbnz	r0, 8009c14 <__d2b+0x24>
 8009c06:	4602      	mov	r2, r0
 8009c08:	4b25      	ldr	r3, [pc, #148]	; (8009ca0 <__d2b+0xb0>)
 8009c0a:	4826      	ldr	r0, [pc, #152]	; (8009ca4 <__d2b+0xb4>)
 8009c0c:	f240 310a 	movw	r1, #778	; 0x30a
 8009c10:	f000 fd1c 	bl	800a64c <__assert_func>
 8009c14:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009c18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c1c:	bb35      	cbnz	r5, 8009c6c <__d2b+0x7c>
 8009c1e:	2e00      	cmp	r6, #0
 8009c20:	9301      	str	r3, [sp, #4]
 8009c22:	d028      	beq.n	8009c76 <__d2b+0x86>
 8009c24:	4668      	mov	r0, sp
 8009c26:	9600      	str	r6, [sp, #0]
 8009c28:	f7ff fd82 	bl	8009730 <__lo0bits>
 8009c2c:	9900      	ldr	r1, [sp, #0]
 8009c2e:	b300      	cbz	r0, 8009c72 <__d2b+0x82>
 8009c30:	9a01      	ldr	r2, [sp, #4]
 8009c32:	f1c0 0320 	rsb	r3, r0, #32
 8009c36:	fa02 f303 	lsl.w	r3, r2, r3
 8009c3a:	430b      	orrs	r3, r1
 8009c3c:	40c2      	lsrs	r2, r0
 8009c3e:	6163      	str	r3, [r4, #20]
 8009c40:	9201      	str	r2, [sp, #4]
 8009c42:	9b01      	ldr	r3, [sp, #4]
 8009c44:	61a3      	str	r3, [r4, #24]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	bf14      	ite	ne
 8009c4a:	2202      	movne	r2, #2
 8009c4c:	2201      	moveq	r2, #1
 8009c4e:	6122      	str	r2, [r4, #16]
 8009c50:	b1d5      	cbz	r5, 8009c88 <__d2b+0x98>
 8009c52:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009c56:	4405      	add	r5, r0
 8009c58:	f8c9 5000 	str.w	r5, [r9]
 8009c5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c60:	f8c8 0000 	str.w	r0, [r8]
 8009c64:	4620      	mov	r0, r4
 8009c66:	b003      	add	sp, #12
 8009c68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c70:	e7d5      	b.n	8009c1e <__d2b+0x2e>
 8009c72:	6161      	str	r1, [r4, #20]
 8009c74:	e7e5      	b.n	8009c42 <__d2b+0x52>
 8009c76:	a801      	add	r0, sp, #4
 8009c78:	f7ff fd5a 	bl	8009730 <__lo0bits>
 8009c7c:	9b01      	ldr	r3, [sp, #4]
 8009c7e:	6163      	str	r3, [r4, #20]
 8009c80:	2201      	movs	r2, #1
 8009c82:	6122      	str	r2, [r4, #16]
 8009c84:	3020      	adds	r0, #32
 8009c86:	e7e3      	b.n	8009c50 <__d2b+0x60>
 8009c88:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c90:	f8c9 0000 	str.w	r0, [r9]
 8009c94:	6918      	ldr	r0, [r3, #16]
 8009c96:	f7ff fd2b 	bl	80096f0 <__hi0bits>
 8009c9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009c9e:	e7df      	b.n	8009c60 <__d2b+0x70>
 8009ca0:	0800adb7 	.word	0x0800adb7
 8009ca4:	0800ae28 	.word	0x0800ae28

08009ca8 <_calloc_r>:
 8009ca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009caa:	fba1 2402 	umull	r2, r4, r1, r2
 8009cae:	b94c      	cbnz	r4, 8009cc4 <_calloc_r+0x1c>
 8009cb0:	4611      	mov	r1, r2
 8009cb2:	9201      	str	r2, [sp, #4]
 8009cb4:	f000 f87a 	bl	8009dac <_malloc_r>
 8009cb8:	9a01      	ldr	r2, [sp, #4]
 8009cba:	4605      	mov	r5, r0
 8009cbc:	b930      	cbnz	r0, 8009ccc <_calloc_r+0x24>
 8009cbe:	4628      	mov	r0, r5
 8009cc0:	b003      	add	sp, #12
 8009cc2:	bd30      	pop	{r4, r5, pc}
 8009cc4:	220c      	movs	r2, #12
 8009cc6:	6002      	str	r2, [r0, #0]
 8009cc8:	2500      	movs	r5, #0
 8009cca:	e7f8      	b.n	8009cbe <_calloc_r+0x16>
 8009ccc:	4621      	mov	r1, r4
 8009cce:	f7fe f83d 	bl	8007d4c <memset>
 8009cd2:	e7f4      	b.n	8009cbe <_calloc_r+0x16>

08009cd4 <_free_r>:
 8009cd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cd6:	2900      	cmp	r1, #0
 8009cd8:	d044      	beq.n	8009d64 <_free_r+0x90>
 8009cda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cde:	9001      	str	r0, [sp, #4]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f1a1 0404 	sub.w	r4, r1, #4
 8009ce6:	bfb8      	it	lt
 8009ce8:	18e4      	addlt	r4, r4, r3
 8009cea:	f000 fe55 	bl	800a998 <__malloc_lock>
 8009cee:	4a1e      	ldr	r2, [pc, #120]	; (8009d68 <_free_r+0x94>)
 8009cf0:	9801      	ldr	r0, [sp, #4]
 8009cf2:	6813      	ldr	r3, [r2, #0]
 8009cf4:	b933      	cbnz	r3, 8009d04 <_free_r+0x30>
 8009cf6:	6063      	str	r3, [r4, #4]
 8009cf8:	6014      	str	r4, [r2, #0]
 8009cfa:	b003      	add	sp, #12
 8009cfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d00:	f000 be50 	b.w	800a9a4 <__malloc_unlock>
 8009d04:	42a3      	cmp	r3, r4
 8009d06:	d908      	bls.n	8009d1a <_free_r+0x46>
 8009d08:	6825      	ldr	r5, [r4, #0]
 8009d0a:	1961      	adds	r1, r4, r5
 8009d0c:	428b      	cmp	r3, r1
 8009d0e:	bf01      	itttt	eq
 8009d10:	6819      	ldreq	r1, [r3, #0]
 8009d12:	685b      	ldreq	r3, [r3, #4]
 8009d14:	1949      	addeq	r1, r1, r5
 8009d16:	6021      	streq	r1, [r4, #0]
 8009d18:	e7ed      	b.n	8009cf6 <_free_r+0x22>
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	b10b      	cbz	r3, 8009d24 <_free_r+0x50>
 8009d20:	42a3      	cmp	r3, r4
 8009d22:	d9fa      	bls.n	8009d1a <_free_r+0x46>
 8009d24:	6811      	ldr	r1, [r2, #0]
 8009d26:	1855      	adds	r5, r2, r1
 8009d28:	42a5      	cmp	r5, r4
 8009d2a:	d10b      	bne.n	8009d44 <_free_r+0x70>
 8009d2c:	6824      	ldr	r4, [r4, #0]
 8009d2e:	4421      	add	r1, r4
 8009d30:	1854      	adds	r4, r2, r1
 8009d32:	42a3      	cmp	r3, r4
 8009d34:	6011      	str	r1, [r2, #0]
 8009d36:	d1e0      	bne.n	8009cfa <_free_r+0x26>
 8009d38:	681c      	ldr	r4, [r3, #0]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	6053      	str	r3, [r2, #4]
 8009d3e:	4421      	add	r1, r4
 8009d40:	6011      	str	r1, [r2, #0]
 8009d42:	e7da      	b.n	8009cfa <_free_r+0x26>
 8009d44:	d902      	bls.n	8009d4c <_free_r+0x78>
 8009d46:	230c      	movs	r3, #12
 8009d48:	6003      	str	r3, [r0, #0]
 8009d4a:	e7d6      	b.n	8009cfa <_free_r+0x26>
 8009d4c:	6825      	ldr	r5, [r4, #0]
 8009d4e:	1961      	adds	r1, r4, r5
 8009d50:	428b      	cmp	r3, r1
 8009d52:	bf04      	itt	eq
 8009d54:	6819      	ldreq	r1, [r3, #0]
 8009d56:	685b      	ldreq	r3, [r3, #4]
 8009d58:	6063      	str	r3, [r4, #4]
 8009d5a:	bf04      	itt	eq
 8009d5c:	1949      	addeq	r1, r1, r5
 8009d5e:	6021      	streq	r1, [r4, #0]
 8009d60:	6054      	str	r4, [r2, #4]
 8009d62:	e7ca      	b.n	8009cfa <_free_r+0x26>
 8009d64:	b003      	add	sp, #12
 8009d66:	bd30      	pop	{r4, r5, pc}
 8009d68:	20001418 	.word	0x20001418

08009d6c <sbrk_aligned>:
 8009d6c:	b570      	push	{r4, r5, r6, lr}
 8009d6e:	4e0e      	ldr	r6, [pc, #56]	; (8009da8 <sbrk_aligned+0x3c>)
 8009d70:	460c      	mov	r4, r1
 8009d72:	6831      	ldr	r1, [r6, #0]
 8009d74:	4605      	mov	r5, r0
 8009d76:	b911      	cbnz	r1, 8009d7e <sbrk_aligned+0x12>
 8009d78:	f000 fb42 	bl	800a400 <_sbrk_r>
 8009d7c:	6030      	str	r0, [r6, #0]
 8009d7e:	4621      	mov	r1, r4
 8009d80:	4628      	mov	r0, r5
 8009d82:	f000 fb3d 	bl	800a400 <_sbrk_r>
 8009d86:	1c43      	adds	r3, r0, #1
 8009d88:	d00a      	beq.n	8009da0 <sbrk_aligned+0x34>
 8009d8a:	1cc4      	adds	r4, r0, #3
 8009d8c:	f024 0403 	bic.w	r4, r4, #3
 8009d90:	42a0      	cmp	r0, r4
 8009d92:	d007      	beq.n	8009da4 <sbrk_aligned+0x38>
 8009d94:	1a21      	subs	r1, r4, r0
 8009d96:	4628      	mov	r0, r5
 8009d98:	f000 fb32 	bl	800a400 <_sbrk_r>
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	d101      	bne.n	8009da4 <sbrk_aligned+0x38>
 8009da0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009da4:	4620      	mov	r0, r4
 8009da6:	bd70      	pop	{r4, r5, r6, pc}
 8009da8:	2000141c 	.word	0x2000141c

08009dac <_malloc_r>:
 8009dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009db0:	1ccd      	adds	r5, r1, #3
 8009db2:	f025 0503 	bic.w	r5, r5, #3
 8009db6:	3508      	adds	r5, #8
 8009db8:	2d0c      	cmp	r5, #12
 8009dba:	bf38      	it	cc
 8009dbc:	250c      	movcc	r5, #12
 8009dbe:	2d00      	cmp	r5, #0
 8009dc0:	4607      	mov	r7, r0
 8009dc2:	db01      	blt.n	8009dc8 <_malloc_r+0x1c>
 8009dc4:	42a9      	cmp	r1, r5
 8009dc6:	d905      	bls.n	8009dd4 <_malloc_r+0x28>
 8009dc8:	230c      	movs	r3, #12
 8009dca:	603b      	str	r3, [r7, #0]
 8009dcc:	2600      	movs	r6, #0
 8009dce:	4630      	mov	r0, r6
 8009dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dd4:	4e2e      	ldr	r6, [pc, #184]	; (8009e90 <_malloc_r+0xe4>)
 8009dd6:	f000 fddf 	bl	800a998 <__malloc_lock>
 8009dda:	6833      	ldr	r3, [r6, #0]
 8009ddc:	461c      	mov	r4, r3
 8009dde:	bb34      	cbnz	r4, 8009e2e <_malloc_r+0x82>
 8009de0:	4629      	mov	r1, r5
 8009de2:	4638      	mov	r0, r7
 8009de4:	f7ff ffc2 	bl	8009d6c <sbrk_aligned>
 8009de8:	1c43      	adds	r3, r0, #1
 8009dea:	4604      	mov	r4, r0
 8009dec:	d14d      	bne.n	8009e8a <_malloc_r+0xde>
 8009dee:	6834      	ldr	r4, [r6, #0]
 8009df0:	4626      	mov	r6, r4
 8009df2:	2e00      	cmp	r6, #0
 8009df4:	d140      	bne.n	8009e78 <_malloc_r+0xcc>
 8009df6:	6823      	ldr	r3, [r4, #0]
 8009df8:	4631      	mov	r1, r6
 8009dfa:	4638      	mov	r0, r7
 8009dfc:	eb04 0803 	add.w	r8, r4, r3
 8009e00:	f000 fafe 	bl	800a400 <_sbrk_r>
 8009e04:	4580      	cmp	r8, r0
 8009e06:	d13a      	bne.n	8009e7e <_malloc_r+0xd2>
 8009e08:	6821      	ldr	r1, [r4, #0]
 8009e0a:	3503      	adds	r5, #3
 8009e0c:	1a6d      	subs	r5, r5, r1
 8009e0e:	f025 0503 	bic.w	r5, r5, #3
 8009e12:	3508      	adds	r5, #8
 8009e14:	2d0c      	cmp	r5, #12
 8009e16:	bf38      	it	cc
 8009e18:	250c      	movcc	r5, #12
 8009e1a:	4629      	mov	r1, r5
 8009e1c:	4638      	mov	r0, r7
 8009e1e:	f7ff ffa5 	bl	8009d6c <sbrk_aligned>
 8009e22:	3001      	adds	r0, #1
 8009e24:	d02b      	beq.n	8009e7e <_malloc_r+0xd2>
 8009e26:	6823      	ldr	r3, [r4, #0]
 8009e28:	442b      	add	r3, r5
 8009e2a:	6023      	str	r3, [r4, #0]
 8009e2c:	e00e      	b.n	8009e4c <_malloc_r+0xa0>
 8009e2e:	6822      	ldr	r2, [r4, #0]
 8009e30:	1b52      	subs	r2, r2, r5
 8009e32:	d41e      	bmi.n	8009e72 <_malloc_r+0xc6>
 8009e34:	2a0b      	cmp	r2, #11
 8009e36:	d916      	bls.n	8009e66 <_malloc_r+0xba>
 8009e38:	1961      	adds	r1, r4, r5
 8009e3a:	42a3      	cmp	r3, r4
 8009e3c:	6025      	str	r5, [r4, #0]
 8009e3e:	bf18      	it	ne
 8009e40:	6059      	strne	r1, [r3, #4]
 8009e42:	6863      	ldr	r3, [r4, #4]
 8009e44:	bf08      	it	eq
 8009e46:	6031      	streq	r1, [r6, #0]
 8009e48:	5162      	str	r2, [r4, r5]
 8009e4a:	604b      	str	r3, [r1, #4]
 8009e4c:	4638      	mov	r0, r7
 8009e4e:	f104 060b 	add.w	r6, r4, #11
 8009e52:	f000 fda7 	bl	800a9a4 <__malloc_unlock>
 8009e56:	f026 0607 	bic.w	r6, r6, #7
 8009e5a:	1d23      	adds	r3, r4, #4
 8009e5c:	1af2      	subs	r2, r6, r3
 8009e5e:	d0b6      	beq.n	8009dce <_malloc_r+0x22>
 8009e60:	1b9b      	subs	r3, r3, r6
 8009e62:	50a3      	str	r3, [r4, r2]
 8009e64:	e7b3      	b.n	8009dce <_malloc_r+0x22>
 8009e66:	6862      	ldr	r2, [r4, #4]
 8009e68:	42a3      	cmp	r3, r4
 8009e6a:	bf0c      	ite	eq
 8009e6c:	6032      	streq	r2, [r6, #0]
 8009e6e:	605a      	strne	r2, [r3, #4]
 8009e70:	e7ec      	b.n	8009e4c <_malloc_r+0xa0>
 8009e72:	4623      	mov	r3, r4
 8009e74:	6864      	ldr	r4, [r4, #4]
 8009e76:	e7b2      	b.n	8009dde <_malloc_r+0x32>
 8009e78:	4634      	mov	r4, r6
 8009e7a:	6876      	ldr	r6, [r6, #4]
 8009e7c:	e7b9      	b.n	8009df2 <_malloc_r+0x46>
 8009e7e:	230c      	movs	r3, #12
 8009e80:	603b      	str	r3, [r7, #0]
 8009e82:	4638      	mov	r0, r7
 8009e84:	f000 fd8e 	bl	800a9a4 <__malloc_unlock>
 8009e88:	e7a1      	b.n	8009dce <_malloc_r+0x22>
 8009e8a:	6025      	str	r5, [r4, #0]
 8009e8c:	e7de      	b.n	8009e4c <_malloc_r+0xa0>
 8009e8e:	bf00      	nop
 8009e90:	20001418 	.word	0x20001418

08009e94 <__ssputs_r>:
 8009e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e98:	688e      	ldr	r6, [r1, #8]
 8009e9a:	429e      	cmp	r6, r3
 8009e9c:	4682      	mov	sl, r0
 8009e9e:	460c      	mov	r4, r1
 8009ea0:	4690      	mov	r8, r2
 8009ea2:	461f      	mov	r7, r3
 8009ea4:	d838      	bhi.n	8009f18 <__ssputs_r+0x84>
 8009ea6:	898a      	ldrh	r2, [r1, #12]
 8009ea8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009eac:	d032      	beq.n	8009f14 <__ssputs_r+0x80>
 8009eae:	6825      	ldr	r5, [r4, #0]
 8009eb0:	6909      	ldr	r1, [r1, #16]
 8009eb2:	eba5 0901 	sub.w	r9, r5, r1
 8009eb6:	6965      	ldr	r5, [r4, #20]
 8009eb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ebc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	444b      	add	r3, r9
 8009ec4:	106d      	asrs	r5, r5, #1
 8009ec6:	429d      	cmp	r5, r3
 8009ec8:	bf38      	it	cc
 8009eca:	461d      	movcc	r5, r3
 8009ecc:	0553      	lsls	r3, r2, #21
 8009ece:	d531      	bpl.n	8009f34 <__ssputs_r+0xa0>
 8009ed0:	4629      	mov	r1, r5
 8009ed2:	f7ff ff6b 	bl	8009dac <_malloc_r>
 8009ed6:	4606      	mov	r6, r0
 8009ed8:	b950      	cbnz	r0, 8009ef0 <__ssputs_r+0x5c>
 8009eda:	230c      	movs	r3, #12
 8009edc:	f8ca 3000 	str.w	r3, [sl]
 8009ee0:	89a3      	ldrh	r3, [r4, #12]
 8009ee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ee6:	81a3      	strh	r3, [r4, #12]
 8009ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ef0:	6921      	ldr	r1, [r4, #16]
 8009ef2:	464a      	mov	r2, r9
 8009ef4:	f7fd ff1c 	bl	8007d30 <memcpy>
 8009ef8:	89a3      	ldrh	r3, [r4, #12]
 8009efa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f02:	81a3      	strh	r3, [r4, #12]
 8009f04:	6126      	str	r6, [r4, #16]
 8009f06:	6165      	str	r5, [r4, #20]
 8009f08:	444e      	add	r6, r9
 8009f0a:	eba5 0509 	sub.w	r5, r5, r9
 8009f0e:	6026      	str	r6, [r4, #0]
 8009f10:	60a5      	str	r5, [r4, #8]
 8009f12:	463e      	mov	r6, r7
 8009f14:	42be      	cmp	r6, r7
 8009f16:	d900      	bls.n	8009f1a <__ssputs_r+0x86>
 8009f18:	463e      	mov	r6, r7
 8009f1a:	6820      	ldr	r0, [r4, #0]
 8009f1c:	4632      	mov	r2, r6
 8009f1e:	4641      	mov	r1, r8
 8009f20:	f000 fd20 	bl	800a964 <memmove>
 8009f24:	68a3      	ldr	r3, [r4, #8]
 8009f26:	1b9b      	subs	r3, r3, r6
 8009f28:	60a3      	str	r3, [r4, #8]
 8009f2a:	6823      	ldr	r3, [r4, #0]
 8009f2c:	4433      	add	r3, r6
 8009f2e:	6023      	str	r3, [r4, #0]
 8009f30:	2000      	movs	r0, #0
 8009f32:	e7db      	b.n	8009eec <__ssputs_r+0x58>
 8009f34:	462a      	mov	r2, r5
 8009f36:	f000 fd3b 	bl	800a9b0 <_realloc_r>
 8009f3a:	4606      	mov	r6, r0
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	d1e1      	bne.n	8009f04 <__ssputs_r+0x70>
 8009f40:	6921      	ldr	r1, [r4, #16]
 8009f42:	4650      	mov	r0, sl
 8009f44:	f7ff fec6 	bl	8009cd4 <_free_r>
 8009f48:	e7c7      	b.n	8009eda <__ssputs_r+0x46>
	...

08009f4c <_svfiprintf_r>:
 8009f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f50:	4698      	mov	r8, r3
 8009f52:	898b      	ldrh	r3, [r1, #12]
 8009f54:	061b      	lsls	r3, r3, #24
 8009f56:	b09d      	sub	sp, #116	; 0x74
 8009f58:	4607      	mov	r7, r0
 8009f5a:	460d      	mov	r5, r1
 8009f5c:	4614      	mov	r4, r2
 8009f5e:	d50e      	bpl.n	8009f7e <_svfiprintf_r+0x32>
 8009f60:	690b      	ldr	r3, [r1, #16]
 8009f62:	b963      	cbnz	r3, 8009f7e <_svfiprintf_r+0x32>
 8009f64:	2140      	movs	r1, #64	; 0x40
 8009f66:	f7ff ff21 	bl	8009dac <_malloc_r>
 8009f6a:	6028      	str	r0, [r5, #0]
 8009f6c:	6128      	str	r0, [r5, #16]
 8009f6e:	b920      	cbnz	r0, 8009f7a <_svfiprintf_r+0x2e>
 8009f70:	230c      	movs	r3, #12
 8009f72:	603b      	str	r3, [r7, #0]
 8009f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f78:	e0d1      	b.n	800a11e <_svfiprintf_r+0x1d2>
 8009f7a:	2340      	movs	r3, #64	; 0x40
 8009f7c:	616b      	str	r3, [r5, #20]
 8009f7e:	2300      	movs	r3, #0
 8009f80:	9309      	str	r3, [sp, #36]	; 0x24
 8009f82:	2320      	movs	r3, #32
 8009f84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f88:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f8c:	2330      	movs	r3, #48	; 0x30
 8009f8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a138 <_svfiprintf_r+0x1ec>
 8009f92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f96:	f04f 0901 	mov.w	r9, #1
 8009f9a:	4623      	mov	r3, r4
 8009f9c:	469a      	mov	sl, r3
 8009f9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fa2:	b10a      	cbz	r2, 8009fa8 <_svfiprintf_r+0x5c>
 8009fa4:	2a25      	cmp	r2, #37	; 0x25
 8009fa6:	d1f9      	bne.n	8009f9c <_svfiprintf_r+0x50>
 8009fa8:	ebba 0b04 	subs.w	fp, sl, r4
 8009fac:	d00b      	beq.n	8009fc6 <_svfiprintf_r+0x7a>
 8009fae:	465b      	mov	r3, fp
 8009fb0:	4622      	mov	r2, r4
 8009fb2:	4629      	mov	r1, r5
 8009fb4:	4638      	mov	r0, r7
 8009fb6:	f7ff ff6d 	bl	8009e94 <__ssputs_r>
 8009fba:	3001      	adds	r0, #1
 8009fbc:	f000 80aa 	beq.w	800a114 <_svfiprintf_r+0x1c8>
 8009fc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fc2:	445a      	add	r2, fp
 8009fc4:	9209      	str	r2, [sp, #36]	; 0x24
 8009fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	f000 80a2 	beq.w	800a114 <_svfiprintf_r+0x1c8>
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009fd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fda:	f10a 0a01 	add.w	sl, sl, #1
 8009fde:	9304      	str	r3, [sp, #16]
 8009fe0:	9307      	str	r3, [sp, #28]
 8009fe2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fe6:	931a      	str	r3, [sp, #104]	; 0x68
 8009fe8:	4654      	mov	r4, sl
 8009fea:	2205      	movs	r2, #5
 8009fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ff0:	4851      	ldr	r0, [pc, #324]	; (800a138 <_svfiprintf_r+0x1ec>)
 8009ff2:	f7f6 f90d 	bl	8000210 <memchr>
 8009ff6:	9a04      	ldr	r2, [sp, #16]
 8009ff8:	b9d8      	cbnz	r0, 800a032 <_svfiprintf_r+0xe6>
 8009ffa:	06d0      	lsls	r0, r2, #27
 8009ffc:	bf44      	itt	mi
 8009ffe:	2320      	movmi	r3, #32
 800a000:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a004:	0711      	lsls	r1, r2, #28
 800a006:	bf44      	itt	mi
 800a008:	232b      	movmi	r3, #43	; 0x2b
 800a00a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a00e:	f89a 3000 	ldrb.w	r3, [sl]
 800a012:	2b2a      	cmp	r3, #42	; 0x2a
 800a014:	d015      	beq.n	800a042 <_svfiprintf_r+0xf6>
 800a016:	9a07      	ldr	r2, [sp, #28]
 800a018:	4654      	mov	r4, sl
 800a01a:	2000      	movs	r0, #0
 800a01c:	f04f 0c0a 	mov.w	ip, #10
 800a020:	4621      	mov	r1, r4
 800a022:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a026:	3b30      	subs	r3, #48	; 0x30
 800a028:	2b09      	cmp	r3, #9
 800a02a:	d94e      	bls.n	800a0ca <_svfiprintf_r+0x17e>
 800a02c:	b1b0      	cbz	r0, 800a05c <_svfiprintf_r+0x110>
 800a02e:	9207      	str	r2, [sp, #28]
 800a030:	e014      	b.n	800a05c <_svfiprintf_r+0x110>
 800a032:	eba0 0308 	sub.w	r3, r0, r8
 800a036:	fa09 f303 	lsl.w	r3, r9, r3
 800a03a:	4313      	orrs	r3, r2
 800a03c:	9304      	str	r3, [sp, #16]
 800a03e:	46a2      	mov	sl, r4
 800a040:	e7d2      	b.n	8009fe8 <_svfiprintf_r+0x9c>
 800a042:	9b03      	ldr	r3, [sp, #12]
 800a044:	1d19      	adds	r1, r3, #4
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	9103      	str	r1, [sp, #12]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	bfbb      	ittet	lt
 800a04e:	425b      	neglt	r3, r3
 800a050:	f042 0202 	orrlt.w	r2, r2, #2
 800a054:	9307      	strge	r3, [sp, #28]
 800a056:	9307      	strlt	r3, [sp, #28]
 800a058:	bfb8      	it	lt
 800a05a:	9204      	strlt	r2, [sp, #16]
 800a05c:	7823      	ldrb	r3, [r4, #0]
 800a05e:	2b2e      	cmp	r3, #46	; 0x2e
 800a060:	d10c      	bne.n	800a07c <_svfiprintf_r+0x130>
 800a062:	7863      	ldrb	r3, [r4, #1]
 800a064:	2b2a      	cmp	r3, #42	; 0x2a
 800a066:	d135      	bne.n	800a0d4 <_svfiprintf_r+0x188>
 800a068:	9b03      	ldr	r3, [sp, #12]
 800a06a:	1d1a      	adds	r2, r3, #4
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	9203      	str	r2, [sp, #12]
 800a070:	2b00      	cmp	r3, #0
 800a072:	bfb8      	it	lt
 800a074:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a078:	3402      	adds	r4, #2
 800a07a:	9305      	str	r3, [sp, #20]
 800a07c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a148 <_svfiprintf_r+0x1fc>
 800a080:	7821      	ldrb	r1, [r4, #0]
 800a082:	2203      	movs	r2, #3
 800a084:	4650      	mov	r0, sl
 800a086:	f7f6 f8c3 	bl	8000210 <memchr>
 800a08a:	b140      	cbz	r0, 800a09e <_svfiprintf_r+0x152>
 800a08c:	2340      	movs	r3, #64	; 0x40
 800a08e:	eba0 000a 	sub.w	r0, r0, sl
 800a092:	fa03 f000 	lsl.w	r0, r3, r0
 800a096:	9b04      	ldr	r3, [sp, #16]
 800a098:	4303      	orrs	r3, r0
 800a09a:	3401      	adds	r4, #1
 800a09c:	9304      	str	r3, [sp, #16]
 800a09e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0a2:	4826      	ldr	r0, [pc, #152]	; (800a13c <_svfiprintf_r+0x1f0>)
 800a0a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0a8:	2206      	movs	r2, #6
 800a0aa:	f7f6 f8b1 	bl	8000210 <memchr>
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	d038      	beq.n	800a124 <_svfiprintf_r+0x1d8>
 800a0b2:	4b23      	ldr	r3, [pc, #140]	; (800a140 <_svfiprintf_r+0x1f4>)
 800a0b4:	bb1b      	cbnz	r3, 800a0fe <_svfiprintf_r+0x1b2>
 800a0b6:	9b03      	ldr	r3, [sp, #12]
 800a0b8:	3307      	adds	r3, #7
 800a0ba:	f023 0307 	bic.w	r3, r3, #7
 800a0be:	3308      	adds	r3, #8
 800a0c0:	9303      	str	r3, [sp, #12]
 800a0c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0c4:	4433      	add	r3, r6
 800a0c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a0c8:	e767      	b.n	8009f9a <_svfiprintf_r+0x4e>
 800a0ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0ce:	460c      	mov	r4, r1
 800a0d0:	2001      	movs	r0, #1
 800a0d2:	e7a5      	b.n	800a020 <_svfiprintf_r+0xd4>
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	3401      	adds	r4, #1
 800a0d8:	9305      	str	r3, [sp, #20]
 800a0da:	4619      	mov	r1, r3
 800a0dc:	f04f 0c0a 	mov.w	ip, #10
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0e6:	3a30      	subs	r2, #48	; 0x30
 800a0e8:	2a09      	cmp	r2, #9
 800a0ea:	d903      	bls.n	800a0f4 <_svfiprintf_r+0x1a8>
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d0c5      	beq.n	800a07c <_svfiprintf_r+0x130>
 800a0f0:	9105      	str	r1, [sp, #20]
 800a0f2:	e7c3      	b.n	800a07c <_svfiprintf_r+0x130>
 800a0f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e7f0      	b.n	800a0e0 <_svfiprintf_r+0x194>
 800a0fe:	ab03      	add	r3, sp, #12
 800a100:	9300      	str	r3, [sp, #0]
 800a102:	462a      	mov	r2, r5
 800a104:	4b0f      	ldr	r3, [pc, #60]	; (800a144 <_svfiprintf_r+0x1f8>)
 800a106:	a904      	add	r1, sp, #16
 800a108:	4638      	mov	r0, r7
 800a10a:	f7fd fec7 	bl	8007e9c <_printf_float>
 800a10e:	1c42      	adds	r2, r0, #1
 800a110:	4606      	mov	r6, r0
 800a112:	d1d6      	bne.n	800a0c2 <_svfiprintf_r+0x176>
 800a114:	89ab      	ldrh	r3, [r5, #12]
 800a116:	065b      	lsls	r3, r3, #25
 800a118:	f53f af2c 	bmi.w	8009f74 <_svfiprintf_r+0x28>
 800a11c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a11e:	b01d      	add	sp, #116	; 0x74
 800a120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a124:	ab03      	add	r3, sp, #12
 800a126:	9300      	str	r3, [sp, #0]
 800a128:	462a      	mov	r2, r5
 800a12a:	4b06      	ldr	r3, [pc, #24]	; (800a144 <_svfiprintf_r+0x1f8>)
 800a12c:	a904      	add	r1, sp, #16
 800a12e:	4638      	mov	r0, r7
 800a130:	f7fe f958 	bl	80083e4 <_printf_i>
 800a134:	e7eb      	b.n	800a10e <_svfiprintf_r+0x1c2>
 800a136:	bf00      	nop
 800a138:	0800af84 	.word	0x0800af84
 800a13c:	0800af8e 	.word	0x0800af8e
 800a140:	08007e9d 	.word	0x08007e9d
 800a144:	08009e95 	.word	0x08009e95
 800a148:	0800af8a 	.word	0x0800af8a

0800a14c <__sfputc_r>:
 800a14c:	6893      	ldr	r3, [r2, #8]
 800a14e:	3b01      	subs	r3, #1
 800a150:	2b00      	cmp	r3, #0
 800a152:	b410      	push	{r4}
 800a154:	6093      	str	r3, [r2, #8]
 800a156:	da08      	bge.n	800a16a <__sfputc_r+0x1e>
 800a158:	6994      	ldr	r4, [r2, #24]
 800a15a:	42a3      	cmp	r3, r4
 800a15c:	db01      	blt.n	800a162 <__sfputc_r+0x16>
 800a15e:	290a      	cmp	r1, #10
 800a160:	d103      	bne.n	800a16a <__sfputc_r+0x1e>
 800a162:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a166:	f000 b99f 	b.w	800a4a8 <__swbuf_r>
 800a16a:	6813      	ldr	r3, [r2, #0]
 800a16c:	1c58      	adds	r0, r3, #1
 800a16e:	6010      	str	r0, [r2, #0]
 800a170:	7019      	strb	r1, [r3, #0]
 800a172:	4608      	mov	r0, r1
 800a174:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a178:	4770      	bx	lr

0800a17a <__sfputs_r>:
 800a17a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a17c:	4606      	mov	r6, r0
 800a17e:	460f      	mov	r7, r1
 800a180:	4614      	mov	r4, r2
 800a182:	18d5      	adds	r5, r2, r3
 800a184:	42ac      	cmp	r4, r5
 800a186:	d101      	bne.n	800a18c <__sfputs_r+0x12>
 800a188:	2000      	movs	r0, #0
 800a18a:	e007      	b.n	800a19c <__sfputs_r+0x22>
 800a18c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a190:	463a      	mov	r2, r7
 800a192:	4630      	mov	r0, r6
 800a194:	f7ff ffda 	bl	800a14c <__sfputc_r>
 800a198:	1c43      	adds	r3, r0, #1
 800a19a:	d1f3      	bne.n	800a184 <__sfputs_r+0xa>
 800a19c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a1a0 <_vfiprintf_r>:
 800a1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a4:	460d      	mov	r5, r1
 800a1a6:	b09d      	sub	sp, #116	; 0x74
 800a1a8:	4614      	mov	r4, r2
 800a1aa:	4698      	mov	r8, r3
 800a1ac:	4606      	mov	r6, r0
 800a1ae:	b118      	cbz	r0, 800a1b8 <_vfiprintf_r+0x18>
 800a1b0:	6983      	ldr	r3, [r0, #24]
 800a1b2:	b90b      	cbnz	r3, 800a1b8 <_vfiprintf_r+0x18>
 800a1b4:	f7ff f946 	bl	8009444 <__sinit>
 800a1b8:	4b89      	ldr	r3, [pc, #548]	; (800a3e0 <_vfiprintf_r+0x240>)
 800a1ba:	429d      	cmp	r5, r3
 800a1bc:	d11b      	bne.n	800a1f6 <_vfiprintf_r+0x56>
 800a1be:	6875      	ldr	r5, [r6, #4]
 800a1c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1c2:	07d9      	lsls	r1, r3, #31
 800a1c4:	d405      	bmi.n	800a1d2 <_vfiprintf_r+0x32>
 800a1c6:	89ab      	ldrh	r3, [r5, #12]
 800a1c8:	059a      	lsls	r2, r3, #22
 800a1ca:	d402      	bmi.n	800a1d2 <_vfiprintf_r+0x32>
 800a1cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1ce:	f7ff f9dc 	bl	800958a <__retarget_lock_acquire_recursive>
 800a1d2:	89ab      	ldrh	r3, [r5, #12]
 800a1d4:	071b      	lsls	r3, r3, #28
 800a1d6:	d501      	bpl.n	800a1dc <_vfiprintf_r+0x3c>
 800a1d8:	692b      	ldr	r3, [r5, #16]
 800a1da:	b9eb      	cbnz	r3, 800a218 <_vfiprintf_r+0x78>
 800a1dc:	4629      	mov	r1, r5
 800a1de:	4630      	mov	r0, r6
 800a1e0:	f000 f9c6 	bl	800a570 <__swsetup_r>
 800a1e4:	b1c0      	cbz	r0, 800a218 <_vfiprintf_r+0x78>
 800a1e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1e8:	07dc      	lsls	r4, r3, #31
 800a1ea:	d50e      	bpl.n	800a20a <_vfiprintf_r+0x6a>
 800a1ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1f0:	b01d      	add	sp, #116	; 0x74
 800a1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f6:	4b7b      	ldr	r3, [pc, #492]	; (800a3e4 <_vfiprintf_r+0x244>)
 800a1f8:	429d      	cmp	r5, r3
 800a1fa:	d101      	bne.n	800a200 <_vfiprintf_r+0x60>
 800a1fc:	68b5      	ldr	r5, [r6, #8]
 800a1fe:	e7df      	b.n	800a1c0 <_vfiprintf_r+0x20>
 800a200:	4b79      	ldr	r3, [pc, #484]	; (800a3e8 <_vfiprintf_r+0x248>)
 800a202:	429d      	cmp	r5, r3
 800a204:	bf08      	it	eq
 800a206:	68f5      	ldreq	r5, [r6, #12]
 800a208:	e7da      	b.n	800a1c0 <_vfiprintf_r+0x20>
 800a20a:	89ab      	ldrh	r3, [r5, #12]
 800a20c:	0598      	lsls	r0, r3, #22
 800a20e:	d4ed      	bmi.n	800a1ec <_vfiprintf_r+0x4c>
 800a210:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a212:	f7ff f9bb 	bl	800958c <__retarget_lock_release_recursive>
 800a216:	e7e9      	b.n	800a1ec <_vfiprintf_r+0x4c>
 800a218:	2300      	movs	r3, #0
 800a21a:	9309      	str	r3, [sp, #36]	; 0x24
 800a21c:	2320      	movs	r3, #32
 800a21e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a222:	f8cd 800c 	str.w	r8, [sp, #12]
 800a226:	2330      	movs	r3, #48	; 0x30
 800a228:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a3ec <_vfiprintf_r+0x24c>
 800a22c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a230:	f04f 0901 	mov.w	r9, #1
 800a234:	4623      	mov	r3, r4
 800a236:	469a      	mov	sl, r3
 800a238:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a23c:	b10a      	cbz	r2, 800a242 <_vfiprintf_r+0xa2>
 800a23e:	2a25      	cmp	r2, #37	; 0x25
 800a240:	d1f9      	bne.n	800a236 <_vfiprintf_r+0x96>
 800a242:	ebba 0b04 	subs.w	fp, sl, r4
 800a246:	d00b      	beq.n	800a260 <_vfiprintf_r+0xc0>
 800a248:	465b      	mov	r3, fp
 800a24a:	4622      	mov	r2, r4
 800a24c:	4629      	mov	r1, r5
 800a24e:	4630      	mov	r0, r6
 800a250:	f7ff ff93 	bl	800a17a <__sfputs_r>
 800a254:	3001      	adds	r0, #1
 800a256:	f000 80aa 	beq.w	800a3ae <_vfiprintf_r+0x20e>
 800a25a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a25c:	445a      	add	r2, fp
 800a25e:	9209      	str	r2, [sp, #36]	; 0x24
 800a260:	f89a 3000 	ldrb.w	r3, [sl]
 800a264:	2b00      	cmp	r3, #0
 800a266:	f000 80a2 	beq.w	800a3ae <_vfiprintf_r+0x20e>
 800a26a:	2300      	movs	r3, #0
 800a26c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a270:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a274:	f10a 0a01 	add.w	sl, sl, #1
 800a278:	9304      	str	r3, [sp, #16]
 800a27a:	9307      	str	r3, [sp, #28]
 800a27c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a280:	931a      	str	r3, [sp, #104]	; 0x68
 800a282:	4654      	mov	r4, sl
 800a284:	2205      	movs	r2, #5
 800a286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a28a:	4858      	ldr	r0, [pc, #352]	; (800a3ec <_vfiprintf_r+0x24c>)
 800a28c:	f7f5 ffc0 	bl	8000210 <memchr>
 800a290:	9a04      	ldr	r2, [sp, #16]
 800a292:	b9d8      	cbnz	r0, 800a2cc <_vfiprintf_r+0x12c>
 800a294:	06d1      	lsls	r1, r2, #27
 800a296:	bf44      	itt	mi
 800a298:	2320      	movmi	r3, #32
 800a29a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a29e:	0713      	lsls	r3, r2, #28
 800a2a0:	bf44      	itt	mi
 800a2a2:	232b      	movmi	r3, #43	; 0x2b
 800a2a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2a8:	f89a 3000 	ldrb.w	r3, [sl]
 800a2ac:	2b2a      	cmp	r3, #42	; 0x2a
 800a2ae:	d015      	beq.n	800a2dc <_vfiprintf_r+0x13c>
 800a2b0:	9a07      	ldr	r2, [sp, #28]
 800a2b2:	4654      	mov	r4, sl
 800a2b4:	2000      	movs	r0, #0
 800a2b6:	f04f 0c0a 	mov.w	ip, #10
 800a2ba:	4621      	mov	r1, r4
 800a2bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2c0:	3b30      	subs	r3, #48	; 0x30
 800a2c2:	2b09      	cmp	r3, #9
 800a2c4:	d94e      	bls.n	800a364 <_vfiprintf_r+0x1c4>
 800a2c6:	b1b0      	cbz	r0, 800a2f6 <_vfiprintf_r+0x156>
 800a2c8:	9207      	str	r2, [sp, #28]
 800a2ca:	e014      	b.n	800a2f6 <_vfiprintf_r+0x156>
 800a2cc:	eba0 0308 	sub.w	r3, r0, r8
 800a2d0:	fa09 f303 	lsl.w	r3, r9, r3
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	9304      	str	r3, [sp, #16]
 800a2d8:	46a2      	mov	sl, r4
 800a2da:	e7d2      	b.n	800a282 <_vfiprintf_r+0xe2>
 800a2dc:	9b03      	ldr	r3, [sp, #12]
 800a2de:	1d19      	adds	r1, r3, #4
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	9103      	str	r1, [sp, #12]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	bfbb      	ittet	lt
 800a2e8:	425b      	neglt	r3, r3
 800a2ea:	f042 0202 	orrlt.w	r2, r2, #2
 800a2ee:	9307      	strge	r3, [sp, #28]
 800a2f0:	9307      	strlt	r3, [sp, #28]
 800a2f2:	bfb8      	it	lt
 800a2f4:	9204      	strlt	r2, [sp, #16]
 800a2f6:	7823      	ldrb	r3, [r4, #0]
 800a2f8:	2b2e      	cmp	r3, #46	; 0x2e
 800a2fa:	d10c      	bne.n	800a316 <_vfiprintf_r+0x176>
 800a2fc:	7863      	ldrb	r3, [r4, #1]
 800a2fe:	2b2a      	cmp	r3, #42	; 0x2a
 800a300:	d135      	bne.n	800a36e <_vfiprintf_r+0x1ce>
 800a302:	9b03      	ldr	r3, [sp, #12]
 800a304:	1d1a      	adds	r2, r3, #4
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	9203      	str	r2, [sp, #12]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	bfb8      	it	lt
 800a30e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a312:	3402      	adds	r4, #2
 800a314:	9305      	str	r3, [sp, #20]
 800a316:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a3fc <_vfiprintf_r+0x25c>
 800a31a:	7821      	ldrb	r1, [r4, #0]
 800a31c:	2203      	movs	r2, #3
 800a31e:	4650      	mov	r0, sl
 800a320:	f7f5 ff76 	bl	8000210 <memchr>
 800a324:	b140      	cbz	r0, 800a338 <_vfiprintf_r+0x198>
 800a326:	2340      	movs	r3, #64	; 0x40
 800a328:	eba0 000a 	sub.w	r0, r0, sl
 800a32c:	fa03 f000 	lsl.w	r0, r3, r0
 800a330:	9b04      	ldr	r3, [sp, #16]
 800a332:	4303      	orrs	r3, r0
 800a334:	3401      	adds	r4, #1
 800a336:	9304      	str	r3, [sp, #16]
 800a338:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a33c:	482c      	ldr	r0, [pc, #176]	; (800a3f0 <_vfiprintf_r+0x250>)
 800a33e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a342:	2206      	movs	r2, #6
 800a344:	f7f5 ff64 	bl	8000210 <memchr>
 800a348:	2800      	cmp	r0, #0
 800a34a:	d03f      	beq.n	800a3cc <_vfiprintf_r+0x22c>
 800a34c:	4b29      	ldr	r3, [pc, #164]	; (800a3f4 <_vfiprintf_r+0x254>)
 800a34e:	bb1b      	cbnz	r3, 800a398 <_vfiprintf_r+0x1f8>
 800a350:	9b03      	ldr	r3, [sp, #12]
 800a352:	3307      	adds	r3, #7
 800a354:	f023 0307 	bic.w	r3, r3, #7
 800a358:	3308      	adds	r3, #8
 800a35a:	9303      	str	r3, [sp, #12]
 800a35c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a35e:	443b      	add	r3, r7
 800a360:	9309      	str	r3, [sp, #36]	; 0x24
 800a362:	e767      	b.n	800a234 <_vfiprintf_r+0x94>
 800a364:	fb0c 3202 	mla	r2, ip, r2, r3
 800a368:	460c      	mov	r4, r1
 800a36a:	2001      	movs	r0, #1
 800a36c:	e7a5      	b.n	800a2ba <_vfiprintf_r+0x11a>
 800a36e:	2300      	movs	r3, #0
 800a370:	3401      	adds	r4, #1
 800a372:	9305      	str	r3, [sp, #20]
 800a374:	4619      	mov	r1, r3
 800a376:	f04f 0c0a 	mov.w	ip, #10
 800a37a:	4620      	mov	r0, r4
 800a37c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a380:	3a30      	subs	r2, #48	; 0x30
 800a382:	2a09      	cmp	r2, #9
 800a384:	d903      	bls.n	800a38e <_vfiprintf_r+0x1ee>
 800a386:	2b00      	cmp	r3, #0
 800a388:	d0c5      	beq.n	800a316 <_vfiprintf_r+0x176>
 800a38a:	9105      	str	r1, [sp, #20]
 800a38c:	e7c3      	b.n	800a316 <_vfiprintf_r+0x176>
 800a38e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a392:	4604      	mov	r4, r0
 800a394:	2301      	movs	r3, #1
 800a396:	e7f0      	b.n	800a37a <_vfiprintf_r+0x1da>
 800a398:	ab03      	add	r3, sp, #12
 800a39a:	9300      	str	r3, [sp, #0]
 800a39c:	462a      	mov	r2, r5
 800a39e:	4b16      	ldr	r3, [pc, #88]	; (800a3f8 <_vfiprintf_r+0x258>)
 800a3a0:	a904      	add	r1, sp, #16
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	f7fd fd7a 	bl	8007e9c <_printf_float>
 800a3a8:	4607      	mov	r7, r0
 800a3aa:	1c78      	adds	r0, r7, #1
 800a3ac:	d1d6      	bne.n	800a35c <_vfiprintf_r+0x1bc>
 800a3ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3b0:	07d9      	lsls	r1, r3, #31
 800a3b2:	d405      	bmi.n	800a3c0 <_vfiprintf_r+0x220>
 800a3b4:	89ab      	ldrh	r3, [r5, #12]
 800a3b6:	059a      	lsls	r2, r3, #22
 800a3b8:	d402      	bmi.n	800a3c0 <_vfiprintf_r+0x220>
 800a3ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3bc:	f7ff f8e6 	bl	800958c <__retarget_lock_release_recursive>
 800a3c0:	89ab      	ldrh	r3, [r5, #12]
 800a3c2:	065b      	lsls	r3, r3, #25
 800a3c4:	f53f af12 	bmi.w	800a1ec <_vfiprintf_r+0x4c>
 800a3c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3ca:	e711      	b.n	800a1f0 <_vfiprintf_r+0x50>
 800a3cc:	ab03      	add	r3, sp, #12
 800a3ce:	9300      	str	r3, [sp, #0]
 800a3d0:	462a      	mov	r2, r5
 800a3d2:	4b09      	ldr	r3, [pc, #36]	; (800a3f8 <_vfiprintf_r+0x258>)
 800a3d4:	a904      	add	r1, sp, #16
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	f7fe f804 	bl	80083e4 <_printf_i>
 800a3dc:	e7e4      	b.n	800a3a8 <_vfiprintf_r+0x208>
 800a3de:	bf00      	nop
 800a3e0:	0800ade8 	.word	0x0800ade8
 800a3e4:	0800ae08 	.word	0x0800ae08
 800a3e8:	0800adc8 	.word	0x0800adc8
 800a3ec:	0800af84 	.word	0x0800af84
 800a3f0:	0800af8e 	.word	0x0800af8e
 800a3f4:	08007e9d 	.word	0x08007e9d
 800a3f8:	0800a17b 	.word	0x0800a17b
 800a3fc:	0800af8a 	.word	0x0800af8a

0800a400 <_sbrk_r>:
 800a400:	b538      	push	{r3, r4, r5, lr}
 800a402:	4d06      	ldr	r5, [pc, #24]	; (800a41c <_sbrk_r+0x1c>)
 800a404:	2300      	movs	r3, #0
 800a406:	4604      	mov	r4, r0
 800a408:	4608      	mov	r0, r1
 800a40a:	602b      	str	r3, [r5, #0]
 800a40c:	f7f8 f842 	bl	8002494 <_sbrk>
 800a410:	1c43      	adds	r3, r0, #1
 800a412:	d102      	bne.n	800a41a <_sbrk_r+0x1a>
 800a414:	682b      	ldr	r3, [r5, #0]
 800a416:	b103      	cbz	r3, 800a41a <_sbrk_r+0x1a>
 800a418:	6023      	str	r3, [r4, #0]
 800a41a:	bd38      	pop	{r3, r4, r5, pc}
 800a41c:	20001420 	.word	0x20001420

0800a420 <__sread>:
 800a420:	b510      	push	{r4, lr}
 800a422:	460c      	mov	r4, r1
 800a424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a428:	f000 faf2 	bl	800aa10 <_read_r>
 800a42c:	2800      	cmp	r0, #0
 800a42e:	bfab      	itete	ge
 800a430:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a432:	89a3      	ldrhlt	r3, [r4, #12]
 800a434:	181b      	addge	r3, r3, r0
 800a436:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a43a:	bfac      	ite	ge
 800a43c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a43e:	81a3      	strhlt	r3, [r4, #12]
 800a440:	bd10      	pop	{r4, pc}

0800a442 <__swrite>:
 800a442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a446:	461f      	mov	r7, r3
 800a448:	898b      	ldrh	r3, [r1, #12]
 800a44a:	05db      	lsls	r3, r3, #23
 800a44c:	4605      	mov	r5, r0
 800a44e:	460c      	mov	r4, r1
 800a450:	4616      	mov	r6, r2
 800a452:	d505      	bpl.n	800a460 <__swrite+0x1e>
 800a454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a458:	2302      	movs	r3, #2
 800a45a:	2200      	movs	r2, #0
 800a45c:	f000 f9f8 	bl	800a850 <_lseek_r>
 800a460:	89a3      	ldrh	r3, [r4, #12]
 800a462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a466:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a46a:	81a3      	strh	r3, [r4, #12]
 800a46c:	4632      	mov	r2, r6
 800a46e:	463b      	mov	r3, r7
 800a470:	4628      	mov	r0, r5
 800a472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a476:	f000 b869 	b.w	800a54c <_write_r>

0800a47a <__sseek>:
 800a47a:	b510      	push	{r4, lr}
 800a47c:	460c      	mov	r4, r1
 800a47e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a482:	f000 f9e5 	bl	800a850 <_lseek_r>
 800a486:	1c43      	adds	r3, r0, #1
 800a488:	89a3      	ldrh	r3, [r4, #12]
 800a48a:	bf15      	itete	ne
 800a48c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a48e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a492:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a496:	81a3      	strheq	r3, [r4, #12]
 800a498:	bf18      	it	ne
 800a49a:	81a3      	strhne	r3, [r4, #12]
 800a49c:	bd10      	pop	{r4, pc}

0800a49e <__sclose>:
 800a49e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4a2:	f000 b8f1 	b.w	800a688 <_close_r>
	...

0800a4a8 <__swbuf_r>:
 800a4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4aa:	460e      	mov	r6, r1
 800a4ac:	4614      	mov	r4, r2
 800a4ae:	4605      	mov	r5, r0
 800a4b0:	b118      	cbz	r0, 800a4ba <__swbuf_r+0x12>
 800a4b2:	6983      	ldr	r3, [r0, #24]
 800a4b4:	b90b      	cbnz	r3, 800a4ba <__swbuf_r+0x12>
 800a4b6:	f7fe ffc5 	bl	8009444 <__sinit>
 800a4ba:	4b21      	ldr	r3, [pc, #132]	; (800a540 <__swbuf_r+0x98>)
 800a4bc:	429c      	cmp	r4, r3
 800a4be:	d12b      	bne.n	800a518 <__swbuf_r+0x70>
 800a4c0:	686c      	ldr	r4, [r5, #4]
 800a4c2:	69a3      	ldr	r3, [r4, #24]
 800a4c4:	60a3      	str	r3, [r4, #8]
 800a4c6:	89a3      	ldrh	r3, [r4, #12]
 800a4c8:	071a      	lsls	r2, r3, #28
 800a4ca:	d52f      	bpl.n	800a52c <__swbuf_r+0x84>
 800a4cc:	6923      	ldr	r3, [r4, #16]
 800a4ce:	b36b      	cbz	r3, 800a52c <__swbuf_r+0x84>
 800a4d0:	6923      	ldr	r3, [r4, #16]
 800a4d2:	6820      	ldr	r0, [r4, #0]
 800a4d4:	1ac0      	subs	r0, r0, r3
 800a4d6:	6963      	ldr	r3, [r4, #20]
 800a4d8:	b2f6      	uxtb	r6, r6
 800a4da:	4283      	cmp	r3, r0
 800a4dc:	4637      	mov	r7, r6
 800a4de:	dc04      	bgt.n	800a4ea <__swbuf_r+0x42>
 800a4e0:	4621      	mov	r1, r4
 800a4e2:	4628      	mov	r0, r5
 800a4e4:	f000 f966 	bl	800a7b4 <_fflush_r>
 800a4e8:	bb30      	cbnz	r0, 800a538 <__swbuf_r+0x90>
 800a4ea:	68a3      	ldr	r3, [r4, #8]
 800a4ec:	3b01      	subs	r3, #1
 800a4ee:	60a3      	str	r3, [r4, #8]
 800a4f0:	6823      	ldr	r3, [r4, #0]
 800a4f2:	1c5a      	adds	r2, r3, #1
 800a4f4:	6022      	str	r2, [r4, #0]
 800a4f6:	701e      	strb	r6, [r3, #0]
 800a4f8:	6963      	ldr	r3, [r4, #20]
 800a4fa:	3001      	adds	r0, #1
 800a4fc:	4283      	cmp	r3, r0
 800a4fe:	d004      	beq.n	800a50a <__swbuf_r+0x62>
 800a500:	89a3      	ldrh	r3, [r4, #12]
 800a502:	07db      	lsls	r3, r3, #31
 800a504:	d506      	bpl.n	800a514 <__swbuf_r+0x6c>
 800a506:	2e0a      	cmp	r6, #10
 800a508:	d104      	bne.n	800a514 <__swbuf_r+0x6c>
 800a50a:	4621      	mov	r1, r4
 800a50c:	4628      	mov	r0, r5
 800a50e:	f000 f951 	bl	800a7b4 <_fflush_r>
 800a512:	b988      	cbnz	r0, 800a538 <__swbuf_r+0x90>
 800a514:	4638      	mov	r0, r7
 800a516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a518:	4b0a      	ldr	r3, [pc, #40]	; (800a544 <__swbuf_r+0x9c>)
 800a51a:	429c      	cmp	r4, r3
 800a51c:	d101      	bne.n	800a522 <__swbuf_r+0x7a>
 800a51e:	68ac      	ldr	r4, [r5, #8]
 800a520:	e7cf      	b.n	800a4c2 <__swbuf_r+0x1a>
 800a522:	4b09      	ldr	r3, [pc, #36]	; (800a548 <__swbuf_r+0xa0>)
 800a524:	429c      	cmp	r4, r3
 800a526:	bf08      	it	eq
 800a528:	68ec      	ldreq	r4, [r5, #12]
 800a52a:	e7ca      	b.n	800a4c2 <__swbuf_r+0x1a>
 800a52c:	4621      	mov	r1, r4
 800a52e:	4628      	mov	r0, r5
 800a530:	f000 f81e 	bl	800a570 <__swsetup_r>
 800a534:	2800      	cmp	r0, #0
 800a536:	d0cb      	beq.n	800a4d0 <__swbuf_r+0x28>
 800a538:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a53c:	e7ea      	b.n	800a514 <__swbuf_r+0x6c>
 800a53e:	bf00      	nop
 800a540:	0800ade8 	.word	0x0800ade8
 800a544:	0800ae08 	.word	0x0800ae08
 800a548:	0800adc8 	.word	0x0800adc8

0800a54c <_write_r>:
 800a54c:	b538      	push	{r3, r4, r5, lr}
 800a54e:	4d07      	ldr	r5, [pc, #28]	; (800a56c <_write_r+0x20>)
 800a550:	4604      	mov	r4, r0
 800a552:	4608      	mov	r0, r1
 800a554:	4611      	mov	r1, r2
 800a556:	2200      	movs	r2, #0
 800a558:	602a      	str	r2, [r5, #0]
 800a55a:	461a      	mov	r2, r3
 800a55c:	f7f7 ff49 	bl	80023f2 <_write>
 800a560:	1c43      	adds	r3, r0, #1
 800a562:	d102      	bne.n	800a56a <_write_r+0x1e>
 800a564:	682b      	ldr	r3, [r5, #0]
 800a566:	b103      	cbz	r3, 800a56a <_write_r+0x1e>
 800a568:	6023      	str	r3, [r4, #0]
 800a56a:	bd38      	pop	{r3, r4, r5, pc}
 800a56c:	20001420 	.word	0x20001420

0800a570 <__swsetup_r>:
 800a570:	4b32      	ldr	r3, [pc, #200]	; (800a63c <__swsetup_r+0xcc>)
 800a572:	b570      	push	{r4, r5, r6, lr}
 800a574:	681d      	ldr	r5, [r3, #0]
 800a576:	4606      	mov	r6, r0
 800a578:	460c      	mov	r4, r1
 800a57a:	b125      	cbz	r5, 800a586 <__swsetup_r+0x16>
 800a57c:	69ab      	ldr	r3, [r5, #24]
 800a57e:	b913      	cbnz	r3, 800a586 <__swsetup_r+0x16>
 800a580:	4628      	mov	r0, r5
 800a582:	f7fe ff5f 	bl	8009444 <__sinit>
 800a586:	4b2e      	ldr	r3, [pc, #184]	; (800a640 <__swsetup_r+0xd0>)
 800a588:	429c      	cmp	r4, r3
 800a58a:	d10f      	bne.n	800a5ac <__swsetup_r+0x3c>
 800a58c:	686c      	ldr	r4, [r5, #4]
 800a58e:	89a3      	ldrh	r3, [r4, #12]
 800a590:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a594:	0719      	lsls	r1, r3, #28
 800a596:	d42c      	bmi.n	800a5f2 <__swsetup_r+0x82>
 800a598:	06dd      	lsls	r5, r3, #27
 800a59a:	d411      	bmi.n	800a5c0 <__swsetup_r+0x50>
 800a59c:	2309      	movs	r3, #9
 800a59e:	6033      	str	r3, [r6, #0]
 800a5a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a5a4:	81a3      	strh	r3, [r4, #12]
 800a5a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5aa:	e03e      	b.n	800a62a <__swsetup_r+0xba>
 800a5ac:	4b25      	ldr	r3, [pc, #148]	; (800a644 <__swsetup_r+0xd4>)
 800a5ae:	429c      	cmp	r4, r3
 800a5b0:	d101      	bne.n	800a5b6 <__swsetup_r+0x46>
 800a5b2:	68ac      	ldr	r4, [r5, #8]
 800a5b4:	e7eb      	b.n	800a58e <__swsetup_r+0x1e>
 800a5b6:	4b24      	ldr	r3, [pc, #144]	; (800a648 <__swsetup_r+0xd8>)
 800a5b8:	429c      	cmp	r4, r3
 800a5ba:	bf08      	it	eq
 800a5bc:	68ec      	ldreq	r4, [r5, #12]
 800a5be:	e7e6      	b.n	800a58e <__swsetup_r+0x1e>
 800a5c0:	0758      	lsls	r0, r3, #29
 800a5c2:	d512      	bpl.n	800a5ea <__swsetup_r+0x7a>
 800a5c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5c6:	b141      	cbz	r1, 800a5da <__swsetup_r+0x6a>
 800a5c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5cc:	4299      	cmp	r1, r3
 800a5ce:	d002      	beq.n	800a5d6 <__swsetup_r+0x66>
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	f7ff fb7f 	bl	8009cd4 <_free_r>
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	6363      	str	r3, [r4, #52]	; 0x34
 800a5da:	89a3      	ldrh	r3, [r4, #12]
 800a5dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a5e0:	81a3      	strh	r3, [r4, #12]
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	6063      	str	r3, [r4, #4]
 800a5e6:	6923      	ldr	r3, [r4, #16]
 800a5e8:	6023      	str	r3, [r4, #0]
 800a5ea:	89a3      	ldrh	r3, [r4, #12]
 800a5ec:	f043 0308 	orr.w	r3, r3, #8
 800a5f0:	81a3      	strh	r3, [r4, #12]
 800a5f2:	6923      	ldr	r3, [r4, #16]
 800a5f4:	b94b      	cbnz	r3, 800a60a <__swsetup_r+0x9a>
 800a5f6:	89a3      	ldrh	r3, [r4, #12]
 800a5f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a5fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a600:	d003      	beq.n	800a60a <__swsetup_r+0x9a>
 800a602:	4621      	mov	r1, r4
 800a604:	4630      	mov	r0, r6
 800a606:	f000 f95b 	bl	800a8c0 <__smakebuf_r>
 800a60a:	89a0      	ldrh	r0, [r4, #12]
 800a60c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a610:	f010 0301 	ands.w	r3, r0, #1
 800a614:	d00a      	beq.n	800a62c <__swsetup_r+0xbc>
 800a616:	2300      	movs	r3, #0
 800a618:	60a3      	str	r3, [r4, #8]
 800a61a:	6963      	ldr	r3, [r4, #20]
 800a61c:	425b      	negs	r3, r3
 800a61e:	61a3      	str	r3, [r4, #24]
 800a620:	6923      	ldr	r3, [r4, #16]
 800a622:	b943      	cbnz	r3, 800a636 <__swsetup_r+0xc6>
 800a624:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a628:	d1ba      	bne.n	800a5a0 <__swsetup_r+0x30>
 800a62a:	bd70      	pop	{r4, r5, r6, pc}
 800a62c:	0781      	lsls	r1, r0, #30
 800a62e:	bf58      	it	pl
 800a630:	6963      	ldrpl	r3, [r4, #20]
 800a632:	60a3      	str	r3, [r4, #8]
 800a634:	e7f4      	b.n	800a620 <__swsetup_r+0xb0>
 800a636:	2000      	movs	r0, #0
 800a638:	e7f7      	b.n	800a62a <__swsetup_r+0xba>
 800a63a:	bf00      	nop
 800a63c:	20000090 	.word	0x20000090
 800a640:	0800ade8 	.word	0x0800ade8
 800a644:	0800ae08 	.word	0x0800ae08
 800a648:	0800adc8 	.word	0x0800adc8

0800a64c <__assert_func>:
 800a64c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a64e:	4614      	mov	r4, r2
 800a650:	461a      	mov	r2, r3
 800a652:	4b09      	ldr	r3, [pc, #36]	; (800a678 <__assert_func+0x2c>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4605      	mov	r5, r0
 800a658:	68d8      	ldr	r0, [r3, #12]
 800a65a:	b14c      	cbz	r4, 800a670 <__assert_func+0x24>
 800a65c:	4b07      	ldr	r3, [pc, #28]	; (800a67c <__assert_func+0x30>)
 800a65e:	9100      	str	r1, [sp, #0]
 800a660:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a664:	4906      	ldr	r1, [pc, #24]	; (800a680 <__assert_func+0x34>)
 800a666:	462b      	mov	r3, r5
 800a668:	f000 f8e0 	bl	800a82c <fiprintf>
 800a66c:	f000 f9ef 	bl	800aa4e <abort>
 800a670:	4b04      	ldr	r3, [pc, #16]	; (800a684 <__assert_func+0x38>)
 800a672:	461c      	mov	r4, r3
 800a674:	e7f3      	b.n	800a65e <__assert_func+0x12>
 800a676:	bf00      	nop
 800a678:	20000090 	.word	0x20000090
 800a67c:	0800af95 	.word	0x0800af95
 800a680:	0800afa2 	.word	0x0800afa2
 800a684:	0800afd0 	.word	0x0800afd0

0800a688 <_close_r>:
 800a688:	b538      	push	{r3, r4, r5, lr}
 800a68a:	4d06      	ldr	r5, [pc, #24]	; (800a6a4 <_close_r+0x1c>)
 800a68c:	2300      	movs	r3, #0
 800a68e:	4604      	mov	r4, r0
 800a690:	4608      	mov	r0, r1
 800a692:	602b      	str	r3, [r5, #0]
 800a694:	f7f7 fec9 	bl	800242a <_close>
 800a698:	1c43      	adds	r3, r0, #1
 800a69a:	d102      	bne.n	800a6a2 <_close_r+0x1a>
 800a69c:	682b      	ldr	r3, [r5, #0]
 800a69e:	b103      	cbz	r3, 800a6a2 <_close_r+0x1a>
 800a6a0:	6023      	str	r3, [r4, #0]
 800a6a2:	bd38      	pop	{r3, r4, r5, pc}
 800a6a4:	20001420 	.word	0x20001420

0800a6a8 <__sflush_r>:
 800a6a8:	898a      	ldrh	r2, [r1, #12]
 800a6aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ae:	4605      	mov	r5, r0
 800a6b0:	0710      	lsls	r0, r2, #28
 800a6b2:	460c      	mov	r4, r1
 800a6b4:	d458      	bmi.n	800a768 <__sflush_r+0xc0>
 800a6b6:	684b      	ldr	r3, [r1, #4]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	dc05      	bgt.n	800a6c8 <__sflush_r+0x20>
 800a6bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	dc02      	bgt.n	800a6c8 <__sflush_r+0x20>
 800a6c2:	2000      	movs	r0, #0
 800a6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6ca:	2e00      	cmp	r6, #0
 800a6cc:	d0f9      	beq.n	800a6c2 <__sflush_r+0x1a>
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a6d4:	682f      	ldr	r7, [r5, #0]
 800a6d6:	602b      	str	r3, [r5, #0]
 800a6d8:	d032      	beq.n	800a740 <__sflush_r+0x98>
 800a6da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a6dc:	89a3      	ldrh	r3, [r4, #12]
 800a6de:	075a      	lsls	r2, r3, #29
 800a6e0:	d505      	bpl.n	800a6ee <__sflush_r+0x46>
 800a6e2:	6863      	ldr	r3, [r4, #4]
 800a6e4:	1ac0      	subs	r0, r0, r3
 800a6e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a6e8:	b10b      	cbz	r3, 800a6ee <__sflush_r+0x46>
 800a6ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a6ec:	1ac0      	subs	r0, r0, r3
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6f4:	6a21      	ldr	r1, [r4, #32]
 800a6f6:	4628      	mov	r0, r5
 800a6f8:	47b0      	blx	r6
 800a6fa:	1c43      	adds	r3, r0, #1
 800a6fc:	89a3      	ldrh	r3, [r4, #12]
 800a6fe:	d106      	bne.n	800a70e <__sflush_r+0x66>
 800a700:	6829      	ldr	r1, [r5, #0]
 800a702:	291d      	cmp	r1, #29
 800a704:	d82c      	bhi.n	800a760 <__sflush_r+0xb8>
 800a706:	4a2a      	ldr	r2, [pc, #168]	; (800a7b0 <__sflush_r+0x108>)
 800a708:	40ca      	lsrs	r2, r1
 800a70a:	07d6      	lsls	r6, r2, #31
 800a70c:	d528      	bpl.n	800a760 <__sflush_r+0xb8>
 800a70e:	2200      	movs	r2, #0
 800a710:	6062      	str	r2, [r4, #4]
 800a712:	04d9      	lsls	r1, r3, #19
 800a714:	6922      	ldr	r2, [r4, #16]
 800a716:	6022      	str	r2, [r4, #0]
 800a718:	d504      	bpl.n	800a724 <__sflush_r+0x7c>
 800a71a:	1c42      	adds	r2, r0, #1
 800a71c:	d101      	bne.n	800a722 <__sflush_r+0x7a>
 800a71e:	682b      	ldr	r3, [r5, #0]
 800a720:	b903      	cbnz	r3, 800a724 <__sflush_r+0x7c>
 800a722:	6560      	str	r0, [r4, #84]	; 0x54
 800a724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a726:	602f      	str	r7, [r5, #0]
 800a728:	2900      	cmp	r1, #0
 800a72a:	d0ca      	beq.n	800a6c2 <__sflush_r+0x1a>
 800a72c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a730:	4299      	cmp	r1, r3
 800a732:	d002      	beq.n	800a73a <__sflush_r+0x92>
 800a734:	4628      	mov	r0, r5
 800a736:	f7ff facd 	bl	8009cd4 <_free_r>
 800a73a:	2000      	movs	r0, #0
 800a73c:	6360      	str	r0, [r4, #52]	; 0x34
 800a73e:	e7c1      	b.n	800a6c4 <__sflush_r+0x1c>
 800a740:	6a21      	ldr	r1, [r4, #32]
 800a742:	2301      	movs	r3, #1
 800a744:	4628      	mov	r0, r5
 800a746:	47b0      	blx	r6
 800a748:	1c41      	adds	r1, r0, #1
 800a74a:	d1c7      	bne.n	800a6dc <__sflush_r+0x34>
 800a74c:	682b      	ldr	r3, [r5, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d0c4      	beq.n	800a6dc <__sflush_r+0x34>
 800a752:	2b1d      	cmp	r3, #29
 800a754:	d001      	beq.n	800a75a <__sflush_r+0xb2>
 800a756:	2b16      	cmp	r3, #22
 800a758:	d101      	bne.n	800a75e <__sflush_r+0xb6>
 800a75a:	602f      	str	r7, [r5, #0]
 800a75c:	e7b1      	b.n	800a6c2 <__sflush_r+0x1a>
 800a75e:	89a3      	ldrh	r3, [r4, #12]
 800a760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a764:	81a3      	strh	r3, [r4, #12]
 800a766:	e7ad      	b.n	800a6c4 <__sflush_r+0x1c>
 800a768:	690f      	ldr	r7, [r1, #16]
 800a76a:	2f00      	cmp	r7, #0
 800a76c:	d0a9      	beq.n	800a6c2 <__sflush_r+0x1a>
 800a76e:	0793      	lsls	r3, r2, #30
 800a770:	680e      	ldr	r6, [r1, #0]
 800a772:	bf08      	it	eq
 800a774:	694b      	ldreq	r3, [r1, #20]
 800a776:	600f      	str	r7, [r1, #0]
 800a778:	bf18      	it	ne
 800a77a:	2300      	movne	r3, #0
 800a77c:	eba6 0807 	sub.w	r8, r6, r7
 800a780:	608b      	str	r3, [r1, #8]
 800a782:	f1b8 0f00 	cmp.w	r8, #0
 800a786:	dd9c      	ble.n	800a6c2 <__sflush_r+0x1a>
 800a788:	6a21      	ldr	r1, [r4, #32]
 800a78a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a78c:	4643      	mov	r3, r8
 800a78e:	463a      	mov	r2, r7
 800a790:	4628      	mov	r0, r5
 800a792:	47b0      	blx	r6
 800a794:	2800      	cmp	r0, #0
 800a796:	dc06      	bgt.n	800a7a6 <__sflush_r+0xfe>
 800a798:	89a3      	ldrh	r3, [r4, #12]
 800a79a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a79e:	81a3      	strh	r3, [r4, #12]
 800a7a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7a4:	e78e      	b.n	800a6c4 <__sflush_r+0x1c>
 800a7a6:	4407      	add	r7, r0
 800a7a8:	eba8 0800 	sub.w	r8, r8, r0
 800a7ac:	e7e9      	b.n	800a782 <__sflush_r+0xda>
 800a7ae:	bf00      	nop
 800a7b0:	20400001 	.word	0x20400001

0800a7b4 <_fflush_r>:
 800a7b4:	b538      	push	{r3, r4, r5, lr}
 800a7b6:	690b      	ldr	r3, [r1, #16]
 800a7b8:	4605      	mov	r5, r0
 800a7ba:	460c      	mov	r4, r1
 800a7bc:	b913      	cbnz	r3, 800a7c4 <_fflush_r+0x10>
 800a7be:	2500      	movs	r5, #0
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	bd38      	pop	{r3, r4, r5, pc}
 800a7c4:	b118      	cbz	r0, 800a7ce <_fflush_r+0x1a>
 800a7c6:	6983      	ldr	r3, [r0, #24]
 800a7c8:	b90b      	cbnz	r3, 800a7ce <_fflush_r+0x1a>
 800a7ca:	f7fe fe3b 	bl	8009444 <__sinit>
 800a7ce:	4b14      	ldr	r3, [pc, #80]	; (800a820 <_fflush_r+0x6c>)
 800a7d0:	429c      	cmp	r4, r3
 800a7d2:	d11b      	bne.n	800a80c <_fflush_r+0x58>
 800a7d4:	686c      	ldr	r4, [r5, #4]
 800a7d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d0ef      	beq.n	800a7be <_fflush_r+0xa>
 800a7de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a7e0:	07d0      	lsls	r0, r2, #31
 800a7e2:	d404      	bmi.n	800a7ee <_fflush_r+0x3a>
 800a7e4:	0599      	lsls	r1, r3, #22
 800a7e6:	d402      	bmi.n	800a7ee <_fflush_r+0x3a>
 800a7e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7ea:	f7fe fece 	bl	800958a <__retarget_lock_acquire_recursive>
 800a7ee:	4628      	mov	r0, r5
 800a7f0:	4621      	mov	r1, r4
 800a7f2:	f7ff ff59 	bl	800a6a8 <__sflush_r>
 800a7f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a7f8:	07da      	lsls	r2, r3, #31
 800a7fa:	4605      	mov	r5, r0
 800a7fc:	d4e0      	bmi.n	800a7c0 <_fflush_r+0xc>
 800a7fe:	89a3      	ldrh	r3, [r4, #12]
 800a800:	059b      	lsls	r3, r3, #22
 800a802:	d4dd      	bmi.n	800a7c0 <_fflush_r+0xc>
 800a804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a806:	f7fe fec1 	bl	800958c <__retarget_lock_release_recursive>
 800a80a:	e7d9      	b.n	800a7c0 <_fflush_r+0xc>
 800a80c:	4b05      	ldr	r3, [pc, #20]	; (800a824 <_fflush_r+0x70>)
 800a80e:	429c      	cmp	r4, r3
 800a810:	d101      	bne.n	800a816 <_fflush_r+0x62>
 800a812:	68ac      	ldr	r4, [r5, #8]
 800a814:	e7df      	b.n	800a7d6 <_fflush_r+0x22>
 800a816:	4b04      	ldr	r3, [pc, #16]	; (800a828 <_fflush_r+0x74>)
 800a818:	429c      	cmp	r4, r3
 800a81a:	bf08      	it	eq
 800a81c:	68ec      	ldreq	r4, [r5, #12]
 800a81e:	e7da      	b.n	800a7d6 <_fflush_r+0x22>
 800a820:	0800ade8 	.word	0x0800ade8
 800a824:	0800ae08 	.word	0x0800ae08
 800a828:	0800adc8 	.word	0x0800adc8

0800a82c <fiprintf>:
 800a82c:	b40e      	push	{r1, r2, r3}
 800a82e:	b503      	push	{r0, r1, lr}
 800a830:	4601      	mov	r1, r0
 800a832:	ab03      	add	r3, sp, #12
 800a834:	4805      	ldr	r0, [pc, #20]	; (800a84c <fiprintf+0x20>)
 800a836:	f853 2b04 	ldr.w	r2, [r3], #4
 800a83a:	6800      	ldr	r0, [r0, #0]
 800a83c:	9301      	str	r3, [sp, #4]
 800a83e:	f7ff fcaf 	bl	800a1a0 <_vfiprintf_r>
 800a842:	b002      	add	sp, #8
 800a844:	f85d eb04 	ldr.w	lr, [sp], #4
 800a848:	b003      	add	sp, #12
 800a84a:	4770      	bx	lr
 800a84c:	20000090 	.word	0x20000090

0800a850 <_lseek_r>:
 800a850:	b538      	push	{r3, r4, r5, lr}
 800a852:	4d07      	ldr	r5, [pc, #28]	; (800a870 <_lseek_r+0x20>)
 800a854:	4604      	mov	r4, r0
 800a856:	4608      	mov	r0, r1
 800a858:	4611      	mov	r1, r2
 800a85a:	2200      	movs	r2, #0
 800a85c:	602a      	str	r2, [r5, #0]
 800a85e:	461a      	mov	r2, r3
 800a860:	f7f7 fe0a 	bl	8002478 <_lseek>
 800a864:	1c43      	adds	r3, r0, #1
 800a866:	d102      	bne.n	800a86e <_lseek_r+0x1e>
 800a868:	682b      	ldr	r3, [r5, #0]
 800a86a:	b103      	cbz	r3, 800a86e <_lseek_r+0x1e>
 800a86c:	6023      	str	r3, [r4, #0]
 800a86e:	bd38      	pop	{r3, r4, r5, pc}
 800a870:	20001420 	.word	0x20001420

0800a874 <__swhatbuf_r>:
 800a874:	b570      	push	{r4, r5, r6, lr}
 800a876:	460e      	mov	r6, r1
 800a878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a87c:	2900      	cmp	r1, #0
 800a87e:	b096      	sub	sp, #88	; 0x58
 800a880:	4614      	mov	r4, r2
 800a882:	461d      	mov	r5, r3
 800a884:	da08      	bge.n	800a898 <__swhatbuf_r+0x24>
 800a886:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a88a:	2200      	movs	r2, #0
 800a88c:	602a      	str	r2, [r5, #0]
 800a88e:	061a      	lsls	r2, r3, #24
 800a890:	d410      	bmi.n	800a8b4 <__swhatbuf_r+0x40>
 800a892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a896:	e00e      	b.n	800a8b6 <__swhatbuf_r+0x42>
 800a898:	466a      	mov	r2, sp
 800a89a:	f000 f8df 	bl	800aa5c <_fstat_r>
 800a89e:	2800      	cmp	r0, #0
 800a8a0:	dbf1      	blt.n	800a886 <__swhatbuf_r+0x12>
 800a8a2:	9a01      	ldr	r2, [sp, #4]
 800a8a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a8a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a8ac:	425a      	negs	r2, r3
 800a8ae:	415a      	adcs	r2, r3
 800a8b0:	602a      	str	r2, [r5, #0]
 800a8b2:	e7ee      	b.n	800a892 <__swhatbuf_r+0x1e>
 800a8b4:	2340      	movs	r3, #64	; 0x40
 800a8b6:	2000      	movs	r0, #0
 800a8b8:	6023      	str	r3, [r4, #0]
 800a8ba:	b016      	add	sp, #88	; 0x58
 800a8bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a8c0 <__smakebuf_r>:
 800a8c0:	898b      	ldrh	r3, [r1, #12]
 800a8c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a8c4:	079d      	lsls	r5, r3, #30
 800a8c6:	4606      	mov	r6, r0
 800a8c8:	460c      	mov	r4, r1
 800a8ca:	d507      	bpl.n	800a8dc <__smakebuf_r+0x1c>
 800a8cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a8d0:	6023      	str	r3, [r4, #0]
 800a8d2:	6123      	str	r3, [r4, #16]
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	6163      	str	r3, [r4, #20]
 800a8d8:	b002      	add	sp, #8
 800a8da:	bd70      	pop	{r4, r5, r6, pc}
 800a8dc:	ab01      	add	r3, sp, #4
 800a8de:	466a      	mov	r2, sp
 800a8e0:	f7ff ffc8 	bl	800a874 <__swhatbuf_r>
 800a8e4:	9900      	ldr	r1, [sp, #0]
 800a8e6:	4605      	mov	r5, r0
 800a8e8:	4630      	mov	r0, r6
 800a8ea:	f7ff fa5f 	bl	8009dac <_malloc_r>
 800a8ee:	b948      	cbnz	r0, 800a904 <__smakebuf_r+0x44>
 800a8f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8f4:	059a      	lsls	r2, r3, #22
 800a8f6:	d4ef      	bmi.n	800a8d8 <__smakebuf_r+0x18>
 800a8f8:	f023 0303 	bic.w	r3, r3, #3
 800a8fc:	f043 0302 	orr.w	r3, r3, #2
 800a900:	81a3      	strh	r3, [r4, #12]
 800a902:	e7e3      	b.n	800a8cc <__smakebuf_r+0xc>
 800a904:	4b0d      	ldr	r3, [pc, #52]	; (800a93c <__smakebuf_r+0x7c>)
 800a906:	62b3      	str	r3, [r6, #40]	; 0x28
 800a908:	89a3      	ldrh	r3, [r4, #12]
 800a90a:	6020      	str	r0, [r4, #0]
 800a90c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a910:	81a3      	strh	r3, [r4, #12]
 800a912:	9b00      	ldr	r3, [sp, #0]
 800a914:	6163      	str	r3, [r4, #20]
 800a916:	9b01      	ldr	r3, [sp, #4]
 800a918:	6120      	str	r0, [r4, #16]
 800a91a:	b15b      	cbz	r3, 800a934 <__smakebuf_r+0x74>
 800a91c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a920:	4630      	mov	r0, r6
 800a922:	f000 f8ad 	bl	800aa80 <_isatty_r>
 800a926:	b128      	cbz	r0, 800a934 <__smakebuf_r+0x74>
 800a928:	89a3      	ldrh	r3, [r4, #12]
 800a92a:	f023 0303 	bic.w	r3, r3, #3
 800a92e:	f043 0301 	orr.w	r3, r3, #1
 800a932:	81a3      	strh	r3, [r4, #12]
 800a934:	89a0      	ldrh	r0, [r4, #12]
 800a936:	4305      	orrs	r5, r0
 800a938:	81a5      	strh	r5, [r4, #12]
 800a93a:	e7cd      	b.n	800a8d8 <__smakebuf_r+0x18>
 800a93c:	080093dd 	.word	0x080093dd

0800a940 <__ascii_mbtowc>:
 800a940:	b082      	sub	sp, #8
 800a942:	b901      	cbnz	r1, 800a946 <__ascii_mbtowc+0x6>
 800a944:	a901      	add	r1, sp, #4
 800a946:	b142      	cbz	r2, 800a95a <__ascii_mbtowc+0x1a>
 800a948:	b14b      	cbz	r3, 800a95e <__ascii_mbtowc+0x1e>
 800a94a:	7813      	ldrb	r3, [r2, #0]
 800a94c:	600b      	str	r3, [r1, #0]
 800a94e:	7812      	ldrb	r2, [r2, #0]
 800a950:	1e10      	subs	r0, r2, #0
 800a952:	bf18      	it	ne
 800a954:	2001      	movne	r0, #1
 800a956:	b002      	add	sp, #8
 800a958:	4770      	bx	lr
 800a95a:	4610      	mov	r0, r2
 800a95c:	e7fb      	b.n	800a956 <__ascii_mbtowc+0x16>
 800a95e:	f06f 0001 	mvn.w	r0, #1
 800a962:	e7f8      	b.n	800a956 <__ascii_mbtowc+0x16>

0800a964 <memmove>:
 800a964:	4288      	cmp	r0, r1
 800a966:	b510      	push	{r4, lr}
 800a968:	eb01 0402 	add.w	r4, r1, r2
 800a96c:	d902      	bls.n	800a974 <memmove+0x10>
 800a96e:	4284      	cmp	r4, r0
 800a970:	4623      	mov	r3, r4
 800a972:	d807      	bhi.n	800a984 <memmove+0x20>
 800a974:	1e43      	subs	r3, r0, #1
 800a976:	42a1      	cmp	r1, r4
 800a978:	d008      	beq.n	800a98c <memmove+0x28>
 800a97a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a97e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a982:	e7f8      	b.n	800a976 <memmove+0x12>
 800a984:	4402      	add	r2, r0
 800a986:	4601      	mov	r1, r0
 800a988:	428a      	cmp	r2, r1
 800a98a:	d100      	bne.n	800a98e <memmove+0x2a>
 800a98c:	bd10      	pop	{r4, pc}
 800a98e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a992:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a996:	e7f7      	b.n	800a988 <memmove+0x24>

0800a998 <__malloc_lock>:
 800a998:	4801      	ldr	r0, [pc, #4]	; (800a9a0 <__malloc_lock+0x8>)
 800a99a:	f7fe bdf6 	b.w	800958a <__retarget_lock_acquire_recursive>
 800a99e:	bf00      	nop
 800a9a0:	20001414 	.word	0x20001414

0800a9a4 <__malloc_unlock>:
 800a9a4:	4801      	ldr	r0, [pc, #4]	; (800a9ac <__malloc_unlock+0x8>)
 800a9a6:	f7fe bdf1 	b.w	800958c <__retarget_lock_release_recursive>
 800a9aa:	bf00      	nop
 800a9ac:	20001414 	.word	0x20001414

0800a9b0 <_realloc_r>:
 800a9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9b4:	4680      	mov	r8, r0
 800a9b6:	4614      	mov	r4, r2
 800a9b8:	460e      	mov	r6, r1
 800a9ba:	b921      	cbnz	r1, 800a9c6 <_realloc_r+0x16>
 800a9bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c0:	4611      	mov	r1, r2
 800a9c2:	f7ff b9f3 	b.w	8009dac <_malloc_r>
 800a9c6:	b92a      	cbnz	r2, 800a9d4 <_realloc_r+0x24>
 800a9c8:	f7ff f984 	bl	8009cd4 <_free_r>
 800a9cc:	4625      	mov	r5, r4
 800a9ce:	4628      	mov	r0, r5
 800a9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9d4:	f000 f864 	bl	800aaa0 <_malloc_usable_size_r>
 800a9d8:	4284      	cmp	r4, r0
 800a9da:	4607      	mov	r7, r0
 800a9dc:	d802      	bhi.n	800a9e4 <_realloc_r+0x34>
 800a9de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a9e2:	d812      	bhi.n	800aa0a <_realloc_r+0x5a>
 800a9e4:	4621      	mov	r1, r4
 800a9e6:	4640      	mov	r0, r8
 800a9e8:	f7ff f9e0 	bl	8009dac <_malloc_r>
 800a9ec:	4605      	mov	r5, r0
 800a9ee:	2800      	cmp	r0, #0
 800a9f0:	d0ed      	beq.n	800a9ce <_realloc_r+0x1e>
 800a9f2:	42bc      	cmp	r4, r7
 800a9f4:	4622      	mov	r2, r4
 800a9f6:	4631      	mov	r1, r6
 800a9f8:	bf28      	it	cs
 800a9fa:	463a      	movcs	r2, r7
 800a9fc:	f7fd f998 	bl	8007d30 <memcpy>
 800aa00:	4631      	mov	r1, r6
 800aa02:	4640      	mov	r0, r8
 800aa04:	f7ff f966 	bl	8009cd4 <_free_r>
 800aa08:	e7e1      	b.n	800a9ce <_realloc_r+0x1e>
 800aa0a:	4635      	mov	r5, r6
 800aa0c:	e7df      	b.n	800a9ce <_realloc_r+0x1e>
	...

0800aa10 <_read_r>:
 800aa10:	b538      	push	{r3, r4, r5, lr}
 800aa12:	4d07      	ldr	r5, [pc, #28]	; (800aa30 <_read_r+0x20>)
 800aa14:	4604      	mov	r4, r0
 800aa16:	4608      	mov	r0, r1
 800aa18:	4611      	mov	r1, r2
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	602a      	str	r2, [r5, #0]
 800aa1e:	461a      	mov	r2, r3
 800aa20:	f7f7 fcca 	bl	80023b8 <_read>
 800aa24:	1c43      	adds	r3, r0, #1
 800aa26:	d102      	bne.n	800aa2e <_read_r+0x1e>
 800aa28:	682b      	ldr	r3, [r5, #0]
 800aa2a:	b103      	cbz	r3, 800aa2e <_read_r+0x1e>
 800aa2c:	6023      	str	r3, [r4, #0]
 800aa2e:	bd38      	pop	{r3, r4, r5, pc}
 800aa30:	20001420 	.word	0x20001420

0800aa34 <__ascii_wctomb>:
 800aa34:	b149      	cbz	r1, 800aa4a <__ascii_wctomb+0x16>
 800aa36:	2aff      	cmp	r2, #255	; 0xff
 800aa38:	bf85      	ittet	hi
 800aa3a:	238a      	movhi	r3, #138	; 0x8a
 800aa3c:	6003      	strhi	r3, [r0, #0]
 800aa3e:	700a      	strbls	r2, [r1, #0]
 800aa40:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800aa44:	bf98      	it	ls
 800aa46:	2001      	movls	r0, #1
 800aa48:	4770      	bx	lr
 800aa4a:	4608      	mov	r0, r1
 800aa4c:	4770      	bx	lr

0800aa4e <abort>:
 800aa4e:	b508      	push	{r3, lr}
 800aa50:	2006      	movs	r0, #6
 800aa52:	f000 f855 	bl	800ab00 <raise>
 800aa56:	2001      	movs	r0, #1
 800aa58:	f7f7 fca4 	bl	80023a4 <_exit>

0800aa5c <_fstat_r>:
 800aa5c:	b538      	push	{r3, r4, r5, lr}
 800aa5e:	4d07      	ldr	r5, [pc, #28]	; (800aa7c <_fstat_r+0x20>)
 800aa60:	2300      	movs	r3, #0
 800aa62:	4604      	mov	r4, r0
 800aa64:	4608      	mov	r0, r1
 800aa66:	4611      	mov	r1, r2
 800aa68:	602b      	str	r3, [r5, #0]
 800aa6a:	f7f7 fcea 	bl	8002442 <_fstat>
 800aa6e:	1c43      	adds	r3, r0, #1
 800aa70:	d102      	bne.n	800aa78 <_fstat_r+0x1c>
 800aa72:	682b      	ldr	r3, [r5, #0]
 800aa74:	b103      	cbz	r3, 800aa78 <_fstat_r+0x1c>
 800aa76:	6023      	str	r3, [r4, #0]
 800aa78:	bd38      	pop	{r3, r4, r5, pc}
 800aa7a:	bf00      	nop
 800aa7c:	20001420 	.word	0x20001420

0800aa80 <_isatty_r>:
 800aa80:	b538      	push	{r3, r4, r5, lr}
 800aa82:	4d06      	ldr	r5, [pc, #24]	; (800aa9c <_isatty_r+0x1c>)
 800aa84:	2300      	movs	r3, #0
 800aa86:	4604      	mov	r4, r0
 800aa88:	4608      	mov	r0, r1
 800aa8a:	602b      	str	r3, [r5, #0]
 800aa8c:	f7f7 fce9 	bl	8002462 <_isatty>
 800aa90:	1c43      	adds	r3, r0, #1
 800aa92:	d102      	bne.n	800aa9a <_isatty_r+0x1a>
 800aa94:	682b      	ldr	r3, [r5, #0]
 800aa96:	b103      	cbz	r3, 800aa9a <_isatty_r+0x1a>
 800aa98:	6023      	str	r3, [r4, #0]
 800aa9a:	bd38      	pop	{r3, r4, r5, pc}
 800aa9c:	20001420 	.word	0x20001420

0800aaa0 <_malloc_usable_size_r>:
 800aaa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaa4:	1f18      	subs	r0, r3, #4
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	bfbc      	itt	lt
 800aaaa:	580b      	ldrlt	r3, [r1, r0]
 800aaac:	18c0      	addlt	r0, r0, r3
 800aaae:	4770      	bx	lr

0800aab0 <_raise_r>:
 800aab0:	291f      	cmp	r1, #31
 800aab2:	b538      	push	{r3, r4, r5, lr}
 800aab4:	4604      	mov	r4, r0
 800aab6:	460d      	mov	r5, r1
 800aab8:	d904      	bls.n	800aac4 <_raise_r+0x14>
 800aaba:	2316      	movs	r3, #22
 800aabc:	6003      	str	r3, [r0, #0]
 800aabe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aac2:	bd38      	pop	{r3, r4, r5, pc}
 800aac4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aac6:	b112      	cbz	r2, 800aace <_raise_r+0x1e>
 800aac8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aacc:	b94b      	cbnz	r3, 800aae2 <_raise_r+0x32>
 800aace:	4620      	mov	r0, r4
 800aad0:	f000 f830 	bl	800ab34 <_getpid_r>
 800aad4:	462a      	mov	r2, r5
 800aad6:	4601      	mov	r1, r0
 800aad8:	4620      	mov	r0, r4
 800aada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aade:	f000 b817 	b.w	800ab10 <_kill_r>
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d00a      	beq.n	800aafc <_raise_r+0x4c>
 800aae6:	1c59      	adds	r1, r3, #1
 800aae8:	d103      	bne.n	800aaf2 <_raise_r+0x42>
 800aaea:	2316      	movs	r3, #22
 800aaec:	6003      	str	r3, [r0, #0]
 800aaee:	2001      	movs	r0, #1
 800aaf0:	e7e7      	b.n	800aac2 <_raise_r+0x12>
 800aaf2:	2400      	movs	r4, #0
 800aaf4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aaf8:	4628      	mov	r0, r5
 800aafa:	4798      	blx	r3
 800aafc:	2000      	movs	r0, #0
 800aafe:	e7e0      	b.n	800aac2 <_raise_r+0x12>

0800ab00 <raise>:
 800ab00:	4b02      	ldr	r3, [pc, #8]	; (800ab0c <raise+0xc>)
 800ab02:	4601      	mov	r1, r0
 800ab04:	6818      	ldr	r0, [r3, #0]
 800ab06:	f7ff bfd3 	b.w	800aab0 <_raise_r>
 800ab0a:	bf00      	nop
 800ab0c:	20000090 	.word	0x20000090

0800ab10 <_kill_r>:
 800ab10:	b538      	push	{r3, r4, r5, lr}
 800ab12:	4d07      	ldr	r5, [pc, #28]	; (800ab30 <_kill_r+0x20>)
 800ab14:	2300      	movs	r3, #0
 800ab16:	4604      	mov	r4, r0
 800ab18:	4608      	mov	r0, r1
 800ab1a:	4611      	mov	r1, r2
 800ab1c:	602b      	str	r3, [r5, #0]
 800ab1e:	f7f7 fc31 	bl	8002384 <_kill>
 800ab22:	1c43      	adds	r3, r0, #1
 800ab24:	d102      	bne.n	800ab2c <_kill_r+0x1c>
 800ab26:	682b      	ldr	r3, [r5, #0]
 800ab28:	b103      	cbz	r3, 800ab2c <_kill_r+0x1c>
 800ab2a:	6023      	str	r3, [r4, #0]
 800ab2c:	bd38      	pop	{r3, r4, r5, pc}
 800ab2e:	bf00      	nop
 800ab30:	20001420 	.word	0x20001420

0800ab34 <_getpid_r>:
 800ab34:	f7f7 bc1e 	b.w	8002374 <_getpid>

0800ab38 <_init>:
 800ab38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab3a:	bf00      	nop
 800ab3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab3e:	bc08      	pop	{r3}
 800ab40:	469e      	mov	lr, r3
 800ab42:	4770      	bx	lr

0800ab44 <_fini>:
 800ab44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab46:	bf00      	nop
 800ab48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab4a:	bc08      	pop	{r3}
 800ab4c:	469e      	mov	lr, r3
 800ab4e:	4770      	bx	lr
