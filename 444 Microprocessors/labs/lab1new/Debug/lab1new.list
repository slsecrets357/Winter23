
lab1new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089f4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  08008bb8  08008bb8  00018bb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091f8  080091f8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080091f8  080091f8  000191f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009200  08009200  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009200  08009200  00019200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009204  08009204  00019204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009208  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  200001dc  080093e4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  080093e4  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000f248  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0000f33c  00000000  00000000  0002f454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002298  00000000  00000000  0003e790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b40  00000000  00000000  00040a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001044fc  00000000  00000000  00041568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000a28  00000000  00000000  00145a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002f12  00000000  00000000  00146490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  001493a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f94  00000000  00000000  00149468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000026a0  00000000  00000000  0014d3fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008b9c 	.word	0x08008b9c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	08008b9c 	.word	0x08008b9c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c8c:	f000 b974 	b.w	8000f78 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468e      	mov	lr, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14d      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4694      	mov	ip, r2
 8000cba:	d969      	bls.n	8000d90 <__udivmoddi4+0xe8>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b152      	cbz	r2, 8000cd8 <__udivmoddi4+0x30>
 8000cc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa20 f101 	lsr.w	r1, r0, r1
 8000cce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	0c21      	lsrs	r1, r4, #16
 8000cde:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce2:	fa1f f78c 	uxth.w	r7, ip
 8000ce6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	fb06 f107 	mul.w	r1, r6, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cfe:	f080 811f 	bcs.w	8000f40 <__udivmoddi4+0x298>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 811c 	bls.w	8000f40 <__udivmoddi4+0x298>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f707 	mul.w	r7, r0, r7
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x92>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2c:	f080 810a 	bcs.w	8000f44 <__udivmoddi4+0x29c>
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	f240 8107 	bls.w	8000f44 <__udivmoddi4+0x29c>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	1be4      	subs	r4, r4, r7
 8000d40:	2600      	movs	r6, #0
 8000d42:	b11d      	cbz	r5, 8000d4c <__udivmoddi4+0xa4>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xc2>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80ef 	beq.w	8000f3a <__udivmoddi4+0x292>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x160>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd4>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80f9 	bhi.w	8000f6e <__udivmoddi4+0x2c6>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	469e      	mov	lr, r3
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa4>
 8000d8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xec>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 8092 	bne.w	8000ec2 <__udivmoddi4+0x21a>
 8000d9e:	eba1 010c 	sub.w	r1, r1, ip
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2601      	movs	r6, #1
 8000dac:	0c20      	lsrs	r0, r4, #16
 8000dae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db2:	fb07 1113 	mls	r1, r7, r3, r1
 8000db6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dba:	fb0e f003 	mul.w	r0, lr, r3
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x12a>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2c0>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1110 	mls	r1, r7, r0, r1
 8000de0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x156>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x154>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2ca>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e06:	e79c      	b.n	8000d42 <__udivmoddi4+0x9a>
 8000e08:	f1c6 0720 	rsb	r7, r6, #32
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	40f9      	lsrs	r1, r7
 8000e22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e26:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2e:	0c20      	lsrs	r0, r4, #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fb09 1118 	mls	r1, r9, r8, r1
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e40:	4288      	cmp	r0, r1
 8000e42:	fa02 f206 	lsl.w	r2, r2, r6
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b8>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2bc>
 8000e54:	4288      	cmp	r0, r1
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2bc>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e68:	fb09 1110 	mls	r1, r9, r0, r1
 8000e6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	458e      	cmp	lr, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1e2>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2b4>
 8000e82:	458e      	cmp	lr, r1
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2b4>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e92:	eba1 010e 	sub.w	r1, r1, lr
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46a6      	mov	lr, r4
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x2a4>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x2a0>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x212>
 8000ea2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eaa:	fa01 f707 	lsl.w	r7, r1, r7
 8000eae:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb2:	40f1      	lsrs	r1, r6
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	f1c2 0320 	rsb	r3, r2, #32
 8000ec6:	40d8      	lsrs	r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee4:	0c0b      	lsrs	r3, r1, #16
 8000ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eea:	fb00 f60e 	mul.w	r6, r0, lr
 8000eee:	429e      	cmp	r6, r3
 8000ef0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x260>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b8>
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b8>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	b289      	uxth	r1, r1
 8000f0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f10:	fb07 3316 	mls	r3, r7, r6, r3
 8000f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f18:	fb06 f30e 	mul.w	r3, r6, lr
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x28a>
 8000f20:	eb1c 0101 	adds.w	r1, ip, r1
 8000f24:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0x104>
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e705      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e3      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6f8      	b.n	8000d3a <__udivmoddi4+0x92>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f58:	4646      	mov	r6, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x28a>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1e2>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b8>
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x12c>
 8000f6e:	4630      	mov	r0, r6
 8000f70:	e709      	b.n	8000d86 <__udivmoddi4+0xde>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x156>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <kalmanfilter_asm>:
* R2 = pointer to kstate [q r x p k]
* R3 = length
*/

kalmanfilter_asm:
	push {r4,r5}
 8000f7c:	b430      	push	{r4, r5}
	sub R3, #1
 8000f7e:	f1a3 0301 	sub.w	r3, r3, #1

08000f82 <loop>:
loop:
	vldr.f32 s2, [r2] //q
 8000f82:	ed92 1a00 	vldr	s2, [r2]
    vldr.f32 s1, [r2, #12] //p
 8000f86:	edd2 0a03 	vldr	s1, [r2, #12]
    vadd.f32 s1, s1, s2 //p+=q,
 8000f8a:	ee70 0a81 	vadd.f32	s1, s1, s2
    vstr.f32 s1, [r2, #12] //update p
 8000f8e:	edc2 0a03 	vstr	s1, [r2, #12]

    vldr.f32 s2, [r2, #4] //r
 8000f92:	ed92 1a01 	vldr	s2, [r2, #4]
    vadd.f32 s2, s2, s1 //s2=r+p,
 8000f96:	ee31 1a20 	vadd.f32	s2, s2, s1
    mrs r4,APSR   // save MCU flags
 8000f9a:	f3ef 8400 	mrs	r4, CPSR
    vcmp.f32 s2, #0.0 // compare s2 to 0.0 to avoid division by 0
 8000f9e:	eeb5 1a40 	vcmp.f32	s2, #0.0
    vmrs APSR_nzcv, FPSCR
 8000fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    beq division_by_0 // branch to division_by_0 if s2 is equal to 0.0
 8000fa6:	d03a      	beq.n	800101e <division_by_0>
    msr APSR_nzcvq, r4 // restore MCU flags
 8000fa8:	f384 8800 	msr	CPSR_f, r4
    vdiv.f32 s1, s1, s2 //p/(r+p),
 8000fac:	eec0 0a81 	vdiv.f32	s1, s1, s2
    vstr.f32 s1, [r2, #16]//k=p/(r+p)
 8000fb0:	edc2 0a04 	vstr	s1, [r2, #16]

	vldr.f32 s2, [r0] //load meas from input array
 8000fb4:	ed90 1a00 	vldr	s2, [r0]
	add r0, r0, #4
 8000fb8:	f100 0004 	add.w	r0, r0, #4
    vldr.f32 s1, [r2, #8] //x
 8000fbc:	edd2 0a02 	vldr	s1, [r2, #8]
    vsub.f32 s2, s2, s1 //s2 = meas - x,
 8000fc0:	ee31 1a60 	vsub.f32	s2, s2, s1
    vldr.f32 s1, [r2, #16] //k
 8000fc4:	edd2 0a04 	vldr	s1, [r2, #16]
    vmul.f32 s2, s2, s1 //s2 = k*(meas-x),
 8000fc8:	ee21 1a20 	vmul.f32	s2, s2, s1
    vldr.f32 s1, [r2, #8] //x
 8000fcc:	edd2 0a02 	vldr	s1, [r2, #8]
    vadd.f32 s1, s1, s2 //s1=x+k*(meas-x),
 8000fd0:	ee70 0a81 	vadd.f32	s1, s1, s2
    vstr.f32 s1, [r2, #8]
 8000fd4:	edc2 0a02 	vstr	s1, [r2, #8]
    vstr.f32 s1, [r1] //store x in output array
 8000fd8:	edc1 0a00 	vstr	s1, [r1]
    add r1, r1, #4
 8000fdc:	f101 0104 	add.w	r1, r1, #4

	vldr.f32 s1, [r2, #16] //k
 8000fe0:	edd2 0a04 	vldr	s1, [r2, #16]
	vmov.f32 s2, #1
 8000fe4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	vsub.f32 s1, s2, s1
 8000fe8:	ee71 0a60 	vsub.f32	s1, s2, s1
	vldr.f32 s2, [r2, #12]
 8000fec:	ed92 1a03 	vldr	s2, [r2, #12]
	vmul.f32 s2, s2, s1
 8000ff0:	ee21 1a20 	vmul.f32	s2, s2, s1
	mrs r4,APSR   // save MCU flags
 8000ff4:	f3ef 8400 	mrs	r4, CPSR
	vmrs APSR_nzcv, FPSCR //move the value of FPSCR to the APSR register
 8000ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bvs overflow //branch to overflow if the overflow bit in APSR is set
 8000ffc:	d60b      	bvs.n	8001016 <overflow>
	//vmrs r5, FPSCR
	//tst r5, #8
	//beq underflow
	//tst r5, #2
	//beq division_by_0
	vstr.f32 s2, [r2, #12]
 8000ffe:	ed82 1a03 	vstr	s2, [r2, #12]
	msr APSR_nzcvq, r4  // restore MCU flags
 8001002:	f384 8800 	msr	CPSR_f, r4
	cmp r3, #0
 8001006:	2b00      	cmp	r3, #0
	sub r3, #1
 8001008:	f1a3 0301 	sub.w	r3, r3, #1
	bgt loop
 800100c:	dcb9      	bgt.n	8000f82 <loop>
	pop {r4,r5}
 800100e:	bc30      	pop	{r4, r5}
	mov r0, #0
 8001010:	f04f 0000 	mov.w	r0, #0
	bx lr
 8001014:	4770      	bx	lr

08001016 <overflow>:
overflow:
	pop {r4,r5}
 8001016:	bc30      	pop	{r4, r5}
	mov r0, #-1
 8001018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	bx lr
 800101c:	4770      	bx	lr

0800101e <division_by_0>:
division_by_0:
	pop {r4,r5}
 800101e:	bc30      	pop	{r4, r5}
	mov r0, #-1
 8001020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	bx lr
 8001024:	4770      	bx	lr

08001026 <underflow>:
underflow:
	pop {r4,r5}
 8001026:	bc30      	pop	{r4, r5}
	mov r0, #-1
 8001028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	bx lr
 800102c:	4770      	bx	lr
	...

08001030 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001038:	1d39      	adds	r1, r7, #4
 800103a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800103e:	2201      	movs	r2, #1
 8001040:	4803      	ldr	r0, [pc, #12]	; (8001050 <__io_putchar+0x20>)
 8001042:	f002 fd65 	bl	8003b10 <HAL_UART_Transmit>
  return ch;
 8001046:	687b      	ldr	r3, [r7, #4]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200001f8 	.word	0x200001f8

08001054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001058:	f5ad 7d6e 	sub.w	sp, sp, #952	; 0x3b8
 800105c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  printf("hello");
 800105e:	48a6      	ldr	r0, [pc, #664]	; (80012f8 <main+0x2a4>)
 8001060:	f004 fd9c 	bl	8005b9c <iprintf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001064:	f000 fd63 	bl	8001b2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001068:	f000 f952 	bl	8001310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800106c:	f000 f9ee 	bl	800144c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001070:	f000 f9a0 	bl	80013b4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  kstate kalman_state = { .k =0.0, .p=0.1, .q=0.1, .r=0.1, .x =5.0};
 8001074:	4ba1      	ldr	r3, [pc, #644]	; (80012fc <main+0x2a8>)
 8001076:	f507 755c 	add.w	r5, r7, #880	; 0x370
 800107a:	461c      	mov	r4, r3
 800107c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800107e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001080:	6823      	ldr	r3, [r4, #0]
 8001082:	602b      	str	r3, [r5, #0]
  float InputArray1[5] = {0,1,2,3,4};
 8001084:	4b9e      	ldr	r3, [pc, #632]	; (8001300 <main+0x2ac>)
 8001086:	f507 7557 	add.w	r5, r7, #860	; 0x35c
 800108a:	461c      	mov	r4, r3
 800108c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800108e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001090:	6823      	ldr	r3, [r4, #0]
 8001092:	602b      	str	r3, [r5, #0]
  float meas = 3.57;
 8001094:	4b9b      	ldr	r3, [pc, #620]	; (8001304 <main+0x2b0>)
 8001096:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
  float InputArray[] = {10.4915760032, 10.1349974709, 9.53992591829, 9.60311878706,
 800109a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800109e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80010a2:	4a99      	ldr	r2, [pc, #612]	; (8001308 <main+0x2b4>)
 80010a4:	4618      	mov	r0, r3
 80010a6:	4611      	mov	r1, r2
 80010a8:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80010ac:	461a      	mov	r2, r3
 80010ae:	f004 f8f5 	bl	800529c <memcpy>
  					10.3535284606, 10.2437410625, 10.3851531317, 9.90784804928,
  					9.98208344925, 9.52778805729, 9.69323876912, 9.92987312087,
  					9.73938925207, 9.60543743477, 9.79600805462, 10.4950988486,
  					10.2814361401, 9.7985283333, 9.6287888922, 10.4491538991,
  					9.5799256668};
  uint32_t length = (uint32_t) (sizeof(InputArray)/sizeof(InputArray[0]));
 80010b2:	2365      	movs	r3, #101	; 0x65
 80010b4:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
  float OutputArray[((int)(sizeof(InputArray)/sizeof(InputArray[0])))];
  float dev;
  float dev1;
  float convolutionDSP[(int)(2*length-1)];
 80010b8:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	3b01      	subs	r3, #1
 80010c0:	4619      	mov	r1, r3
 80010c2:	1e4b      	subs	r3, r1, #1
 80010c4:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 80010c8:	460a      	mov	r2, r1
 80010ca:	2300      	movs	r3, #0
 80010cc:	4690      	mov	r8, r2
 80010ce:	4699      	mov	r9, r3
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	f04f 0300 	mov.w	r3, #0
 80010d8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80010dc:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80010e0:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80010e4:	460a      	mov	r2, r1
 80010e6:	2300      	movs	r3, #0
 80010e8:	4692      	mov	sl, r2
 80010ea:	469b      	mov	fp, r3
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80010f8:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80010fc:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8001100:	460b      	mov	r3, r1
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	3307      	adds	r3, #7
 8001106:	08db      	lsrs	r3, r3, #3
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	ebad 0d03 	sub.w	sp, sp, r3
 800110e:	ab02      	add	r3, sp, #8
 8001110:	3303      	adds	r3, #3
 8001112:	089b      	lsrs	r3, r3, #2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
  float correlationDSP[(int)(2*length-1)];
 800111a:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	3b01      	subs	r3, #1
 8001122:	4619      	mov	r1, r3
 8001124:	1e4b      	subs	r3, r1, #1
 8001126:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 800112a:	460a      	mov	r2, r1
 800112c:	2300      	movs	r3, #0
 800112e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001130:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	f04f 0300 	mov.w	r3, #0
 800113a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800113e:	4628      	mov	r0, r5
 8001140:	0143      	lsls	r3, r0, #5
 8001142:	4620      	mov	r0, r4
 8001144:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001148:	4620      	mov	r0, r4
 800114a:	0142      	lsls	r2, r0, #5
 800114c:	460a      	mov	r2, r1
 800114e:	2300      	movs	r3, #0
 8001150:	623a      	str	r2, [r7, #32]
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
 8001154:	f04f 0200 	mov.w	r2, #0
 8001158:	f04f 0300 	mov.w	r3, #0
 800115c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001160:	4628      	mov	r0, r5
 8001162:	0143      	lsls	r3, r0, #5
 8001164:	4620      	mov	r0, r4
 8001166:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800116a:	4620      	mov	r0, r4
 800116c:	0142      	lsls	r2, r0, #5
 800116e:	460b      	mov	r3, r1
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	3307      	adds	r3, #7
 8001174:	08db      	lsrs	r3, r3, #3
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	ebad 0d03 	sub.w	sp, sp, r3
 800117c:	ab02      	add	r3, sp, #8
 800117e:	3303      	adds	r3, #3
 8001180:	089b      	lsrs	r3, r3, #2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
  float conv[(int)(2*length-1)];
 8001188:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	3b01      	subs	r3, #1
 8001190:	4619      	mov	r1, r3
 8001192:	1e4b      	subs	r3, r1, #1
 8001194:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 8001198:	460a      	mov	r2, r1
 800119a:	2300      	movs	r3, #0
 800119c:	61ba      	str	r2, [r7, #24]
 800119e:	61fb      	str	r3, [r7, #28]
 80011a0:	f04f 0200 	mov.w	r2, #0
 80011a4:	f04f 0300 	mov.w	r3, #0
 80011a8:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80011ac:	4628      	mov	r0, r5
 80011ae:	0143      	lsls	r3, r0, #5
 80011b0:	4620      	mov	r0, r4
 80011b2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80011b6:	4620      	mov	r0, r4
 80011b8:	0142      	lsls	r2, r0, #5
 80011ba:	460a      	mov	r2, r1
 80011bc:	2300      	movs	r3, #0
 80011be:	613a      	str	r2, [r7, #16]
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	f04f 0200 	mov.w	r2, #0
 80011c6:	f04f 0300 	mov.w	r3, #0
 80011ca:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80011ce:	4628      	mov	r0, r5
 80011d0:	0143      	lsls	r3, r0, #5
 80011d2:	4620      	mov	r0, r4
 80011d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80011d8:	4620      	mov	r0, r4
 80011da:	0142      	lsls	r2, r0, #5
 80011dc:	460b      	mov	r3, r1
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	3307      	adds	r3, #7
 80011e2:	08db      	lsrs	r3, r3, #3
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	ebad 0d03 	sub.w	sp, sp, r3
 80011ea:	ab02      	add	r3, sp, #8
 80011ec:	3303      	adds	r3, #3
 80011ee:	089b      	lsrs	r3, r3, #2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
  float corr[(int)(2*length-1)];
 80011f6:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	3b01      	subs	r3, #1
 80011fe:	4619      	mov	r1, r3
 8001200:	1e4b      	subs	r3, r1, #1
 8001202:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 8001206:	460a      	mov	r2, r1
 8001208:	2300      	movs	r3, #0
 800120a:	60ba      	str	r2, [r7, #8]
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	f04f 0300 	mov.w	r3, #0
 8001216:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800121a:	4628      	mov	r0, r5
 800121c:	0143      	lsls	r3, r0, #5
 800121e:	4620      	mov	r0, r4
 8001220:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001224:	4620      	mov	r0, r4
 8001226:	0142      	lsls	r2, r0, #5
 8001228:	460a      	mov	r2, r1
 800122a:	2300      	movs	r3, #0
 800122c:	603a      	str	r2, [r7, #0]
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	f04f 0300 	mov.w	r3, #0
 8001238:	e9d7 4500 	ldrd	r4, r5, [r7]
 800123c:	4628      	mov	r0, r5
 800123e:	0143      	lsls	r3, r0, #5
 8001240:	4620      	mov	r0, r4
 8001242:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001246:	4620      	mov	r0, r4
 8001248:	0142      	lsls	r2, r0, #5
 800124a:	460b      	mov	r3, r1
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	3307      	adds	r3, #7
 8001250:	08db      	lsrs	r3, r3, #3
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	ebad 0d03 	sub.w	sp, sp, r3
 8001258:	ab02      	add	r3, sp, #8
 800125a:	3303      	adds	r3, #3
 800125c:	089b      	lsrs	r3, r3, #2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("hello");
 8001264:	4824      	ldr	r0, [pc, #144]	; (80012f8 <main+0x2a4>)
 8001266:	f004 fc99 	bl	8005b9c <iprintf>
	  ITM_Port32(31) =1;
 800126a:	4b28      	ldr	r3, [pc, #160]	; (800130c <main+0x2b8>)
 800126c:	2201      	movs	r2, #1
 800126e:	601a      	str	r2, [r3, #0]
	  //assembly
//	  kalmanfilter_asm2(&kalman_state, meas);
	  kalmanfilter_asm(&InputArray, &OutputArray, &kalman_state, length);
 8001270:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001274:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001278:	f507 70e4 	add.w	r0, r7, #456	; 0x1c8
 800127c:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8001280:	f7ff fe7c 	bl	8000f7c <kalmanfilter_asm>
//	  kalmanfilter(&InputArray, &OutputArray, &kalman_state, length);
//	  kalmanfilter_DSP(&InputArray, &OutputArray, &kalman_state, length);
	  ITM_Port32(31) =2;
 8001284:	4b21      	ldr	r3, [pc, #132]	; (800130c <main+0x2b8>)
 8001286:	2202      	movs	r2, #2
 8001288:	601a      	str	r2, [r3, #0]

	  dev = stddev(&InputArray, &OutputArray, length);
 800128a:	f8d7 23a8 	ldr.w	r2, [r7, #936]	; 0x3a8
 800128e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001292:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f9c2 	bl	8001620 <stddev>
 800129c:	ed87 0ae1 	vstr	s0, [r7, #900]	; 0x384
	  arm_conv_f32(&InputArray, length, &OutputArray, length, convolutionDSP);
 80012a0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80012a4:	f507 70e4 	add.w	r0, r7, #456	; 0x1c8
 80012a8:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 80012b2:	f8d7 13a8 	ldr.w	r1, [r7, #936]	; 0x3a8
 80012b6:	f003 fd2d 	bl	8004d14 <arm_conv_f32>
	  arm_correlate_f32(&InputArray, length, &OutputArray, length, correlationDSP);
 80012ba:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80012be:	f507 70e4 	add.w	r0, r7, #456	; 0x1c8
 80012c2:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 80012cc:	f8d7 13a8 	ldr.w	r1, [r7, #936]	; 0x3a8
 80012d0:	f003 fa6a 	bl	80047a8 <arm_correlate_f32>
	  statistics(&InputArray, &OutputArray, length, corr, conv);
 80012d4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80012d8:	f507 70e4 	add.w	r0, r7, #456	; 0x1c8
 80012dc:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 80012e6:	f8d7 23a8 	ldr.w	r2, [r7, #936]	; 0x3a8
 80012ea:	f000 f97f 	bl	80015ec <statistics>

	  ITM_Port32(31) = 3;
 80012ee:	4b07      	ldr	r3, [pc, #28]	; (800130c <main+0x2b8>)
 80012f0:	2203      	movs	r2, #3
 80012f2:	601a      	str	r2, [r3, #0]
	  printf("hello");
 80012f4:	e7b6      	b.n	8001264 <main+0x210>
 80012f6:	bf00      	nop
 80012f8:	08008bb8 	.word	0x08008bb8
 80012fc:	08008bc0 	.word	0x08008bc0
 8001300:	08008bd4 	.word	0x08008bd4
 8001304:	40647ae1 	.word	0x40647ae1
 8001308:	08008be8 	.word	0x08008be8
 800130c:	e000007c 	.word	0xe000007c

08001310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b096      	sub	sp, #88	; 0x58
 8001314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	2244      	movs	r2, #68	; 0x44
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f003 ffca 	bl	80052b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001324:	463b      	mov	r3, r7
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001332:	2000      	movs	r0, #0
 8001334:	f000 ff08 	bl	8002148 <HAL_PWREx_ControlVoltageScaling>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800133e:	f000 f8a9 	bl	8001494 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001342:	2310      	movs	r3, #16
 8001344:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001346:	2301      	movs	r3, #1
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800134e:	2360      	movs	r3, #96	; 0x60
 8001350:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001352:	2302      	movs	r3, #2
 8001354:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001356:	2301      	movs	r3, #1
 8001358:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800135a:	2301      	movs	r3, #1
 800135c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800135e:	233c      	movs	r3, #60	; 0x3c
 8001360:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001362:	2302      	movs	r3, #2
 8001364:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001366:	2302      	movs	r3, #2
 8001368:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800136a:	2302      	movs	r3, #2
 800136c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4618      	mov	r0, r3
 8001374:	f000 ff8c 	bl	8002290 <HAL_RCC_OscConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800137e:	f000 f889 	bl	8001494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001382:	230f      	movs	r3, #15
 8001384:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001386:	2303      	movs	r3, #3
 8001388:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001396:	463b      	mov	r3, r7
 8001398:	2105      	movs	r1, #5
 800139a:	4618      	mov	r0, r3
 800139c:	f001 fb92 	bl	8002ac4 <HAL_RCC_ClockConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013a6:	f000 f875 	bl	8001494 <Error_Handler>
  }
}
 80013aa:	bf00      	nop
 80013ac:	3758      	adds	r7, #88	; 0x58
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013b8:	4b22      	ldr	r3, [pc, #136]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013ba:	4a23      	ldr	r2, [pc, #140]	; (8001448 <MX_USART2_UART_Init+0x94>)
 80013bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013be:	4b21      	ldr	r3, [pc, #132]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013c6:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013cc:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013d2:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013d8:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013da:	220c      	movs	r2, #12
 80013dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e4:	4b17      	ldr	r3, [pc, #92]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ea:	4b16      	ldr	r3, [pc, #88]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013f0:	4b14      	ldr	r3, [pc, #80]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013f6:	4b13      	ldr	r3, [pc, #76]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013fc:	4811      	ldr	r0, [pc, #68]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013fe:	f002 fb37 	bl	8003a70 <HAL_UART_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001408:	f000 f844 	bl	8001494 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800140c:	2100      	movs	r1, #0
 800140e:	480d      	ldr	r0, [pc, #52]	; (8001444 <MX_USART2_UART_Init+0x90>)
 8001410:	f003 f900 	bl	8004614 <HAL_UARTEx_SetTxFifoThreshold>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800141a:	f000 f83b 	bl	8001494 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800141e:	2100      	movs	r1, #0
 8001420:	4808      	ldr	r0, [pc, #32]	; (8001444 <MX_USART2_UART_Init+0x90>)
 8001422:	f003 f935 	bl	8004690 <HAL_UARTEx_SetRxFifoThreshold>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800142c:	f000 f832 	bl	8001494 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001430:	4804      	ldr	r0, [pc, #16]	; (8001444 <MX_USART2_UART_Init+0x90>)
 8001432:	f003 f8b6 	bl	80045a2 <HAL_UARTEx_DisableFifoMode>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800143c:	f000 f82a 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200001f8 	.word	0x200001f8
 8001448:	40004400 	.word	0x40004400

0800144c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <MX_GPIO_Init+0x44>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	4a0e      	ldr	r2, [pc, #56]	; (8001490 <MX_GPIO_Init+0x44>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <MX_GPIO_Init+0x44>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <MX_GPIO_Init+0x44>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	4a08      	ldr	r2, [pc, #32]	; (8001490 <MX_GPIO_Init+0x44>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <MX_GPIO_Init+0x44>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	683b      	ldr	r3, [r7, #0]

}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	40021000 	.word	0x40021000

08001494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001498:	b672      	cpsid	i
}
 800149a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800149c:	e7fe      	b.n	800149c <Error_Handler+0x8>

0800149e <convolution>:
 * statistics.c
 */
#include "main.h"
#include "utility.h"
void convolution( float *InputArray, float *OutputArray, uint32_t length, float *result)
{
 800149e:	b480      	push	{r7}
 80014a0:	b087      	sub	sp, #28
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	60f8      	str	r0, [r7, #12]
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
 80014aa:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < length; i++) {
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	e03c      	b.n	800152c <convolution+0x8e>
		result[i] = 0;
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	4413      	add	r3, r2
 80014ba:	f04f 0200 	mov.w	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < length ; j++) {
 80014c0:	2300      	movs	r3, #0
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	e02b      	b.n	800151e <convolution+0x80>
			if (i >= j && ((i-j) < length)) {
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	db24      	blt.n	8001518 <convolution+0x7a>
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	461a      	mov	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4293      	cmp	r3, r2
 80014da:	d91d      	bls.n	8001518 <convolution+0x7a>
				result[i] += InputArray[i-j] * OutputArray[j];
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	4413      	add	r3, r2
 80014e4:	ed93 7a00 	vldr	s14, [r3]
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	4413      	add	r3, r2
 80014f4:	edd3 6a00 	vldr	s13, [r3]
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	68ba      	ldr	r2, [r7, #8]
 80014fe:	4413      	add	r3, r2
 8001500:	edd3 7a00 	vldr	s15, [r3]
 8001504:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	4413      	add	r3, r2
 8001510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001514:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j < length ; j++) {
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	3301      	adds	r3, #1
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	429a      	cmp	r2, r3
 8001524:	d8cf      	bhi.n	80014c6 <convolution+0x28>
	for (int i = 0; i < length; i++) {
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	3301      	adds	r3, #1
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	429a      	cmp	r2, r3
 8001532:	d8be      	bhi.n	80014b2 <convolution+0x14>
			}
		}
	}
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	371c      	adds	r7, #28
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <correlation>:
void correlation( float *InputArray, float *OutputArray, uint32_t length, float *result)
{
 8001542:	b480      	push	{r7}
 8001544:	b087      	sub	sp, #28
 8001546:	af00      	add	r7, sp, #0
 8001548:	60f8      	str	r0, [r7, #12]
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < length; i++) {
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	e03f      	b.n	80015d6 <correlation+0x94>
		result[i] = 0;
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	4413      	add	r3, r2
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < length ; j++) {
 8001564:	2300      	movs	r3, #0
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	e02e      	b.n	80015c8 <correlation+0x86>
			if (i >= j && ((i-j) < length)) {
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	429a      	cmp	r2, r3
 8001570:	db27      	blt.n	80015c2 <correlation+0x80>
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	461a      	mov	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4293      	cmp	r3, r2
 800157e:	d920      	bls.n	80015c2 <correlation+0x80>
				result[i] += InputArray[i-j] * OutputArray[length-1-j];
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	4413      	add	r3, r2
 8001588:	ed93 7a00 	vldr	s14, [r3]
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	4413      	add	r3, r2
 8001598:	edd3 6a00 	vldr	s13, [r3]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	3b01      	subs	r3, #1
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	4413      	add	r3, r2
 80015aa:	edd3 7a00 	vldr	s15, [r3]
 80015ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	4413      	add	r3, r2
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j < length ; j++) {
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	3301      	adds	r3, #1
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d8cc      	bhi.n	800156a <correlation+0x28>
	for (int i = 0; i < length; i++) {
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	3301      	adds	r3, #1
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d8bb      	bhi.n	8001556 <correlation+0x14>
			}
		}
	}
}
 80015de:	bf00      	nop
 80015e0:	bf00      	nop
 80015e2:	371c      	adds	r7, #28
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <statistics>:
//		corr[i] = sum;
//	}
//	return 0;
//}

int statistics(float* InputArray, float* OutputArray, uint32_t length, float* corr, float* conv){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
 80015f8:	603b      	str	r3, [r7, #0]

	correlation(InputArray, OutputArray, length, corr);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	68b9      	ldr	r1, [r7, #8]
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f7ff ff9e 	bl	8001542 <correlation>
	convolution(InputArray, OutputArray, length, conv);
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	68b9      	ldr	r1, [r7, #8]
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f7ff ff46 	bl	800149e <convolution>
	return 0;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	0000      	movs	r0, r0
	...

08001620 <stddev>:
 *      Author: SLsec
 */
#include <math.h>
#include "utility.h"

float stddev(float *vec, float *output, int N) {
 8001620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001624:	b08f      	sub	sp, #60	; 0x3c
 8001626:	af00      	add	r7, sp, #0
 8001628:	60f8      	str	r0, [r7, #12]
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
 800162e:	466b      	mov	r3, sp
 8001630:	461e      	mov	r6, r3
  float sum = 0.0, mean, variance = 0.0, dev=0.0;
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800163e:	f04f 0300 	mov.w	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  float diff[N];
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	1e4b      	subs	r3, r1, #1
 8001648:	623b      	str	r3, [r7, #32]
 800164a:	460a      	mov	r2, r1
 800164c:	2300      	movs	r3, #0
 800164e:	4690      	mov	r8, r2
 8001650:	4699      	mov	r9, r3
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800165e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001662:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001666:	460a      	mov	r2, r1
 8001668:	2300      	movs	r3, #0
 800166a:	4614      	mov	r4, r2
 800166c:	461d      	mov	r5, r3
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	016b      	lsls	r3, r5, #5
 8001678:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800167c:	0162      	lsls	r2, r4, #5
 800167e:	460b      	mov	r3, r1
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	3307      	adds	r3, #7
 8001684:	08db      	lsrs	r3, r3, #3
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	ebad 0d03 	sub.w	sp, sp, r3
 800168c:	466b      	mov	r3, sp
 800168e:	3303      	adds	r3, #3
 8001690:	089b      	lsrs	r3, r3, #2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	61fb      	str	r3, [r7, #28]
  // Compute the mean of the input vector
  for (int i = 0; i < N; i++) {
 8001696:	2300      	movs	r3, #0
 8001698:	633b      	str	r3, [r7, #48]	; 0x30
 800169a:	e02a      	b.n	80016f2 <stddev+0xd2>
    sum += (output[i]-vec[i]);
 800169c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	68ba      	ldr	r2, [r7, #8]
 80016a2:	4413      	add	r3, r2
 80016a4:	ed93 7a00 	vldr	s14, [r3]
 80016a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	4413      	add	r3, r2
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80016bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    diff[i] = output[i]-vec[i];
 80016c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	68ba      	ldr	r2, [r7, #8]
 80016ca:	4413      	add	r3, r2
 80016cc:	ed93 7a00 	vldr	s14, [r3]
 80016d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	68fa      	ldr	r2, [r7, #12]
 80016d6:	4413      	add	r3, r2
 80016d8:	edd3 7a00 	vldr	s15, [r3]
 80016dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e0:	69fa      	ldr	r2, [r7, #28]
 80016e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < N; i++) {
 80016ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ee:	3301      	adds	r3, #1
 80016f0:	633b      	str	r3, [r7, #48]	; 0x30
 80016f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	dbd0      	blt.n	800169c <stddev+0x7c>
  }
  mean = sum / N;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	ee07 3a90 	vmov	s15, r3
 8001700:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001704:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001708:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800170c:	edc7 7a06 	vstr	s15, [r7, #24]

  // Compute the variance of the input vector
  for (int i = 0; i < N; i++) {
 8001710:	2300      	movs	r3, #0
 8001712:	637b      	str	r3, [r7, #52]	; 0x34
 8001714:	e02b      	b.n	800176e <stddev+0x14e>
    variance += pow(diff[i] - mean, 2);
 8001716:	69fa      	ldr	r2, [r7, #28]
 8001718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	ed93 7a00 	vldr	s14, [r3]
 8001722:	edd7 7a06 	vldr	s15, [r7, #24]
 8001726:	ee77 7a67 	vsub.f32	s15, s14, s15
 800172a:	ee17 0a90 	vmov	r0, s15
 800172e:	f7fe ff23 	bl	8000578 <__aeabi_f2d>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	ed9f 1b26 	vldr	d1, [pc, #152]	; 80017d0 <stddev+0x1b0>
 800173a:	ec43 2b10 	vmov	d0, r2, r3
 800173e:	f006 fae5 	bl	8007d0c <pow>
 8001742:	ec55 4b10 	vmov	r4, r5, d0
 8001746:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001748:	f7fe ff16 	bl	8000578 <__aeabi_f2d>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4620      	mov	r0, r4
 8001752:	4629      	mov	r1, r5
 8001754:	f7fe fdb2 	bl	80002bc <__adddf3>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	f7ff fa3a 	bl	8000bd8 <__aeabi_d2f>
 8001764:	4603      	mov	r3, r0
 8001766:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (int i = 0; i < N; i++) {
 8001768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800176a:	3301      	adds	r3, #1
 800176c:	637b      	str	r3, [r7, #52]	; 0x34
 800176e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	429a      	cmp	r2, r3
 8001774:	dbcf      	blt.n	8001716 <stddev+0xf6>
  }
  variance = variance / N;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	ee07 3a90 	vmov	s15, r3
 800177c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001780:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001784:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001788:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

  // Compute the standard deviation of the input vector
  dev = sqrt(variance);
 800178c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800178e:	f7fe fef3 	bl	8000578 <__aeabi_f2d>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	ec43 2b10 	vmov	d0, r2, r3
 800179a:	f006 fb27 	bl	8007dec <sqrt>
 800179e:	ec53 2b10 	vmov	r2, r3, d0
 80017a2:	4610      	mov	r0, r2
 80017a4:	4619      	mov	r1, r3
 80017a6:	f7ff fa17 	bl	8000bd8 <__aeabi_d2f>
 80017aa:	4603      	mov	r3, r0
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
  float ret[] = {dev, mean};
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	617b      	str	r3, [r7, #20]
  return dev;
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	46b5      	mov	sp, r6
 80017ba:	ee07 3a90 	vmov	s15, r3
}
 80017be:	eeb0 0a67 	vmov.f32	s0, s15
 80017c2:	373c      	adds	r7, #60	; 0x3c
 80017c4:	46bd      	mov	sp, r7
 80017c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017ca:	bf00      	nop
 80017cc:	f3af 8000 	nop.w
 80017d0:	00000000 	.word	0x00000000
 80017d4:	40000000 	.word	0x40000000

080017d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017de:	4b0f      	ldr	r3, [pc, #60]	; (800181c <HAL_MspInit+0x44>)
 80017e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e2:	4a0e      	ldr	r2, [pc, #56]	; (800181c <HAL_MspInit+0x44>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6613      	str	r3, [r2, #96]	; 0x60
 80017ea:	4b0c      	ldr	r3, [pc, #48]	; (800181c <HAL_MspInit+0x44>)
 80017ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <HAL_MspInit+0x44>)
 80017f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fa:	4a08      	ldr	r2, [pc, #32]	; (800181c <HAL_MspInit+0x44>)
 80017fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001800:	6593      	str	r3, [r2, #88]	; 0x58
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_MspInit+0x44>)
 8001804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40021000 	.word	0x40021000

08001820 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b0ae      	sub	sp, #184	; 0xb8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001838:	f107 0310 	add.w	r3, r7, #16
 800183c:	2294      	movs	r2, #148	; 0x94
 800183e:	2100      	movs	r1, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f003 fd39 	bl	80052b8 <memset>
  if(huart->Instance==USART2)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a21      	ldr	r2, [pc, #132]	; (80018d0 <HAL_UART_MspInit+0xb0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d13b      	bne.n	80018c8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001850:	2302      	movs	r3, #2
 8001852:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001854:	2300      	movs	r3, #0
 8001856:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001858:	f107 0310 	add.w	r3, r7, #16
 800185c:	4618      	mov	r0, r3
 800185e:	f001 fbef 	bl	8003040 <HAL_RCCEx_PeriphCLKConfig>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001868:	f7ff fe14 	bl	8001494 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800186c:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <HAL_UART_MspInit+0xb4>)
 800186e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001870:	4a18      	ldr	r2, [pc, #96]	; (80018d4 <HAL_UART_MspInit+0xb4>)
 8001872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001876:	6593      	str	r3, [r2, #88]	; 0x58
 8001878:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <HAL_UART_MspInit+0xb4>)
 800187a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001884:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <HAL_UART_MspInit+0xb4>)
 8001886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001888:	4a12      	ldr	r2, [pc, #72]	; (80018d4 <HAL_UART_MspInit+0xb4>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001890:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <HAL_UART_MspInit+0xb4>)
 8001892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800189c:	230c      	movs	r3, #12
 800189e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ae:	2303      	movs	r3, #3
 80018b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018b4:	2307      	movs	r3, #7
 80018b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018be:	4619      	mov	r1, r3
 80018c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c4:	f000 fa8e 	bl	8001de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018c8:	bf00      	nop
 80018ca:	37b8      	adds	r7, #184	; 0xb8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40004400 	.word	0x40004400
 80018d4:	40021000 	.word	0x40021000

080018d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <NMI_Handler+0x4>

080018de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e2:	e7fe      	b.n	80018e2 <HardFault_Handler+0x4>

080018e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <MemManage_Handler+0x4>

080018ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ee:	e7fe      	b.n	80018ee <BusFault_Handler+0x4>

080018f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <UsageFault_Handler+0x4>

080018f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001924:	f000 f958 	bl	8001bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}

0800192c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return 1;
 8001930:	2301      	movs	r3, #1
}
 8001932:	4618      	mov	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <_kill>:

int _kill(int pid, int sig)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001946:	f003 fc7f 	bl	8005248 <__errno>
 800194a:	4603      	mov	r3, r0
 800194c:	2216      	movs	r2, #22
 800194e:	601a      	str	r2, [r3, #0]
  return -1;
 8001950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <_exit>:

void _exit (int status)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001964:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff ffe7 	bl	800193c <_kill>
  while (1) {}    /* Make sure we hang here */
 800196e:	e7fe      	b.n	800196e <_exit+0x12>

08001970 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	e00a      	b.n	8001998 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001982:	f3af 8000 	nop.w
 8001986:	4601      	mov	r1, r0
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	60ba      	str	r2, [r7, #8]
 800198e:	b2ca      	uxtb	r2, r1
 8001990:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	3301      	adds	r3, #1
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	429a      	cmp	r2, r3
 800199e:	dbf0      	blt.n	8001982 <_read+0x12>
  }

  return len;
 80019a0:	687b      	ldr	r3, [r7, #4]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b086      	sub	sp, #24
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	60f8      	str	r0, [r7, #12]
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	e009      	b.n	80019d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	60ba      	str	r2, [r7, #8]
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fb33 	bl	8001030 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	3301      	adds	r3, #1
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	dbf1      	blt.n	80019bc <_write+0x12>
  }
  return len;
 80019d8:	687b      	ldr	r3, [r7, #4]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <_close>:

int _close(int file)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a0a:	605a      	str	r2, [r3, #4]
  return 0;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <_isatty>:

int _isatty(int file)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a22:	2301      	movs	r3, #1
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
	...

08001a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a54:	4a14      	ldr	r2, [pc, #80]	; (8001aa8 <_sbrk+0x5c>)
 8001a56:	4b15      	ldr	r3, [pc, #84]	; (8001aac <_sbrk+0x60>)
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a60:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <_sbrk+0x64>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d102      	bne.n	8001a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <_sbrk+0x64>)
 8001a6a:	4a12      	ldr	r2, [pc, #72]	; (8001ab4 <_sbrk+0x68>)
 8001a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <_sbrk+0x64>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d207      	bcs.n	8001a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a7c:	f003 fbe4 	bl	8005248 <__errno>
 8001a80:	4603      	mov	r3, r0
 8001a82:	220c      	movs	r2, #12
 8001a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a8a:	e009      	b.n	8001aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <_sbrk+0x64>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a92:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <_sbrk+0x64>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	4a05      	ldr	r2, [pc, #20]	; (8001ab0 <_sbrk+0x64>)
 8001a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	200a0000 	.word	0x200a0000
 8001aac:	00000400 	.word	0x00000400
 8001ab0:	20000288 	.word	0x20000288
 8001ab4:	200002a0 	.word	0x200002a0

08001ab8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <SystemInit+0x20>)
 8001abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ac2:	4a05      	ldr	r2, [pc, #20]	; (8001ad8 <SystemInit+0x20>)
 8001ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001adc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ae0:	f7ff ffea 	bl	8001ab8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ae4:	480c      	ldr	r0, [pc, #48]	; (8001b18 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ae6:	490d      	ldr	r1, [pc, #52]	; (8001b1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ae8:	4a0d      	ldr	r2, [pc, #52]	; (8001b20 <LoopForever+0xe>)
  movs r3, #0
 8001aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aec:	e002      	b.n	8001af4 <LoopCopyDataInit>

08001aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001af2:	3304      	adds	r3, #4

08001af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af8:	d3f9      	bcc.n	8001aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001afa:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001afc:	4c0a      	ldr	r4, [pc, #40]	; (8001b28 <LoopForever+0x16>)
  movs r3, #0
 8001afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b00:	e001      	b.n	8001b06 <LoopFillZerobss>

08001b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b04:	3204      	adds	r2, #4

08001b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b08:	d3fb      	bcc.n	8001b02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b0a:	f003 fba3 	bl	8005254 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b0e:	f7ff faa1 	bl	8001054 <main>

08001b12 <LoopForever>:

LoopForever:
    b LoopForever
 8001b12:	e7fe      	b.n	8001b12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b14:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b1c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001b20:	08009208 	.word	0x08009208
  ldr r2, =_sbss
 8001b24:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001b28:	200002a0 	.word	0x200002a0

08001b2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b2c:	e7fe      	b.n	8001b2c <ADC1_IRQHandler>

08001b2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b34:	2300      	movs	r3, #0
 8001b36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b38:	2003      	movs	r0, #3
 8001b3a:	f000 f91f 	bl	8001d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b3e:	2000      	movs	r0, #0
 8001b40:	f000 f80e 	bl	8001b60 <HAL_InitTick>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d002      	beq.n	8001b50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	71fb      	strb	r3, [r7, #7]
 8001b4e:	e001      	b.n	8001b54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b50:	f7ff fe42 	bl	80017d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b54:	79fb      	ldrb	r3, [r7, #7]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b6c:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <HAL_InitTick+0x6c>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d023      	beq.n	8001bbc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b74:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <HAL_InitTick+0x70>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <HAL_InitTick+0x6c>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 f91d 	bl	8001dca <HAL_SYSTICK_Config>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10f      	bne.n	8001bb6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b0f      	cmp	r3, #15
 8001b9a:	d809      	bhi.n	8001bb0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ba4:	f000 f8f5 	bl	8001d92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ba8:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <HAL_InitTick+0x74>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	e007      	b.n	8001bc0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	73fb      	strb	r3, [r7, #15]
 8001bb4:	e004      	b.n	8001bc0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	73fb      	strb	r3, [r7, #15]
 8001bba:	e001      	b.n	8001bc0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000008 	.word	0x20000008
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	20000004 	.word	0x20000004

08001bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <HAL_IncTick+0x20>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <HAL_IncTick+0x24>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4413      	add	r3, r2
 8001be8:	4a04      	ldr	r2, [pc, #16]	; (8001bfc <HAL_IncTick+0x24>)
 8001bea:	6013      	str	r3, [r2, #0]
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20000008 	.word	0x20000008
 8001bfc:	2000028c 	.word	0x2000028c

08001c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return uwTick;
 8001c04:	4b03      	ldr	r3, [pc, #12]	; (8001c14 <HAL_GetTick+0x14>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	2000028c 	.word	0x2000028c

08001c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <__NVIC_SetPriorityGrouping+0x44>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c34:	4013      	ands	r3, r2
 8001c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c4a:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <__NVIC_SetPriorityGrouping+0x44>)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	60d3      	str	r3, [r2, #12]
}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c64:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <__NVIC_GetPriorityGrouping+0x18>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	0a1b      	lsrs	r3, r3, #8
 8001c6a:	f003 0307 	and.w	r3, r3, #7
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	6039      	str	r1, [r7, #0]
 8001c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	db0a      	blt.n	8001ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	490c      	ldr	r1, [pc, #48]	; (8001cc8 <__NVIC_SetPriority+0x4c>)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	0112      	lsls	r2, r2, #4
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca4:	e00a      	b.n	8001cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4908      	ldr	r1, [pc, #32]	; (8001ccc <__NVIC_SetPriority+0x50>)
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	3b04      	subs	r3, #4
 8001cb4:	0112      	lsls	r2, r2, #4
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	440b      	add	r3, r1
 8001cba:	761a      	strb	r2, [r3, #24]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000e100 	.word	0xe000e100
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b089      	sub	sp, #36	; 0x24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f1c3 0307 	rsb	r3, r3, #7
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	bf28      	it	cs
 8001cee:	2304      	movcs	r3, #4
 8001cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	2b06      	cmp	r3, #6
 8001cf8:	d902      	bls.n	8001d00 <NVIC_EncodePriority+0x30>
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3b03      	subs	r3, #3
 8001cfe:	e000      	b.n	8001d02 <NVIC_EncodePriority+0x32>
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	401a      	ands	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d22:	43d9      	mvns	r1, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d28:	4313      	orrs	r3, r2
         );
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3724      	adds	r7, #36	; 0x24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d48:	d301      	bcc.n	8001d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e00f      	b.n	8001d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d4e:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <SysTick_Config+0x40>)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d56:	210f      	movs	r1, #15
 8001d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d5c:	f7ff ff8e 	bl	8001c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <SysTick_Config+0x40>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d66:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <SysTick_Config+0x40>)
 8001d68:	2207      	movs	r2, #7
 8001d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	e000e010 	.word	0xe000e010

08001d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff ff47 	bl	8001c18 <__NVIC_SetPriorityGrouping>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b086      	sub	sp, #24
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	4603      	mov	r3, r0
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
 8001d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001da4:	f7ff ff5c 	bl	8001c60 <__NVIC_GetPriorityGrouping>
 8001da8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	68b9      	ldr	r1, [r7, #8]
 8001dae:	6978      	ldr	r0, [r7, #20]
 8001db0:	f7ff ff8e 	bl	8001cd0 <NVIC_EncodePriority>
 8001db4:	4602      	mov	r2, r0
 8001db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dba:	4611      	mov	r1, r2
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff5d 	bl	8001c7c <__NVIC_SetPriority>
}
 8001dc2:	bf00      	nop
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff ffb0 	bl	8001d38 <SysTick_Config>
 8001dd8:	4603      	mov	r3, r0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df2:	e166      	b.n	80020c2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2101      	movs	r1, #1
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001e00:	4013      	ands	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 8158 	beq.w	80020bc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d005      	beq.n	8001e24 <HAL_GPIO_Init+0x40>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d130      	bne.n	8001e86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	2203      	movs	r2, #3
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4013      	ands	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	091b      	lsrs	r3, r3, #4
 8001e70:	f003 0201 	and.w	r2, r3, #1
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d017      	beq.n	8001ec2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d123      	bne.n	8001f16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	08da      	lsrs	r2, r3, #3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3208      	adds	r2, #8
 8001ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	220f      	movs	r2, #15
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	691a      	ldr	r2, [r3, #16]
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	08da      	lsrs	r2, r3, #3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3208      	adds	r2, #8
 8001f10:	6939      	ldr	r1, [r7, #16]
 8001f12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	2203      	movs	r2, #3
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 0203 	and.w	r2, r3, #3
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 80b2 	beq.w	80020bc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f58:	4b61      	ldr	r3, [pc, #388]	; (80020e0 <HAL_GPIO_Init+0x2fc>)
 8001f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f5c:	4a60      	ldr	r2, [pc, #384]	; (80020e0 <HAL_GPIO_Init+0x2fc>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6613      	str	r3, [r2, #96]	; 0x60
 8001f64:	4b5e      	ldr	r3, [pc, #376]	; (80020e0 <HAL_GPIO_Init+0x2fc>)
 8001f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f70:	4a5c      	ldr	r2, [pc, #368]	; (80020e4 <HAL_GPIO_Init+0x300>)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	089b      	lsrs	r3, r3, #2
 8001f76:	3302      	adds	r3, #2
 8001f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	220f      	movs	r2, #15
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4013      	ands	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f9a:	d02b      	beq.n	8001ff4 <HAL_GPIO_Init+0x210>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a52      	ldr	r2, [pc, #328]	; (80020e8 <HAL_GPIO_Init+0x304>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d025      	beq.n	8001ff0 <HAL_GPIO_Init+0x20c>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a51      	ldr	r2, [pc, #324]	; (80020ec <HAL_GPIO_Init+0x308>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d01f      	beq.n	8001fec <HAL_GPIO_Init+0x208>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a50      	ldr	r2, [pc, #320]	; (80020f0 <HAL_GPIO_Init+0x30c>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d019      	beq.n	8001fe8 <HAL_GPIO_Init+0x204>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a4f      	ldr	r2, [pc, #316]	; (80020f4 <HAL_GPIO_Init+0x310>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d013      	beq.n	8001fe4 <HAL_GPIO_Init+0x200>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a4e      	ldr	r2, [pc, #312]	; (80020f8 <HAL_GPIO_Init+0x314>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d00d      	beq.n	8001fe0 <HAL_GPIO_Init+0x1fc>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a4d      	ldr	r2, [pc, #308]	; (80020fc <HAL_GPIO_Init+0x318>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d007      	beq.n	8001fdc <HAL_GPIO_Init+0x1f8>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a4c      	ldr	r2, [pc, #304]	; (8002100 <HAL_GPIO_Init+0x31c>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d101      	bne.n	8001fd8 <HAL_GPIO_Init+0x1f4>
 8001fd4:	2307      	movs	r3, #7
 8001fd6:	e00e      	b.n	8001ff6 <HAL_GPIO_Init+0x212>
 8001fd8:	2308      	movs	r3, #8
 8001fda:	e00c      	b.n	8001ff6 <HAL_GPIO_Init+0x212>
 8001fdc:	2306      	movs	r3, #6
 8001fde:	e00a      	b.n	8001ff6 <HAL_GPIO_Init+0x212>
 8001fe0:	2305      	movs	r3, #5
 8001fe2:	e008      	b.n	8001ff6 <HAL_GPIO_Init+0x212>
 8001fe4:	2304      	movs	r3, #4
 8001fe6:	e006      	b.n	8001ff6 <HAL_GPIO_Init+0x212>
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e004      	b.n	8001ff6 <HAL_GPIO_Init+0x212>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e002      	b.n	8001ff6 <HAL_GPIO_Init+0x212>
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e000      	b.n	8001ff6 <HAL_GPIO_Init+0x212>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	f002 0203 	and.w	r2, r2, #3
 8001ffc:	0092      	lsls	r2, r2, #2
 8001ffe:	4093      	lsls	r3, r2
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4313      	orrs	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002006:	4937      	ldr	r1, [pc, #220]	; (80020e4 <HAL_GPIO_Init+0x300>)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	089b      	lsrs	r3, r3, #2
 800200c:	3302      	adds	r3, #2
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002014:	4b3b      	ldr	r3, [pc, #236]	; (8002104 <HAL_GPIO_Init+0x320>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	43db      	mvns	r3, r3
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	4013      	ands	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	4313      	orrs	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002038:	4a32      	ldr	r2, [pc, #200]	; (8002104 <HAL_GPIO_Init+0x320>)
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800203e:	4b31      	ldr	r3, [pc, #196]	; (8002104 <HAL_GPIO_Init+0x320>)
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	43db      	mvns	r3, r3
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4013      	ands	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4313      	orrs	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002062:	4a28      	ldr	r2, [pc, #160]	; (8002104 <HAL_GPIO_Init+0x320>)
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002068:	4b26      	ldr	r3, [pc, #152]	; (8002104 <HAL_GPIO_Init+0x320>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	43db      	mvns	r3, r3
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4013      	ands	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	4313      	orrs	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800208c:	4a1d      	ldr	r2, [pc, #116]	; (8002104 <HAL_GPIO_Init+0x320>)
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002092:	4b1c      	ldr	r3, [pc, #112]	; (8002104 <HAL_GPIO_Init+0x320>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	43db      	mvns	r3, r3
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4013      	ands	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020b6:	4a13      	ldr	r2, [pc, #76]	; (8002104 <HAL_GPIO_Init+0x320>)
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	3301      	adds	r3, #1
 80020c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	fa22 f303 	lsr.w	r3, r2, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f47f ae91 	bne.w	8001df4 <HAL_GPIO_Init+0x10>
  }
}
 80020d2:	bf00      	nop
 80020d4:	bf00      	nop
 80020d6:	371c      	adds	r7, #28
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40010000 	.word	0x40010000
 80020e8:	48000400 	.word	0x48000400
 80020ec:	48000800 	.word	0x48000800
 80020f0:	48000c00 	.word	0x48000c00
 80020f4:	48001000 	.word	0x48001000
 80020f8:	48001400 	.word	0x48001400
 80020fc:	48001800 	.word	0x48001800
 8002100:	48001c00 	.word	0x48001c00
 8002104:	40010400 	.word	0x40010400

08002108 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800210c:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <HAL_PWREx_GetVoltageRange+0x3c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002118:	d102      	bne.n	8002120 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800211a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800211e:	e00b      	b.n	8002138 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002120:	4b08      	ldr	r3, [pc, #32]	; (8002144 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002122:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800212e:	d102      	bne.n	8002136 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002130:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002134:	e000      	b.n	8002138 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002136:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40007000 	.word	0x40007000

08002148 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d141      	bne.n	80021da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002156:	4b4b      	ldr	r3, [pc, #300]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800215e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002162:	d131      	bne.n	80021c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002164:	4b47      	ldr	r3, [pc, #284]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800216a:	4a46      	ldr	r2, [pc, #280]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800216c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002170:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002174:	4b43      	ldr	r3, [pc, #268]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800217c:	4a41      	ldr	r2, [pc, #260]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800217e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002182:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002184:	4b40      	ldr	r3, [pc, #256]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2232      	movs	r2, #50	; 0x32
 800218a:	fb02 f303 	mul.w	r3, r2, r3
 800218e:	4a3f      	ldr	r2, [pc, #252]	; (800228c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002190:	fba2 2303 	umull	r2, r3, r2, r3
 8002194:	0c9b      	lsrs	r3, r3, #18
 8002196:	3301      	adds	r3, #1
 8002198:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800219a:	e002      	b.n	80021a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	3b01      	subs	r3, #1
 80021a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021a2:	4b38      	ldr	r3, [pc, #224]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ae:	d102      	bne.n	80021b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f2      	bne.n	800219c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021b6:	4b33      	ldr	r3, [pc, #204]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c2:	d158      	bne.n	8002276 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e057      	b.n	8002278 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021c8:	4b2e      	ldr	r3, [pc, #184]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021ce:	4a2d      	ldr	r2, [pc, #180]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80021d8:	e04d      	b.n	8002276 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021e0:	d141      	bne.n	8002266 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021e2:	4b28      	ldr	r3, [pc, #160]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ee:	d131      	bne.n	8002254 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021f0:	4b24      	ldr	r3, [pc, #144]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021f6:	4a23      	ldr	r2, [pc, #140]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002200:	4b20      	ldr	r3, [pc, #128]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002208:	4a1e      	ldr	r2, [pc, #120]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800220a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800220e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002210:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2232      	movs	r2, #50	; 0x32
 8002216:	fb02 f303 	mul.w	r3, r2, r3
 800221a:	4a1c      	ldr	r2, [pc, #112]	; (800228c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800221c:	fba2 2303 	umull	r2, r3, r2, r3
 8002220:	0c9b      	lsrs	r3, r3, #18
 8002222:	3301      	adds	r3, #1
 8002224:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002226:	e002      	b.n	800222e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	3b01      	subs	r3, #1
 800222c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800222e:	4b15      	ldr	r3, [pc, #84]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800223a:	d102      	bne.n	8002242 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f2      	bne.n	8002228 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800224a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800224e:	d112      	bne.n	8002276 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e011      	b.n	8002278 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002256:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800225a:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800225c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002260:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002264:	e007      	b.n	8002276 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002266:	4b07      	ldr	r3, [pc, #28]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800226e:	4a05      	ldr	r2, [pc, #20]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002270:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002274:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	40007000 	.word	0x40007000
 8002288:	20000000 	.word	0x20000000
 800228c:	431bde83 	.word	0x431bde83

08002290 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d102      	bne.n	80022a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	f000 bc08 	b.w	8002ab4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022a4:	4b96      	ldr	r3, [pc, #600]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 030c 	and.w	r3, r3, #12
 80022ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022ae:	4b94      	ldr	r3, [pc, #592]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0310 	and.w	r3, r3, #16
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 80e4 	beq.w	800248e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d007      	beq.n	80022dc <HAL_RCC_OscConfig+0x4c>
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	2b0c      	cmp	r3, #12
 80022d0:	f040 808b 	bne.w	80023ea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	f040 8087 	bne.w	80023ea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022dc:	4b88      	ldr	r3, [pc, #544]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <HAL_RCC_OscConfig+0x64>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e3df      	b.n	8002ab4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1a      	ldr	r2, [r3, #32]
 80022f8:	4b81      	ldr	r3, [pc, #516]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b00      	cmp	r3, #0
 8002302:	d004      	beq.n	800230e <HAL_RCC_OscConfig+0x7e>
 8002304:	4b7e      	ldr	r3, [pc, #504]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800230c:	e005      	b.n	800231a <HAL_RCC_OscConfig+0x8a>
 800230e:	4b7c      	ldr	r3, [pc, #496]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 8002310:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800231a:	4293      	cmp	r3, r2
 800231c:	d223      	bcs.n	8002366 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	4618      	mov	r0, r3
 8002324:	f000 fdcc 	bl	8002ec0 <RCC_SetFlashLatencyFromMSIRange>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e3c0      	b.n	8002ab4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002332:	4b73      	ldr	r3, [pc, #460]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a72      	ldr	r2, [pc, #456]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 8002338:	f043 0308 	orr.w	r3, r3, #8
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	4b70      	ldr	r3, [pc, #448]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	496d      	ldr	r1, [pc, #436]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 800234c:	4313      	orrs	r3, r2
 800234e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002350:	4b6b      	ldr	r3, [pc, #428]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	021b      	lsls	r3, r3, #8
 800235e:	4968      	ldr	r1, [pc, #416]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 8002360:	4313      	orrs	r3, r2
 8002362:	604b      	str	r3, [r1, #4]
 8002364:	e025      	b.n	80023b2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002366:	4b66      	ldr	r3, [pc, #408]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a65      	ldr	r2, [pc, #404]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 800236c:	f043 0308 	orr.w	r3, r3, #8
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	4b63      	ldr	r3, [pc, #396]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	4960      	ldr	r1, [pc, #384]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 8002380:	4313      	orrs	r3, r2
 8002382:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002384:	4b5e      	ldr	r3, [pc, #376]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	021b      	lsls	r3, r3, #8
 8002392:	495b      	ldr	r1, [pc, #364]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 8002394:	4313      	orrs	r3, r2
 8002396:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d109      	bne.n	80023b2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 fd8c 	bl	8002ec0 <RCC_SetFlashLatencyFromMSIRange>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e380      	b.n	8002ab4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023b2:	f000 fcc1 	bl	8002d38 <HAL_RCC_GetSysClockFreq>
 80023b6:	4602      	mov	r2, r0
 80023b8:	4b51      	ldr	r3, [pc, #324]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	091b      	lsrs	r3, r3, #4
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	4950      	ldr	r1, [pc, #320]	; (8002504 <HAL_RCC_OscConfig+0x274>)
 80023c4:	5ccb      	ldrb	r3, [r1, r3]
 80023c6:	f003 031f 	and.w	r3, r3, #31
 80023ca:	fa22 f303 	lsr.w	r3, r2, r3
 80023ce:	4a4e      	ldr	r2, [pc, #312]	; (8002508 <HAL_RCC_OscConfig+0x278>)
 80023d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023d2:	4b4e      	ldr	r3, [pc, #312]	; (800250c <HAL_RCC_OscConfig+0x27c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fbc2 	bl	8001b60 <HAL_InitTick>
 80023dc:	4603      	mov	r3, r0
 80023de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d052      	beq.n	800248c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	e364      	b.n	8002ab4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d032      	beq.n	8002458 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023f2:	4b43      	ldr	r3, [pc, #268]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a42      	ldr	r2, [pc, #264]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023fe:	f7ff fbff 	bl	8001c00 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002406:	f7ff fbfb 	bl	8001c00 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e34d      	b.n	8002ab4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002418:	4b39      	ldr	r3, [pc, #228]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f0      	beq.n	8002406 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002424:	4b36      	ldr	r3, [pc, #216]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a35      	ldr	r2, [pc, #212]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 800242a:	f043 0308 	orr.w	r3, r3, #8
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	4b33      	ldr	r3, [pc, #204]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	4930      	ldr	r1, [pc, #192]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 800243e:	4313      	orrs	r3, r2
 8002440:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002442:	4b2f      	ldr	r3, [pc, #188]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	021b      	lsls	r3, r3, #8
 8002450:	492b      	ldr	r1, [pc, #172]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 8002452:	4313      	orrs	r3, r2
 8002454:	604b      	str	r3, [r1, #4]
 8002456:	e01a      	b.n	800248e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002458:	4b29      	ldr	r3, [pc, #164]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a28      	ldr	r2, [pc, #160]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 800245e:	f023 0301 	bic.w	r3, r3, #1
 8002462:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002464:	f7ff fbcc 	bl	8001c00 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800246c:	f7ff fbc8 	bl	8001c00 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e31a      	b.n	8002ab4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800247e:	4b20      	ldr	r3, [pc, #128]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x1dc>
 800248a:	e000      	b.n	800248e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800248c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d073      	beq.n	8002582 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	2b08      	cmp	r3, #8
 800249e:	d005      	beq.n	80024ac <HAL_RCC_OscConfig+0x21c>
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	2b0c      	cmp	r3, #12
 80024a4:	d10e      	bne.n	80024c4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2b03      	cmp	r3, #3
 80024aa:	d10b      	bne.n	80024c4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ac:	4b14      	ldr	r3, [pc, #80]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d063      	beq.n	8002580 <HAL_RCC_OscConfig+0x2f0>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d15f      	bne.n	8002580 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e2f7      	b.n	8002ab4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024cc:	d106      	bne.n	80024dc <HAL_RCC_OscConfig+0x24c>
 80024ce:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a0b      	ldr	r2, [pc, #44]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 80024d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	e025      	b.n	8002528 <HAL_RCC_OscConfig+0x298>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024e4:	d114      	bne.n	8002510 <HAL_RCC_OscConfig+0x280>
 80024e6:	4b06      	ldr	r3, [pc, #24]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a05      	ldr	r2, [pc, #20]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 80024ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	4b03      	ldr	r3, [pc, #12]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a02      	ldr	r2, [pc, #8]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 80024f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	e013      	b.n	8002528 <HAL_RCC_OscConfig+0x298>
 8002500:	40021000 	.word	0x40021000
 8002504:	08008d7c 	.word	0x08008d7c
 8002508:	20000000 	.word	0x20000000
 800250c:	20000004 	.word	0x20000004
 8002510:	4ba0      	ldr	r3, [pc, #640]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a9f      	ldr	r2, [pc, #636]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 8002516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	4b9d      	ldr	r3, [pc, #628]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a9c      	ldr	r2, [pc, #624]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 8002522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002526:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d013      	beq.n	8002558 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7ff fb66 	bl	8001c00 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002538:	f7ff fb62 	bl	8001c00 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b64      	cmp	r3, #100	; 0x64
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e2b4      	b.n	8002ab4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800254a:	4b92      	ldr	r3, [pc, #584]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x2a8>
 8002556:	e014      	b.n	8002582 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002558:	f7ff fb52 	bl	8001c00 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002560:	f7ff fb4e 	bl	8001c00 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b64      	cmp	r3, #100	; 0x64
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e2a0      	b.n	8002ab4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002572:	4b88      	ldr	r3, [pc, #544]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f0      	bne.n	8002560 <HAL_RCC_OscConfig+0x2d0>
 800257e:	e000      	b.n	8002582 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d060      	beq.n	8002650 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	2b04      	cmp	r3, #4
 8002592:	d005      	beq.n	80025a0 <HAL_RCC_OscConfig+0x310>
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	2b0c      	cmp	r3, #12
 8002598:	d119      	bne.n	80025ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2b02      	cmp	r3, #2
 800259e:	d116      	bne.n	80025ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025a0:	4b7c      	ldr	r3, [pc, #496]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_OscConfig+0x328>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e27d      	b.n	8002ab4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b8:	4b76      	ldr	r3, [pc, #472]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	061b      	lsls	r3, r3, #24
 80025c6:	4973      	ldr	r1, [pc, #460]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025cc:	e040      	b.n	8002650 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d023      	beq.n	800261e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d6:	4b6f      	ldr	r3, [pc, #444]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a6e      	ldr	r2, [pc, #440]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 80025dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e2:	f7ff fb0d 	bl	8001c00 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ea:	f7ff fb09 	bl	8001c00 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e25b      	b.n	8002ab4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025fc:	4b65      	ldr	r3, [pc, #404]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0f0      	beq.n	80025ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002608:	4b62      	ldr	r3, [pc, #392]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	061b      	lsls	r3, r3, #24
 8002616:	495f      	ldr	r1, [pc, #380]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 8002618:	4313      	orrs	r3, r2
 800261a:	604b      	str	r3, [r1, #4]
 800261c:	e018      	b.n	8002650 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800261e:	4b5d      	ldr	r3, [pc, #372]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a5c      	ldr	r2, [pc, #368]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 8002624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002628:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262a:	f7ff fae9 	bl	8001c00 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002632:	f7ff fae5 	bl	8001c00 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e237      	b.n	8002ab4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002644:	4b53      	ldr	r3, [pc, #332]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1f0      	bne.n	8002632 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d03c      	beq.n	80026d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d01c      	beq.n	800269e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002664:	4b4b      	ldr	r3, [pc, #300]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 8002666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800266a:	4a4a      	ldr	r2, [pc, #296]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002674:	f7ff fac4 	bl	8001c00 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800267c:	f7ff fac0 	bl	8001c00 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e212      	b.n	8002ab4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800268e:	4b41      	ldr	r3, [pc, #260]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 8002690:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0ef      	beq.n	800267c <HAL_RCC_OscConfig+0x3ec>
 800269c:	e01b      	b.n	80026d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800269e:	4b3d      	ldr	r3, [pc, #244]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 80026a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026a4:	4a3b      	ldr	r2, [pc, #236]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 80026a6:	f023 0301 	bic.w	r3, r3, #1
 80026aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ae:	f7ff faa7 	bl	8001c00 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b6:	f7ff faa3 	bl	8001c00 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e1f5      	b.n	8002ab4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026c8:	4b32      	ldr	r3, [pc, #200]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 80026ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1ef      	bne.n	80026b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 80a6 	beq.w	8002830 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e4:	2300      	movs	r3, #0
 80026e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026e8:	4b2a      	ldr	r3, [pc, #168]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 80026ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10d      	bne.n	8002710 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f4:	4b27      	ldr	r3, [pc, #156]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 80026f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f8:	4a26      	ldr	r2, [pc, #152]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 80026fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002700:	4b24      	ldr	r3, [pc, #144]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 8002702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800270c:	2301      	movs	r3, #1
 800270e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002710:	4b21      	ldr	r3, [pc, #132]	; (8002798 <HAL_RCC_OscConfig+0x508>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002718:	2b00      	cmp	r3, #0
 800271a:	d118      	bne.n	800274e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800271c:	4b1e      	ldr	r3, [pc, #120]	; (8002798 <HAL_RCC_OscConfig+0x508>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a1d      	ldr	r2, [pc, #116]	; (8002798 <HAL_RCC_OscConfig+0x508>)
 8002722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002726:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002728:	f7ff fa6a 	bl	8001c00 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002730:	f7ff fa66 	bl	8001c00 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e1b8      	b.n	8002ab4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002742:	4b15      	ldr	r3, [pc, #84]	; (8002798 <HAL_RCC_OscConfig+0x508>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d108      	bne.n	8002768 <HAL_RCC_OscConfig+0x4d8>
 8002756:	4b0f      	ldr	r3, [pc, #60]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 8002758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275c:	4a0d      	ldr	r2, [pc, #52]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002766:	e029      	b.n	80027bc <HAL_RCC_OscConfig+0x52c>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b05      	cmp	r3, #5
 800276e:	d115      	bne.n	800279c <HAL_RCC_OscConfig+0x50c>
 8002770:	4b08      	ldr	r3, [pc, #32]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 8002772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002776:	4a07      	ldr	r2, [pc, #28]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 8002778:	f043 0304 	orr.w	r3, r3, #4
 800277c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002780:	4b04      	ldr	r3, [pc, #16]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002786:	4a03      	ldr	r2, [pc, #12]	; (8002794 <HAL_RCC_OscConfig+0x504>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002790:	e014      	b.n	80027bc <HAL_RCC_OscConfig+0x52c>
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000
 8002798:	40007000 	.word	0x40007000
 800279c:	4b9d      	ldr	r3, [pc, #628]	; (8002a14 <HAL_RCC_OscConfig+0x784>)
 800279e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a2:	4a9c      	ldr	r2, [pc, #624]	; (8002a14 <HAL_RCC_OscConfig+0x784>)
 80027a4:	f023 0301 	bic.w	r3, r3, #1
 80027a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027ac:	4b99      	ldr	r3, [pc, #612]	; (8002a14 <HAL_RCC_OscConfig+0x784>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b2:	4a98      	ldr	r2, [pc, #608]	; (8002a14 <HAL_RCC_OscConfig+0x784>)
 80027b4:	f023 0304 	bic.w	r3, r3, #4
 80027b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d016      	beq.n	80027f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c4:	f7ff fa1c 	bl	8001c00 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ca:	e00a      	b.n	80027e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027cc:	f7ff fa18 	bl	8001c00 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027da:	4293      	cmp	r3, r2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e168      	b.n	8002ab4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027e2:	4b8c      	ldr	r3, [pc, #560]	; (8002a14 <HAL_RCC_OscConfig+0x784>)
 80027e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0ed      	beq.n	80027cc <HAL_RCC_OscConfig+0x53c>
 80027f0:	e015      	b.n	800281e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f2:	f7ff fa05 	bl	8001c00 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027f8:	e00a      	b.n	8002810 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fa:	f7ff fa01 	bl	8001c00 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	f241 3288 	movw	r2, #5000	; 0x1388
 8002808:	4293      	cmp	r3, r2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e151      	b.n	8002ab4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002810:	4b80      	ldr	r3, [pc, #512]	; (8002a14 <HAL_RCC_OscConfig+0x784>)
 8002812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1ed      	bne.n	80027fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800281e:	7ffb      	ldrb	r3, [r7, #31]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d105      	bne.n	8002830 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002824:	4b7b      	ldr	r3, [pc, #492]	; (8002a14 <HAL_RCC_OscConfig+0x784>)
 8002826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002828:	4a7a      	ldr	r2, [pc, #488]	; (8002a14 <HAL_RCC_OscConfig+0x784>)
 800282a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800282e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0320 	and.w	r3, r3, #32
 8002838:	2b00      	cmp	r3, #0
 800283a:	d03c      	beq.n	80028b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	2b00      	cmp	r3, #0
 8002842:	d01c      	beq.n	800287e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002844:	4b73      	ldr	r3, [pc, #460]	; (8002a14 <HAL_RCC_OscConfig+0x784>)
 8002846:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800284a:	4a72      	ldr	r2, [pc, #456]	; (8002a14 <HAL_RCC_OscConfig+0x784>)
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002854:	f7ff f9d4 	bl	8001c00 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800285c:	f7ff f9d0 	bl	8001c00 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e122      	b.n	8002ab4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800286e:	4b69      	ldr	r3, [pc, #420]	; (8002a14 <HAL_RCC_OscConfig+0x784>)
 8002870:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0ef      	beq.n	800285c <HAL_RCC_OscConfig+0x5cc>
 800287c:	e01b      	b.n	80028b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800287e:	4b65      	ldr	r3, [pc, #404]	; (8002a14 <HAL_RCC_OscConfig+0x784>)
 8002880:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002884:	4a63      	ldr	r2, [pc, #396]	; (8002a14 <HAL_RCC_OscConfig+0x784>)
 8002886:	f023 0301 	bic.w	r3, r3, #1
 800288a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288e:	f7ff f9b7 	bl	8001c00 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002896:	f7ff f9b3 	bl	8001c00 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e105      	b.n	8002ab4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028a8:	4b5a      	ldr	r3, [pc, #360]	; (8002a14 <HAL_RCC_OscConfig+0x784>)
 80028aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1ef      	bne.n	8002896 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 80f9 	beq.w	8002ab2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	f040 80cf 	bne.w	8002a68 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80028ca:	4b52      	ldr	r3, [pc, #328]	; (8002a14 <HAL_RCC_OscConfig+0x784>)
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f003 0203 	and.w	r2, r3, #3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028da:	429a      	cmp	r2, r3
 80028dc:	d12c      	bne.n	8002938 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e8:	3b01      	subs	r3, #1
 80028ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d123      	bne.n	8002938 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d11b      	bne.n	8002938 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800290c:	429a      	cmp	r2, r3
 800290e:	d113      	bne.n	8002938 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291a:	085b      	lsrs	r3, r3, #1
 800291c:	3b01      	subs	r3, #1
 800291e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002920:	429a      	cmp	r2, r3
 8002922:	d109      	bne.n	8002938 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	085b      	lsrs	r3, r3, #1
 8002930:	3b01      	subs	r3, #1
 8002932:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002934:	429a      	cmp	r2, r3
 8002936:	d071      	beq.n	8002a1c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	2b0c      	cmp	r3, #12
 800293c:	d068      	beq.n	8002a10 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800293e:	4b35      	ldr	r3, [pc, #212]	; (8002a14 <HAL_RCC_OscConfig+0x784>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d105      	bne.n	8002956 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800294a:	4b32      	ldr	r3, [pc, #200]	; (8002a14 <HAL_RCC_OscConfig+0x784>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e0ac      	b.n	8002ab4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800295a:	4b2e      	ldr	r3, [pc, #184]	; (8002a14 <HAL_RCC_OscConfig+0x784>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a2d      	ldr	r2, [pc, #180]	; (8002a14 <HAL_RCC_OscConfig+0x784>)
 8002960:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002964:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002966:	f7ff f94b 	bl	8001c00 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296e:	f7ff f947 	bl	8001c00 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e099      	b.n	8002ab4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002980:	4b24      	ldr	r3, [pc, #144]	; (8002a14 <HAL_RCC_OscConfig+0x784>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1f0      	bne.n	800296e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800298c:	4b21      	ldr	r3, [pc, #132]	; (8002a14 <HAL_RCC_OscConfig+0x784>)
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	4b21      	ldr	r3, [pc, #132]	; (8002a18 <HAL_RCC_OscConfig+0x788>)
 8002992:	4013      	ands	r3, r2
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800299c:	3a01      	subs	r2, #1
 800299e:	0112      	lsls	r2, r2, #4
 80029a0:	4311      	orrs	r1, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029a6:	0212      	lsls	r2, r2, #8
 80029a8:	4311      	orrs	r1, r2
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029ae:	0852      	lsrs	r2, r2, #1
 80029b0:	3a01      	subs	r2, #1
 80029b2:	0552      	lsls	r2, r2, #21
 80029b4:	4311      	orrs	r1, r2
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029ba:	0852      	lsrs	r2, r2, #1
 80029bc:	3a01      	subs	r2, #1
 80029be:	0652      	lsls	r2, r2, #25
 80029c0:	4311      	orrs	r1, r2
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029c6:	06d2      	lsls	r2, r2, #27
 80029c8:	430a      	orrs	r2, r1
 80029ca:	4912      	ldr	r1, [pc, #72]	; (8002a14 <HAL_RCC_OscConfig+0x784>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80029d0:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <HAL_RCC_OscConfig+0x784>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a0f      	ldr	r2, [pc, #60]	; (8002a14 <HAL_RCC_OscConfig+0x784>)
 80029d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029dc:	4b0d      	ldr	r3, [pc, #52]	; (8002a14 <HAL_RCC_OscConfig+0x784>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	4a0c      	ldr	r2, [pc, #48]	; (8002a14 <HAL_RCC_OscConfig+0x784>)
 80029e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029e8:	f7ff f90a 	bl	8001c00 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f0:	f7ff f906 	bl	8001c00 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e058      	b.n	8002ab4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a02:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <HAL_RCC_OscConfig+0x784>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a0e:	e050      	b.n	8002ab2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e04f      	b.n	8002ab4 <HAL_RCC_OscConfig+0x824>
 8002a14:	40021000 	.word	0x40021000
 8002a18:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a1c:	4b27      	ldr	r3, [pc, #156]	; (8002abc <HAL_RCC_OscConfig+0x82c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d144      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a28:	4b24      	ldr	r3, [pc, #144]	; (8002abc <HAL_RCC_OscConfig+0x82c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a23      	ldr	r2, [pc, #140]	; (8002abc <HAL_RCC_OscConfig+0x82c>)
 8002a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a34:	4b21      	ldr	r3, [pc, #132]	; (8002abc <HAL_RCC_OscConfig+0x82c>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4a20      	ldr	r2, [pc, #128]	; (8002abc <HAL_RCC_OscConfig+0x82c>)
 8002a3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a40:	f7ff f8de 	bl	8001c00 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a48:	f7ff f8da 	bl	8001c00 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e02c      	b.n	8002ab4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a5a:	4b18      	ldr	r3, [pc, #96]	; (8002abc <HAL_RCC_OscConfig+0x82c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x7b8>
 8002a66:	e024      	b.n	8002ab2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	2b0c      	cmp	r3, #12
 8002a6c:	d01f      	beq.n	8002aae <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a6e:	4b13      	ldr	r3, [pc, #76]	; (8002abc <HAL_RCC_OscConfig+0x82c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a12      	ldr	r2, [pc, #72]	; (8002abc <HAL_RCC_OscConfig+0x82c>)
 8002a74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7a:	f7ff f8c1 	bl	8001c00 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a82:	f7ff f8bd 	bl	8001c00 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e00f      	b.n	8002ab4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a94:	4b09      	ldr	r3, [pc, #36]	; (8002abc <HAL_RCC_OscConfig+0x82c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1f0      	bne.n	8002a82 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002aa0:	4b06      	ldr	r3, [pc, #24]	; (8002abc <HAL_RCC_OscConfig+0x82c>)
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	4905      	ldr	r1, [pc, #20]	; (8002abc <HAL_RCC_OscConfig+0x82c>)
 8002aa6:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <HAL_RCC_OscConfig+0x830>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60cb      	str	r3, [r1, #12]
 8002aac:	e001      	b.n	8002ab2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3720      	adds	r7, #32
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	feeefffc 	.word	0xfeeefffc

08002ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e11d      	b.n	8002d18 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002adc:	4b90      	ldr	r3, [pc, #576]	; (8002d20 <HAL_RCC_ClockConfig+0x25c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 030f 	and.w	r3, r3, #15
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d910      	bls.n	8002b0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aea:	4b8d      	ldr	r3, [pc, #564]	; (8002d20 <HAL_RCC_ClockConfig+0x25c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f023 020f 	bic.w	r2, r3, #15
 8002af2:	498b      	ldr	r1, [pc, #556]	; (8002d20 <HAL_RCC_ClockConfig+0x25c>)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afa:	4b89      	ldr	r3, [pc, #548]	; (8002d20 <HAL_RCC_ClockConfig+0x25c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e105      	b.n	8002d18 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d010      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	4b81      	ldr	r3, [pc, #516]	; (8002d24 <HAL_RCC_ClockConfig+0x260>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d908      	bls.n	8002b3a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b28:	4b7e      	ldr	r3, [pc, #504]	; (8002d24 <HAL_RCC_ClockConfig+0x260>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	497b      	ldr	r1, [pc, #492]	; (8002d24 <HAL_RCC_ClockConfig+0x260>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d079      	beq.n	8002c3a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	d11e      	bne.n	8002b8c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b4e:	4b75      	ldr	r3, [pc, #468]	; (8002d24 <HAL_RCC_ClockConfig+0x260>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e0dc      	b.n	8002d18 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002b5e:	f000 fa09 	bl	8002f74 <RCC_GetSysClockFreqFromPLLSource>
 8002b62:	4603      	mov	r3, r0
 8002b64:	4a70      	ldr	r2, [pc, #448]	; (8002d28 <HAL_RCC_ClockConfig+0x264>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d946      	bls.n	8002bf8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002b6a:	4b6e      	ldr	r3, [pc, #440]	; (8002d24 <HAL_RCC_ClockConfig+0x260>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d140      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b76:	4b6b      	ldr	r3, [pc, #428]	; (8002d24 <HAL_RCC_ClockConfig+0x260>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b7e:	4a69      	ldr	r2, [pc, #420]	; (8002d24 <HAL_RCC_ClockConfig+0x260>)
 8002b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b84:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b86:	2380      	movs	r3, #128	; 0x80
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	e035      	b.n	8002bf8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d107      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b94:	4b63      	ldr	r3, [pc, #396]	; (8002d24 <HAL_RCC_ClockConfig+0x260>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d115      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0b9      	b.n	8002d18 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d107      	bne.n	8002bbc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bac:	4b5d      	ldr	r3, [pc, #372]	; (8002d24 <HAL_RCC_ClockConfig+0x260>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d109      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e0ad      	b.n	8002d18 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bbc:	4b59      	ldr	r3, [pc, #356]	; (8002d24 <HAL_RCC_ClockConfig+0x260>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0a5      	b.n	8002d18 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002bcc:	f000 f8b4 	bl	8002d38 <HAL_RCC_GetSysClockFreq>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	4a55      	ldr	r2, [pc, #340]	; (8002d28 <HAL_RCC_ClockConfig+0x264>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d90f      	bls.n	8002bf8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002bd8:	4b52      	ldr	r3, [pc, #328]	; (8002d24 <HAL_RCC_ClockConfig+0x260>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d109      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002be4:	4b4f      	ldr	r3, [pc, #316]	; (8002d24 <HAL_RCC_ClockConfig+0x260>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bec:	4a4d      	ldr	r2, [pc, #308]	; (8002d24 <HAL_RCC_ClockConfig+0x260>)
 8002bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bf2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002bf4:	2380      	movs	r3, #128	; 0x80
 8002bf6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bf8:	4b4a      	ldr	r3, [pc, #296]	; (8002d24 <HAL_RCC_ClockConfig+0x260>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f023 0203 	bic.w	r2, r3, #3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	4947      	ldr	r1, [pc, #284]	; (8002d24 <HAL_RCC_ClockConfig+0x260>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c0a:	f7fe fff9 	bl	8001c00 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c10:	e00a      	b.n	8002c28 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c12:	f7fe fff5 	bl	8001c00 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e077      	b.n	8002d18 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c28:	4b3e      	ldr	r3, [pc, #248]	; (8002d24 <HAL_RCC_ClockConfig+0x260>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 020c 	and.w	r2, r3, #12
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d1eb      	bne.n	8002c12 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2b80      	cmp	r3, #128	; 0x80
 8002c3e:	d105      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002c40:	4b38      	ldr	r3, [pc, #224]	; (8002d24 <HAL_RCC_ClockConfig+0x260>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	4a37      	ldr	r2, [pc, #220]	; (8002d24 <HAL_RCC_ClockConfig+0x260>)
 8002c46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c4a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d010      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	4b31      	ldr	r3, [pc, #196]	; (8002d24 <HAL_RCC_ClockConfig+0x260>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d208      	bcs.n	8002c7a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c68:	4b2e      	ldr	r3, [pc, #184]	; (8002d24 <HAL_RCC_ClockConfig+0x260>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	492b      	ldr	r1, [pc, #172]	; (8002d24 <HAL_RCC_ClockConfig+0x260>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c7a:	4b29      	ldr	r3, [pc, #164]	; (8002d20 <HAL_RCC_ClockConfig+0x25c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d210      	bcs.n	8002caa <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c88:	4b25      	ldr	r3, [pc, #148]	; (8002d20 <HAL_RCC_ClockConfig+0x25c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f023 020f 	bic.w	r2, r3, #15
 8002c90:	4923      	ldr	r1, [pc, #140]	; (8002d20 <HAL_RCC_ClockConfig+0x25c>)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c98:	4b21      	ldr	r3, [pc, #132]	; (8002d20 <HAL_RCC_ClockConfig+0x25c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 030f 	and.w	r3, r3, #15
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d001      	beq.n	8002caa <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e036      	b.n	8002d18 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d008      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cb6:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <HAL_RCC_ClockConfig+0x260>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	4918      	ldr	r1, [pc, #96]	; (8002d24 <HAL_RCC_ClockConfig+0x260>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d009      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cd4:	4b13      	ldr	r3, [pc, #76]	; (8002d24 <HAL_RCC_ClockConfig+0x260>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	4910      	ldr	r1, [pc, #64]	; (8002d24 <HAL_RCC_ClockConfig+0x260>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ce8:	f000 f826 	bl	8002d38 <HAL_RCC_GetSysClockFreq>
 8002cec:	4602      	mov	r2, r0
 8002cee:	4b0d      	ldr	r3, [pc, #52]	; (8002d24 <HAL_RCC_ClockConfig+0x260>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	091b      	lsrs	r3, r3, #4
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	490c      	ldr	r1, [pc, #48]	; (8002d2c <HAL_RCC_ClockConfig+0x268>)
 8002cfa:	5ccb      	ldrb	r3, [r1, r3]
 8002cfc:	f003 031f 	and.w	r3, r3, #31
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
 8002d04:	4a0a      	ldr	r2, [pc, #40]	; (8002d30 <HAL_RCC_ClockConfig+0x26c>)
 8002d06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d08:	4b0a      	ldr	r3, [pc, #40]	; (8002d34 <HAL_RCC_ClockConfig+0x270>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fe ff27 	bl	8001b60 <HAL_InitTick>
 8002d12:	4603      	mov	r3, r0
 8002d14:	73fb      	strb	r3, [r7, #15]

  return status;
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40022000 	.word	0x40022000
 8002d24:	40021000 	.word	0x40021000
 8002d28:	04c4b400 	.word	0x04c4b400
 8002d2c:	08008d7c 	.word	0x08008d7c
 8002d30:	20000000 	.word	0x20000000
 8002d34:	20000004 	.word	0x20000004

08002d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b089      	sub	sp, #36	; 0x24
 8002d3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
 8002d42:	2300      	movs	r3, #0
 8002d44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d46:	4b3e      	ldr	r3, [pc, #248]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
 8002d4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d50:	4b3b      	ldr	r3, [pc, #236]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <HAL_RCC_GetSysClockFreq+0x34>
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	2b0c      	cmp	r3, #12
 8002d64:	d121      	bne.n	8002daa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d11e      	bne.n	8002daa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d6c:	4b34      	ldr	r3, [pc, #208]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d107      	bne.n	8002d88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d78:	4b31      	ldr	r3, [pc, #196]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d7e:	0a1b      	lsrs	r3, r3, #8
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	61fb      	str	r3, [r7, #28]
 8002d86:	e005      	b.n	8002d94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d88:	4b2d      	ldr	r3, [pc, #180]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	091b      	lsrs	r3, r3, #4
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d94:	4a2b      	ldr	r2, [pc, #172]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10d      	bne.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002da8:	e00a      	b.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d102      	bne.n	8002db6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002db0:	4b25      	ldr	r3, [pc, #148]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x110>)
 8002db2:	61bb      	str	r3, [r7, #24]
 8002db4:	e004      	b.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d101      	bne.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002dbc:	4b23      	ldr	r3, [pc, #140]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x114>)
 8002dbe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	2b0c      	cmp	r3, #12
 8002dc4:	d134      	bne.n	8002e30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dc6:	4b1e      	ldr	r3, [pc, #120]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d003      	beq.n	8002dde <HAL_RCC_GetSysClockFreq+0xa6>
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2b03      	cmp	r3, #3
 8002dda:	d003      	beq.n	8002de4 <HAL_RCC_GetSysClockFreq+0xac>
 8002ddc:	e005      	b.n	8002dea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002dde:	4b1a      	ldr	r3, [pc, #104]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x110>)
 8002de0:	617b      	str	r3, [r7, #20]
      break;
 8002de2:	e005      	b.n	8002df0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002de4:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x114>)
 8002de6:	617b      	str	r3, [r7, #20]
      break;
 8002de8:	e002      	b.n	8002df0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	617b      	str	r3, [r7, #20]
      break;
 8002dee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002df0:	4b13      	ldr	r3, [pc, #76]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	091b      	lsrs	r3, r3, #4
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002dfe:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	0a1b      	lsrs	r3, r3, #8
 8002e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	fb03 f202 	mul.w	r2, r3, r2
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e16:	4b0a      	ldr	r3, [pc, #40]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	0e5b      	lsrs	r3, r3, #25
 8002e1c:	f003 0303 	and.w	r3, r3, #3
 8002e20:	3301      	adds	r3, #1
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e30:	69bb      	ldr	r3, [r7, #24]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3724      	adds	r7, #36	; 0x24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000
 8002e44:	08008d94 	.word	0x08008d94
 8002e48:	00f42400 	.word	0x00f42400
 8002e4c:	007a1200 	.word	0x007a1200

08002e50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e54:	4b03      	ldr	r3, [pc, #12]	; (8002e64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e56:	681b      	ldr	r3, [r3, #0]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	20000000 	.word	0x20000000

08002e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e6c:	f7ff fff0 	bl	8002e50 <HAL_RCC_GetHCLKFreq>
 8002e70:	4602      	mov	r2, r0
 8002e72:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	0a1b      	lsrs	r3, r3, #8
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	4904      	ldr	r1, [pc, #16]	; (8002e90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e7e:	5ccb      	ldrb	r3, [r1, r3]
 8002e80:	f003 031f 	and.w	r3, r3, #31
 8002e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	08008d8c 	.word	0x08008d8c

08002e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e98:	f7ff ffda 	bl	8002e50 <HAL_RCC_GetHCLKFreq>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	0adb      	lsrs	r3, r3, #11
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	4904      	ldr	r1, [pc, #16]	; (8002ebc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002eaa:	5ccb      	ldrb	r3, [r1, r3]
 8002eac:	f003 031f 	and.w	r3, r3, #31
 8002eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	08008d8c 	.word	0x08008d8c

08002ec0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ec8:	2300      	movs	r3, #0
 8002eca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ecc:	4b27      	ldr	r3, [pc, #156]	; (8002f6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ed8:	f7ff f916 	bl	8002108 <HAL_PWREx_GetVoltageRange>
 8002edc:	6178      	str	r0, [r7, #20]
 8002ede:	e014      	b.n	8002f0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ee0:	4b22      	ldr	r3, [pc, #136]	; (8002f6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee4:	4a21      	ldr	r2, [pc, #132]	; (8002f6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eea:	6593      	str	r3, [r2, #88]	; 0x58
 8002eec:	4b1f      	ldr	r3, [pc, #124]	; (8002f6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ef8:	f7ff f906 	bl	8002108 <HAL_PWREx_GetVoltageRange>
 8002efc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002efe:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f02:	4a1a      	ldr	r2, [pc, #104]	; (8002f6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f10:	d10b      	bne.n	8002f2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b80      	cmp	r3, #128	; 0x80
 8002f16:	d913      	bls.n	8002f40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2ba0      	cmp	r3, #160	; 0xa0
 8002f1c:	d902      	bls.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f1e:	2302      	movs	r3, #2
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	e00d      	b.n	8002f40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f24:	2301      	movs	r3, #1
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	e00a      	b.n	8002f40 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b7f      	cmp	r3, #127	; 0x7f
 8002f2e:	d902      	bls.n	8002f36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002f30:	2302      	movs	r3, #2
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	e004      	b.n	8002f40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b70      	cmp	r3, #112	; 0x70
 8002f3a:	d101      	bne.n	8002f40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f023 020f 	bic.w	r2, r3, #15
 8002f48:	4909      	ldr	r1, [pc, #36]	; (8002f70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f50:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 030f 	and.w	r3, r3, #15
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d001      	beq.n	8002f62 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	40022000 	.word	0x40022000

08002f74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f7a:	4b2d      	ldr	r3, [pc, #180]	; (8003030 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b03      	cmp	r3, #3
 8002f88:	d00b      	beq.n	8002fa2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d825      	bhi.n	8002fdc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d008      	beq.n	8002fa8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d11f      	bne.n	8002fdc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002f9c:	4b25      	ldr	r3, [pc, #148]	; (8003034 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f9e:	613b      	str	r3, [r7, #16]
    break;
 8002fa0:	e01f      	b.n	8002fe2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002fa2:	4b25      	ldr	r3, [pc, #148]	; (8003038 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002fa4:	613b      	str	r3, [r7, #16]
    break;
 8002fa6:	e01c      	b.n	8002fe2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fa8:	4b21      	ldr	r3, [pc, #132]	; (8003030 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d107      	bne.n	8002fc4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fb4:	4b1e      	ldr	r3, [pc, #120]	; (8003030 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fba:	0a1b      	lsrs	r3, r3, #8
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	e005      	b.n	8002fd0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fc4:	4b1a      	ldr	r3, [pc, #104]	; (8003030 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002fd0:	4a1a      	ldr	r2, [pc, #104]	; (800303c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd8:	613b      	str	r3, [r7, #16]
    break;
 8002fda:	e002      	b.n	8002fe2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	613b      	str	r3, [r7, #16]
    break;
 8002fe0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fe2:	4b13      	ldr	r3, [pc, #76]	; (8003030 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	091b      	lsrs	r3, r3, #4
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	3301      	adds	r3, #1
 8002fee:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ff0:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	0a1b      	lsrs	r3, r3, #8
 8002ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	fb03 f202 	mul.w	r2, r3, r2
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	fbb2 f3f3 	udiv	r3, r2, r3
 8003006:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003008:	4b09      	ldr	r3, [pc, #36]	; (8003030 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	0e5b      	lsrs	r3, r3, #25
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	3301      	adds	r3, #1
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003020:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003022:	683b      	ldr	r3, [r7, #0]
}
 8003024:	4618      	mov	r0, r3
 8003026:	371c      	adds	r7, #28
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	40021000 	.word	0x40021000
 8003034:	00f42400 	.word	0x00f42400
 8003038:	007a1200 	.word	0x007a1200
 800303c:	08008d94 	.word	0x08008d94

08003040 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003048:	2300      	movs	r3, #0
 800304a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800304c:	2300      	movs	r3, #0
 800304e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003058:	2b00      	cmp	r3, #0
 800305a:	d040      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003060:	2b80      	cmp	r3, #128	; 0x80
 8003062:	d02a      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003064:	2b80      	cmp	r3, #128	; 0x80
 8003066:	d825      	bhi.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003068:	2b60      	cmp	r3, #96	; 0x60
 800306a:	d026      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800306c:	2b60      	cmp	r3, #96	; 0x60
 800306e:	d821      	bhi.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003070:	2b40      	cmp	r3, #64	; 0x40
 8003072:	d006      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003074:	2b40      	cmp	r3, #64	; 0x40
 8003076:	d81d      	bhi.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003078:	2b00      	cmp	r3, #0
 800307a:	d009      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800307c:	2b20      	cmp	r3, #32
 800307e:	d010      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003080:	e018      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003082:	4b89      	ldr	r3, [pc, #548]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	4a88      	ldr	r2, [pc, #544]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800308c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800308e:	e015      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3304      	adds	r3, #4
 8003094:	2100      	movs	r1, #0
 8003096:	4618      	mov	r0, r3
 8003098:	f000 fb02 	bl	80036a0 <RCCEx_PLLSAI1_Config>
 800309c:	4603      	mov	r3, r0
 800309e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030a0:	e00c      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3320      	adds	r3, #32
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fbed 	bl	8003888 <RCCEx_PLLSAI2_Config>
 80030ae:	4603      	mov	r3, r0
 80030b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030b2:	e003      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	74fb      	strb	r3, [r7, #19]
      break;
 80030b8:	e000      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80030ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030bc:	7cfb      	ldrb	r3, [r7, #19]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10b      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030c2:	4b79      	ldr	r3, [pc, #484]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030c8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030d0:	4975      	ldr	r1, [pc, #468]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80030d8:	e001      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030da:	7cfb      	ldrb	r3, [r7, #19]
 80030dc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d047      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f2:	d030      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80030f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f8:	d82a      	bhi.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80030fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030fe:	d02a      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003100:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003104:	d824      	bhi.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800310a:	d008      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800310c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003110:	d81e      	bhi.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800311a:	d010      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800311c:	e018      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800311e:	4b62      	ldr	r3, [pc, #392]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	4a61      	ldr	r2, [pc, #388]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003128:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800312a:	e015      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3304      	adds	r3, #4
 8003130:	2100      	movs	r1, #0
 8003132:	4618      	mov	r0, r3
 8003134:	f000 fab4 	bl	80036a0 <RCCEx_PLLSAI1_Config>
 8003138:	4603      	mov	r3, r0
 800313a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800313c:	e00c      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3320      	adds	r3, #32
 8003142:	2100      	movs	r1, #0
 8003144:	4618      	mov	r0, r3
 8003146:	f000 fb9f 	bl	8003888 <RCCEx_PLLSAI2_Config>
 800314a:	4603      	mov	r3, r0
 800314c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800314e:	e003      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	74fb      	strb	r3, [r7, #19]
      break;
 8003154:	e000      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003156:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003158:	7cfb      	ldrb	r3, [r7, #19]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10b      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800315e:	4b52      	ldr	r3, [pc, #328]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003160:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003164:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316c:	494e      	ldr	r1, [pc, #312]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800316e:	4313      	orrs	r3, r2
 8003170:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003174:	e001      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003176:	7cfb      	ldrb	r3, [r7, #19]
 8003178:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 809f 	beq.w	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003188:	2300      	movs	r3, #0
 800318a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800318c:	4b46      	ldr	r3, [pc, #280]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800318e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800319c:	2300      	movs	r3, #0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00d      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a2:	4b41      	ldr	r3, [pc, #260]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a6:	4a40      	ldr	r2, [pc, #256]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ac:	6593      	str	r3, [r2, #88]	; 0x58
 80031ae:	4b3e      	ldr	r3, [pc, #248]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b6:	60bb      	str	r3, [r7, #8]
 80031b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ba:	2301      	movs	r3, #1
 80031bc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031be:	4b3b      	ldr	r3, [pc, #236]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a3a      	ldr	r2, [pc, #232]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80031c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031ca:	f7fe fd19 	bl	8001c00 <HAL_GetTick>
 80031ce:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031d0:	e009      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d2:	f7fe fd15 	bl	8001c00 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d902      	bls.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	74fb      	strb	r3, [r7, #19]
        break;
 80031e4:	e005      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031e6:	4b31      	ldr	r3, [pc, #196]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0ef      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80031f2:	7cfb      	ldrb	r3, [r7, #19]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d15b      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031f8:	4b2b      	ldr	r3, [pc, #172]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003202:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d01f      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	429a      	cmp	r2, r3
 8003214:	d019      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003216:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003220:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003222:	4b21      	ldr	r3, [pc, #132]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003228:	4a1f      	ldr	r2, [pc, #124]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800322a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003232:	4b1d      	ldr	r3, [pc, #116]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003238:	4a1b      	ldr	r2, [pc, #108]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800323a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800323e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003242:	4a19      	ldr	r2, [pc, #100]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b00      	cmp	r3, #0
 8003252:	d016      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7fe fcd4 	bl	8001c00 <HAL_GetTick>
 8003258:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800325a:	e00b      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325c:	f7fe fcd0 	bl	8001c00 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	f241 3288 	movw	r2, #5000	; 0x1388
 800326a:	4293      	cmp	r3, r2
 800326c:	d902      	bls.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	74fb      	strb	r3, [r7, #19]
            break;
 8003272:	e006      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003274:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0ec      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003282:	7cfb      	ldrb	r3, [r7, #19]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10c      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003288:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800328a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003298:	4903      	ldr	r1, [pc, #12]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800329a:	4313      	orrs	r3, r2
 800329c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032a0:	e008      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032a2:	7cfb      	ldrb	r3, [r7, #19]
 80032a4:	74bb      	strb	r3, [r7, #18]
 80032a6:	e005      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80032a8:	40021000 	.word	0x40021000
 80032ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b0:	7cfb      	ldrb	r3, [r7, #19]
 80032b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032b4:	7c7b      	ldrb	r3, [r7, #17]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d105      	bne.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ba:	4ba0      	ldr	r3, [pc, #640]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032be:	4a9f      	ldr	r2, [pc, #636]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032d2:	4b9a      	ldr	r3, [pc, #616]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d8:	f023 0203 	bic.w	r2, r3, #3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e0:	4996      	ldr	r1, [pc, #600]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032f4:	4b91      	ldr	r3, [pc, #580]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fa:	f023 020c 	bic.w	r2, r3, #12
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	498e      	ldr	r1, [pc, #568]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003304:	4313      	orrs	r3, r2
 8003306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0304 	and.w	r3, r3, #4
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003316:	4b89      	ldr	r3, [pc, #548]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003324:	4985      	ldr	r1, [pc, #532]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00a      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003338:	4b80      	ldr	r3, [pc, #512]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800333a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003346:	497d      	ldr	r1, [pc, #500]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0310 	and.w	r3, r3, #16
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800335a:	4b78      	ldr	r3, [pc, #480]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800335c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003360:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003368:	4974      	ldr	r1, [pc, #464]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00a      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800337c:	4b6f      	ldr	r3, [pc, #444]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800337e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003382:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800338a:	496c      	ldr	r1, [pc, #432]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800339e:	4b67      	ldr	r3, [pc, #412]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033ac:	4963      	ldr	r1, [pc, #396]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00a      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033c0:	4b5e      	ldr	r3, [pc, #376]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033ce:	495b      	ldr	r1, [pc, #364]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033e2:	4b56      	ldr	r3, [pc, #344]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f0:	4952      	ldr	r1, [pc, #328]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00a      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003404:	4b4d      	ldr	r3, [pc, #308]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003412:	494a      	ldr	r1, [pc, #296]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003414:	4313      	orrs	r3, r2
 8003416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003426:	4b45      	ldr	r3, [pc, #276]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003434:	4941      	ldr	r1, [pc, #260]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003436:	4313      	orrs	r3, r2
 8003438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00a      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003448:	4b3c      	ldr	r3, [pc, #240]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800344a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800344e:	f023 0203 	bic.w	r2, r3, #3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003456:	4939      	ldr	r1, [pc, #228]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003458:	4313      	orrs	r3, r2
 800345a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d028      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800346a:	4b34      	ldr	r3, [pc, #208]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800346c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003470:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003478:	4930      	ldr	r1, [pc, #192]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800347a:	4313      	orrs	r3, r2
 800347c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003484:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003488:	d106      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800348a:	4b2c      	ldr	r3, [pc, #176]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	4a2b      	ldr	r2, [pc, #172]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003490:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003494:	60d3      	str	r3, [r2, #12]
 8003496:	e011      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800349c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034a0:	d10c      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3304      	adds	r3, #4
 80034a6:	2101      	movs	r1, #1
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 f8f9 	bl	80036a0 <RCCEx_PLLSAI1_Config>
 80034ae:	4603      	mov	r3, r0
 80034b0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80034b2:	7cfb      	ldrb	r3, [r7, #19]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80034b8:	7cfb      	ldrb	r3, [r7, #19]
 80034ba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d04d      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034d0:	d108      	bne.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80034d2:	4b1a      	ldr	r3, [pc, #104]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034d8:	4a18      	ldr	r2, [pc, #96]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034de:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80034e2:	e012      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80034e4:	4b15      	ldr	r3, [pc, #84]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034ea:	4a14      	ldr	r2, [pc, #80]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034f0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80034f4:	4b11      	ldr	r3, [pc, #68]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003502:	490e      	ldr	r1, [pc, #56]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800350e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003512:	d106      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003514:	4b09      	ldr	r3, [pc, #36]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	4a08      	ldr	r2, [pc, #32]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800351a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800351e:	60d3      	str	r3, [r2, #12]
 8003520:	e020      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003526:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800352a:	d109      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800352c:	4b03      	ldr	r3, [pc, #12]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	4a02      	ldr	r2, [pc, #8]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003536:	60d3      	str	r3, [r2, #12]
 8003538:	e014      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800353a:	bf00      	nop
 800353c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003544:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003548:	d10c      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3304      	adds	r3, #4
 800354e:	2101      	movs	r1, #1
 8003550:	4618      	mov	r0, r3
 8003552:	f000 f8a5 	bl	80036a0 <RCCEx_PLLSAI1_Config>
 8003556:	4603      	mov	r3, r0
 8003558:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800355a:	7cfb      	ldrb	r3, [r7, #19]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003560:	7cfb      	ldrb	r3, [r7, #19]
 8003562:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d028      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003570:	4b4a      	ldr	r3, [pc, #296]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003576:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800357e:	4947      	ldr	r1, [pc, #284]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800358a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800358e:	d106      	bne.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003590:	4b42      	ldr	r3, [pc, #264]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	4a41      	ldr	r2, [pc, #260]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003596:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800359a:	60d3      	str	r3, [r2, #12]
 800359c:	e011      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035a6:	d10c      	bne.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3304      	adds	r3, #4
 80035ac:	2101      	movs	r1, #1
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 f876 	bl	80036a0 <RCCEx_PLLSAI1_Config>
 80035b4:	4603      	mov	r3, r0
 80035b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035b8:	7cfb      	ldrb	r3, [r7, #19]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80035be:	7cfb      	ldrb	r3, [r7, #19]
 80035c0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d01e      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035ce:	4b33      	ldr	r3, [pc, #204]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035de:	492f      	ldr	r1, [pc, #188]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035f0:	d10c      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3304      	adds	r3, #4
 80035f6:	2102      	movs	r1, #2
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 f851 	bl	80036a0 <RCCEx_PLLSAI1_Config>
 80035fe:	4603      	mov	r3, r0
 8003600:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003602:	7cfb      	ldrb	r3, [r7, #19]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003608:	7cfb      	ldrb	r3, [r7, #19]
 800360a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00b      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003618:	4b20      	ldr	r3, [pc, #128]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800361a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800361e:	f023 0204 	bic.w	r2, r3, #4
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003628:	491c      	ldr	r1, [pc, #112]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800362a:	4313      	orrs	r3, r2
 800362c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00b      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800363c:	4b17      	ldr	r3, [pc, #92]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800363e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003642:	f023 0218 	bic.w	r2, r3, #24
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364c:	4913      	ldr	r1, [pc, #76]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800364e:	4313      	orrs	r3, r2
 8003650:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d017      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003660:	4b0e      	ldr	r3, [pc, #56]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003662:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003666:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003670:	490a      	ldr	r1, [pc, #40]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800367e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003682:	d105      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003684:	4b05      	ldr	r3, [pc, #20]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	4a04      	ldr	r2, [pc, #16]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800368a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800368e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003690:	7cbb      	ldrb	r3, [r7, #18]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40021000 	.word	0x40021000

080036a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036ae:	4b72      	ldr	r3, [pc, #456]	; (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00e      	beq.n	80036d8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036ba:	4b6f      	ldr	r3, [pc, #444]	; (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f003 0203 	and.w	r2, r3, #3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d103      	bne.n	80036d2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
       ||
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d142      	bne.n	8003758 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	73fb      	strb	r3, [r7, #15]
 80036d6:	e03f      	b.n	8003758 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b03      	cmp	r3, #3
 80036de:	d018      	beq.n	8003712 <RCCEx_PLLSAI1_Config+0x72>
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d825      	bhi.n	8003730 <RCCEx_PLLSAI1_Config+0x90>
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d002      	beq.n	80036ee <RCCEx_PLLSAI1_Config+0x4e>
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d009      	beq.n	8003700 <RCCEx_PLLSAI1_Config+0x60>
 80036ec:	e020      	b.n	8003730 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036ee:	4b62      	ldr	r3, [pc, #392]	; (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d11d      	bne.n	8003736 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036fe:	e01a      	b.n	8003736 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003700:	4b5d      	ldr	r3, [pc, #372]	; (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003708:	2b00      	cmp	r3, #0
 800370a:	d116      	bne.n	800373a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003710:	e013      	b.n	800373a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003712:	4b59      	ldr	r3, [pc, #356]	; (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10f      	bne.n	800373e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800371e:	4b56      	ldr	r3, [pc, #344]	; (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d109      	bne.n	800373e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800372e:	e006      	b.n	800373e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	73fb      	strb	r3, [r7, #15]
      break;
 8003734:	e004      	b.n	8003740 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003736:	bf00      	nop
 8003738:	e002      	b.n	8003740 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800373a:	bf00      	nop
 800373c:	e000      	b.n	8003740 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800373e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d108      	bne.n	8003758 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003746:	4b4c      	ldr	r3, [pc, #304]	; (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f023 0203 	bic.w	r2, r3, #3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4949      	ldr	r1, [pc, #292]	; (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003754:	4313      	orrs	r3, r2
 8003756:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	2b00      	cmp	r3, #0
 800375c:	f040 8086 	bne.w	800386c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003760:	4b45      	ldr	r3, [pc, #276]	; (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a44      	ldr	r2, [pc, #272]	; (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003766:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800376a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800376c:	f7fe fa48 	bl	8001c00 <HAL_GetTick>
 8003770:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003772:	e009      	b.n	8003788 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003774:	f7fe fa44 	bl	8001c00 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d902      	bls.n	8003788 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	73fb      	strb	r3, [r7, #15]
        break;
 8003786:	e005      	b.n	8003794 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003788:	4b3b      	ldr	r3, [pc, #236]	; (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1ef      	bne.n	8003774 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003794:	7bfb      	ldrb	r3, [r7, #15]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d168      	bne.n	800386c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d113      	bne.n	80037c8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037a0:	4b35      	ldr	r3, [pc, #212]	; (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	4b35      	ldr	r3, [pc, #212]	; (800387c <RCCEx_PLLSAI1_Config+0x1dc>)
 80037a6:	4013      	ands	r3, r2
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6892      	ldr	r2, [r2, #8]
 80037ac:	0211      	lsls	r1, r2, #8
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	68d2      	ldr	r2, [r2, #12]
 80037b2:	06d2      	lsls	r2, r2, #27
 80037b4:	4311      	orrs	r1, r2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6852      	ldr	r2, [r2, #4]
 80037ba:	3a01      	subs	r2, #1
 80037bc:	0112      	lsls	r2, r2, #4
 80037be:	430a      	orrs	r2, r1
 80037c0:	492d      	ldr	r1, [pc, #180]	; (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	610b      	str	r3, [r1, #16]
 80037c6:	e02d      	b.n	8003824 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d115      	bne.n	80037fa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037ce:	4b2a      	ldr	r3, [pc, #168]	; (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037d0:	691a      	ldr	r2, [r3, #16]
 80037d2:	4b2b      	ldr	r3, [pc, #172]	; (8003880 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6892      	ldr	r2, [r2, #8]
 80037da:	0211      	lsls	r1, r2, #8
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6912      	ldr	r2, [r2, #16]
 80037e0:	0852      	lsrs	r2, r2, #1
 80037e2:	3a01      	subs	r2, #1
 80037e4:	0552      	lsls	r2, r2, #21
 80037e6:	4311      	orrs	r1, r2
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6852      	ldr	r2, [r2, #4]
 80037ec:	3a01      	subs	r2, #1
 80037ee:	0112      	lsls	r2, r2, #4
 80037f0:	430a      	orrs	r2, r1
 80037f2:	4921      	ldr	r1, [pc, #132]	; (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	610b      	str	r3, [r1, #16]
 80037f8:	e014      	b.n	8003824 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037fa:	4b1f      	ldr	r3, [pc, #124]	; (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037fc:	691a      	ldr	r2, [r3, #16]
 80037fe:	4b21      	ldr	r3, [pc, #132]	; (8003884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003800:	4013      	ands	r3, r2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6892      	ldr	r2, [r2, #8]
 8003806:	0211      	lsls	r1, r2, #8
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6952      	ldr	r2, [r2, #20]
 800380c:	0852      	lsrs	r2, r2, #1
 800380e:	3a01      	subs	r2, #1
 8003810:	0652      	lsls	r2, r2, #25
 8003812:	4311      	orrs	r1, r2
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6852      	ldr	r2, [r2, #4]
 8003818:	3a01      	subs	r2, #1
 800381a:	0112      	lsls	r2, r2, #4
 800381c:	430a      	orrs	r2, r1
 800381e:	4916      	ldr	r1, [pc, #88]	; (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003820:	4313      	orrs	r3, r2
 8003822:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003824:	4b14      	ldr	r3, [pc, #80]	; (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a13      	ldr	r2, [pc, #76]	; (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 800382a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800382e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003830:	f7fe f9e6 	bl	8001c00 <HAL_GetTick>
 8003834:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003836:	e009      	b.n	800384c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003838:	f7fe f9e2 	bl	8001c00 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d902      	bls.n	800384c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	73fb      	strb	r3, [r7, #15]
          break;
 800384a:	e005      	b.n	8003858 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800384c:	4b0a      	ldr	r3, [pc, #40]	; (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0ef      	beq.n	8003838 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d106      	bne.n	800386c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800385e:	4b06      	ldr	r3, [pc, #24]	; (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003860:	691a      	ldr	r2, [r3, #16]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	4904      	ldr	r1, [pc, #16]	; (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003868:	4313      	orrs	r3, r2
 800386a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800386c:	7bfb      	ldrb	r3, [r7, #15]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40021000 	.word	0x40021000
 800387c:	07ff800f 	.word	0x07ff800f
 8003880:	ff9f800f 	.word	0xff9f800f
 8003884:	f9ff800f 	.word	0xf9ff800f

08003888 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003896:	4b72      	ldr	r3, [pc, #456]	; (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00e      	beq.n	80038c0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80038a2:	4b6f      	ldr	r3, [pc, #444]	; (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f003 0203 	and.w	r2, r3, #3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d103      	bne.n	80038ba <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
       ||
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d142      	bne.n	8003940 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	73fb      	strb	r3, [r7, #15]
 80038be:	e03f      	b.n	8003940 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	d018      	beq.n	80038fa <RCCEx_PLLSAI2_Config+0x72>
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d825      	bhi.n	8003918 <RCCEx_PLLSAI2_Config+0x90>
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d002      	beq.n	80038d6 <RCCEx_PLLSAI2_Config+0x4e>
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d009      	beq.n	80038e8 <RCCEx_PLLSAI2_Config+0x60>
 80038d4:	e020      	b.n	8003918 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038d6:	4b62      	ldr	r3, [pc, #392]	; (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d11d      	bne.n	800391e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038e6:	e01a      	b.n	800391e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038e8:	4b5d      	ldr	r3, [pc, #372]	; (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d116      	bne.n	8003922 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038f8:	e013      	b.n	8003922 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038fa:	4b59      	ldr	r3, [pc, #356]	; (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10f      	bne.n	8003926 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003906:	4b56      	ldr	r3, [pc, #344]	; (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003916:	e006      	b.n	8003926 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	73fb      	strb	r3, [r7, #15]
      break;
 800391c:	e004      	b.n	8003928 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800391e:	bf00      	nop
 8003920:	e002      	b.n	8003928 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003922:	bf00      	nop
 8003924:	e000      	b.n	8003928 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003926:	bf00      	nop
    }

    if(status == HAL_OK)
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d108      	bne.n	8003940 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800392e:	4b4c      	ldr	r3, [pc, #304]	; (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f023 0203 	bic.w	r2, r3, #3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4949      	ldr	r1, [pc, #292]	; (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 800393c:	4313      	orrs	r3, r2
 800393e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	2b00      	cmp	r3, #0
 8003944:	f040 8086 	bne.w	8003a54 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003948:	4b45      	ldr	r3, [pc, #276]	; (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a44      	ldr	r2, [pc, #272]	; (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 800394e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003952:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003954:	f7fe f954 	bl	8001c00 <HAL_GetTick>
 8003958:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800395a:	e009      	b.n	8003970 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800395c:	f7fe f950 	bl	8001c00 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d902      	bls.n	8003970 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	73fb      	strb	r3, [r7, #15]
        break;
 800396e:	e005      	b.n	800397c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003970:	4b3b      	ldr	r3, [pc, #236]	; (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1ef      	bne.n	800395c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800397c:	7bfb      	ldrb	r3, [r7, #15]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d168      	bne.n	8003a54 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d113      	bne.n	80039b0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003988:	4b35      	ldr	r3, [pc, #212]	; (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 800398a:	695a      	ldr	r2, [r3, #20]
 800398c:	4b35      	ldr	r3, [pc, #212]	; (8003a64 <RCCEx_PLLSAI2_Config+0x1dc>)
 800398e:	4013      	ands	r3, r2
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6892      	ldr	r2, [r2, #8]
 8003994:	0211      	lsls	r1, r2, #8
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	68d2      	ldr	r2, [r2, #12]
 800399a:	06d2      	lsls	r2, r2, #27
 800399c:	4311      	orrs	r1, r2
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6852      	ldr	r2, [r2, #4]
 80039a2:	3a01      	subs	r2, #1
 80039a4:	0112      	lsls	r2, r2, #4
 80039a6:	430a      	orrs	r2, r1
 80039a8:	492d      	ldr	r1, [pc, #180]	; (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	614b      	str	r3, [r1, #20]
 80039ae:	e02d      	b.n	8003a0c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d115      	bne.n	80039e2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039b6:	4b2a      	ldr	r3, [pc, #168]	; (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039b8:	695a      	ldr	r2, [r3, #20]
 80039ba:	4b2b      	ldr	r3, [pc, #172]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1e0>)
 80039bc:	4013      	ands	r3, r2
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6892      	ldr	r2, [r2, #8]
 80039c2:	0211      	lsls	r1, r2, #8
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6912      	ldr	r2, [r2, #16]
 80039c8:	0852      	lsrs	r2, r2, #1
 80039ca:	3a01      	subs	r2, #1
 80039cc:	0552      	lsls	r2, r2, #21
 80039ce:	4311      	orrs	r1, r2
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6852      	ldr	r2, [r2, #4]
 80039d4:	3a01      	subs	r2, #1
 80039d6:	0112      	lsls	r2, r2, #4
 80039d8:	430a      	orrs	r2, r1
 80039da:	4921      	ldr	r1, [pc, #132]	; (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	614b      	str	r3, [r1, #20]
 80039e0:	e014      	b.n	8003a0c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039e2:	4b1f      	ldr	r3, [pc, #124]	; (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039e4:	695a      	ldr	r2, [r3, #20]
 80039e6:	4b21      	ldr	r3, [pc, #132]	; (8003a6c <RCCEx_PLLSAI2_Config+0x1e4>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6892      	ldr	r2, [r2, #8]
 80039ee:	0211      	lsls	r1, r2, #8
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6952      	ldr	r2, [r2, #20]
 80039f4:	0852      	lsrs	r2, r2, #1
 80039f6:	3a01      	subs	r2, #1
 80039f8:	0652      	lsls	r2, r2, #25
 80039fa:	4311      	orrs	r1, r2
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6852      	ldr	r2, [r2, #4]
 8003a00:	3a01      	subs	r2, #1
 8003a02:	0112      	lsls	r2, r2, #4
 8003a04:	430a      	orrs	r2, r1
 8003a06:	4916      	ldr	r1, [pc, #88]	; (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a0c:	4b14      	ldr	r3, [pc, #80]	; (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a13      	ldr	r2, [pc, #76]	; (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a18:	f7fe f8f2 	bl	8001c00 <HAL_GetTick>
 8003a1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a1e:	e009      	b.n	8003a34 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a20:	f7fe f8ee 	bl	8001c00 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d902      	bls.n	8003a34 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	73fb      	strb	r3, [r7, #15]
          break;
 8003a32:	e005      	b.n	8003a40 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a34:	4b0a      	ldr	r3, [pc, #40]	; (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0ef      	beq.n	8003a20 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d106      	bne.n	8003a54 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a46:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a48:	695a      	ldr	r2, [r3, #20]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	4904      	ldr	r1, [pc, #16]	; (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40021000 	.word	0x40021000
 8003a64:	07ff800f 	.word	0x07ff800f
 8003a68:	ff9f800f 	.word	0xff9f800f
 8003a6c:	f9ff800f 	.word	0xf9ff800f

08003a70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e042      	b.n	8003b08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d106      	bne.n	8003a9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7fd fec3 	bl	8001820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2224      	movs	r2, #36	; 0x24
 8003a9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0201 	bic.w	r2, r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f8c4 	bl	8003c40 <UART_SetConfig>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d101      	bne.n	8003ac2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e022      	b.n	8003b08 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fbb4 	bl	8004238 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ade:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003aee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 fc3b 	bl	800437c <UART_CheckIdleState>
 8003b06:	4603      	mov	r3, r0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08a      	sub	sp, #40	; 0x28
 8003b14:	af02      	add	r7, sp, #8
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b26:	2b20      	cmp	r3, #32
 8003b28:	f040 8084 	bne.w	8003c34 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <HAL_UART_Transmit+0x28>
 8003b32:	88fb      	ldrh	r3, [r7, #6]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e07c      	b.n	8003c36 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <HAL_UART_Transmit+0x3a>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e075      	b.n	8003c36 <HAL_UART_Transmit+0x126>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2221      	movs	r2, #33	; 0x21
 8003b5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b62:	f7fe f84d 	bl	8001c00 <HAL_GetTick>
 8003b66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	88fa      	ldrh	r2, [r7, #6]
 8003b6c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	88fa      	ldrh	r2, [r7, #6]
 8003b74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b80:	d108      	bne.n	8003b94 <HAL_UART_Transmit+0x84>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d104      	bne.n	8003b94 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	61bb      	str	r3, [r7, #24]
 8003b92:	e003      	b.n	8003b9c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003ba4:	e02d      	b.n	8003c02 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2200      	movs	r2, #0
 8003bae:	2180      	movs	r1, #128	; 0x80
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 fc2e 	bl	8004412 <UART_WaitOnFlagUntilTimeout>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e03a      	b.n	8003c36 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10b      	bne.n	8003bde <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	881a      	ldrh	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bd2:	b292      	uxth	r2, r2
 8003bd4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	3302      	adds	r3, #2
 8003bda:	61bb      	str	r3, [r7, #24]
 8003bdc:	e008      	b.n	8003bf0 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	781a      	ldrb	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	b292      	uxth	r2, r2
 8003be8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	3301      	adds	r3, #1
 8003bee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1cb      	bne.n	8003ba6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2200      	movs	r2, #0
 8003c16:	2140      	movs	r1, #64	; 0x40
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 fbfa 	bl	8004412 <UART_WaitOnFlagUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e006      	b.n	8003c36 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	e000      	b.n	8003c36 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003c34:	2302      	movs	r3, #2
  }
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3720      	adds	r7, #32
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
	...

08003c40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c44:	b08c      	sub	sp, #48	; 0x30
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	4baa      	ldr	r3, [pc, #680]	; (8003f18 <UART_SetConfig+0x2d8>)
 8003c70:	4013      	ands	r3, r2
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	6812      	ldr	r2, [r2, #0]
 8003c76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a9f      	ldr	r2, [pc, #636]	; (8003f1c <UART_SetConfig+0x2dc>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d004      	beq.n	8003cac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003cb6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	6812      	ldr	r2, [r2, #0]
 8003cbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cc0:	430b      	orrs	r3, r1
 8003cc2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cca:	f023 010f 	bic.w	r1, r3, #15
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a90      	ldr	r2, [pc, #576]	; (8003f20 <UART_SetConfig+0x2e0>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d125      	bne.n	8003d30 <UART_SetConfig+0xf0>
 8003ce4:	4b8f      	ldr	r3, [pc, #572]	; (8003f24 <UART_SetConfig+0x2e4>)
 8003ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	2b03      	cmp	r3, #3
 8003cf0:	d81a      	bhi.n	8003d28 <UART_SetConfig+0xe8>
 8003cf2:	a201      	add	r2, pc, #4	; (adr r2, 8003cf8 <UART_SetConfig+0xb8>)
 8003cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf8:	08003d09 	.word	0x08003d09
 8003cfc:	08003d19 	.word	0x08003d19
 8003d00:	08003d11 	.word	0x08003d11
 8003d04:	08003d21 	.word	0x08003d21
 8003d08:	2301      	movs	r3, #1
 8003d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d0e:	e116      	b.n	8003f3e <UART_SetConfig+0x2fe>
 8003d10:	2302      	movs	r3, #2
 8003d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d16:	e112      	b.n	8003f3e <UART_SetConfig+0x2fe>
 8003d18:	2304      	movs	r3, #4
 8003d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d1e:	e10e      	b.n	8003f3e <UART_SetConfig+0x2fe>
 8003d20:	2308      	movs	r3, #8
 8003d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d26:	e10a      	b.n	8003f3e <UART_SetConfig+0x2fe>
 8003d28:	2310      	movs	r3, #16
 8003d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d2e:	e106      	b.n	8003f3e <UART_SetConfig+0x2fe>
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a7c      	ldr	r2, [pc, #496]	; (8003f28 <UART_SetConfig+0x2e8>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d138      	bne.n	8003dac <UART_SetConfig+0x16c>
 8003d3a:	4b7a      	ldr	r3, [pc, #488]	; (8003f24 <UART_SetConfig+0x2e4>)
 8003d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d40:	f003 030c 	and.w	r3, r3, #12
 8003d44:	2b0c      	cmp	r3, #12
 8003d46:	d82d      	bhi.n	8003da4 <UART_SetConfig+0x164>
 8003d48:	a201      	add	r2, pc, #4	; (adr r2, 8003d50 <UART_SetConfig+0x110>)
 8003d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4e:	bf00      	nop
 8003d50:	08003d85 	.word	0x08003d85
 8003d54:	08003da5 	.word	0x08003da5
 8003d58:	08003da5 	.word	0x08003da5
 8003d5c:	08003da5 	.word	0x08003da5
 8003d60:	08003d95 	.word	0x08003d95
 8003d64:	08003da5 	.word	0x08003da5
 8003d68:	08003da5 	.word	0x08003da5
 8003d6c:	08003da5 	.word	0x08003da5
 8003d70:	08003d8d 	.word	0x08003d8d
 8003d74:	08003da5 	.word	0x08003da5
 8003d78:	08003da5 	.word	0x08003da5
 8003d7c:	08003da5 	.word	0x08003da5
 8003d80:	08003d9d 	.word	0x08003d9d
 8003d84:	2300      	movs	r3, #0
 8003d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d8a:	e0d8      	b.n	8003f3e <UART_SetConfig+0x2fe>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d92:	e0d4      	b.n	8003f3e <UART_SetConfig+0x2fe>
 8003d94:	2304      	movs	r3, #4
 8003d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d9a:	e0d0      	b.n	8003f3e <UART_SetConfig+0x2fe>
 8003d9c:	2308      	movs	r3, #8
 8003d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003da2:	e0cc      	b.n	8003f3e <UART_SetConfig+0x2fe>
 8003da4:	2310      	movs	r3, #16
 8003da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003daa:	e0c8      	b.n	8003f3e <UART_SetConfig+0x2fe>
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a5e      	ldr	r2, [pc, #376]	; (8003f2c <UART_SetConfig+0x2ec>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d125      	bne.n	8003e02 <UART_SetConfig+0x1c2>
 8003db6:	4b5b      	ldr	r3, [pc, #364]	; (8003f24 <UART_SetConfig+0x2e4>)
 8003db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003dc0:	2b30      	cmp	r3, #48	; 0x30
 8003dc2:	d016      	beq.n	8003df2 <UART_SetConfig+0x1b2>
 8003dc4:	2b30      	cmp	r3, #48	; 0x30
 8003dc6:	d818      	bhi.n	8003dfa <UART_SetConfig+0x1ba>
 8003dc8:	2b20      	cmp	r3, #32
 8003dca:	d00a      	beq.n	8003de2 <UART_SetConfig+0x1a2>
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d814      	bhi.n	8003dfa <UART_SetConfig+0x1ba>
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <UART_SetConfig+0x19a>
 8003dd4:	2b10      	cmp	r3, #16
 8003dd6:	d008      	beq.n	8003dea <UART_SetConfig+0x1aa>
 8003dd8:	e00f      	b.n	8003dfa <UART_SetConfig+0x1ba>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003de0:	e0ad      	b.n	8003f3e <UART_SetConfig+0x2fe>
 8003de2:	2302      	movs	r3, #2
 8003de4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003de8:	e0a9      	b.n	8003f3e <UART_SetConfig+0x2fe>
 8003dea:	2304      	movs	r3, #4
 8003dec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003df0:	e0a5      	b.n	8003f3e <UART_SetConfig+0x2fe>
 8003df2:	2308      	movs	r3, #8
 8003df4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003df8:	e0a1      	b.n	8003f3e <UART_SetConfig+0x2fe>
 8003dfa:	2310      	movs	r3, #16
 8003dfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e00:	e09d      	b.n	8003f3e <UART_SetConfig+0x2fe>
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a4a      	ldr	r2, [pc, #296]	; (8003f30 <UART_SetConfig+0x2f0>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d125      	bne.n	8003e58 <UART_SetConfig+0x218>
 8003e0c:	4b45      	ldr	r3, [pc, #276]	; (8003f24 <UART_SetConfig+0x2e4>)
 8003e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e16:	2bc0      	cmp	r3, #192	; 0xc0
 8003e18:	d016      	beq.n	8003e48 <UART_SetConfig+0x208>
 8003e1a:	2bc0      	cmp	r3, #192	; 0xc0
 8003e1c:	d818      	bhi.n	8003e50 <UART_SetConfig+0x210>
 8003e1e:	2b80      	cmp	r3, #128	; 0x80
 8003e20:	d00a      	beq.n	8003e38 <UART_SetConfig+0x1f8>
 8003e22:	2b80      	cmp	r3, #128	; 0x80
 8003e24:	d814      	bhi.n	8003e50 <UART_SetConfig+0x210>
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <UART_SetConfig+0x1f0>
 8003e2a:	2b40      	cmp	r3, #64	; 0x40
 8003e2c:	d008      	beq.n	8003e40 <UART_SetConfig+0x200>
 8003e2e:	e00f      	b.n	8003e50 <UART_SetConfig+0x210>
 8003e30:	2300      	movs	r3, #0
 8003e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e36:	e082      	b.n	8003f3e <UART_SetConfig+0x2fe>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e3e:	e07e      	b.n	8003f3e <UART_SetConfig+0x2fe>
 8003e40:	2304      	movs	r3, #4
 8003e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e46:	e07a      	b.n	8003f3e <UART_SetConfig+0x2fe>
 8003e48:	2308      	movs	r3, #8
 8003e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e4e:	e076      	b.n	8003f3e <UART_SetConfig+0x2fe>
 8003e50:	2310      	movs	r3, #16
 8003e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e56:	e072      	b.n	8003f3e <UART_SetConfig+0x2fe>
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a35      	ldr	r2, [pc, #212]	; (8003f34 <UART_SetConfig+0x2f4>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d12a      	bne.n	8003eb8 <UART_SetConfig+0x278>
 8003e62:	4b30      	ldr	r3, [pc, #192]	; (8003f24 <UART_SetConfig+0x2e4>)
 8003e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e70:	d01a      	beq.n	8003ea8 <UART_SetConfig+0x268>
 8003e72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e76:	d81b      	bhi.n	8003eb0 <UART_SetConfig+0x270>
 8003e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e7c:	d00c      	beq.n	8003e98 <UART_SetConfig+0x258>
 8003e7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e82:	d815      	bhi.n	8003eb0 <UART_SetConfig+0x270>
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <UART_SetConfig+0x250>
 8003e88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e8c:	d008      	beq.n	8003ea0 <UART_SetConfig+0x260>
 8003e8e:	e00f      	b.n	8003eb0 <UART_SetConfig+0x270>
 8003e90:	2300      	movs	r3, #0
 8003e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e96:	e052      	b.n	8003f3e <UART_SetConfig+0x2fe>
 8003e98:	2302      	movs	r3, #2
 8003e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e9e:	e04e      	b.n	8003f3e <UART_SetConfig+0x2fe>
 8003ea0:	2304      	movs	r3, #4
 8003ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ea6:	e04a      	b.n	8003f3e <UART_SetConfig+0x2fe>
 8003ea8:	2308      	movs	r3, #8
 8003eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eae:	e046      	b.n	8003f3e <UART_SetConfig+0x2fe>
 8003eb0:	2310      	movs	r3, #16
 8003eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eb6:	e042      	b.n	8003f3e <UART_SetConfig+0x2fe>
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a17      	ldr	r2, [pc, #92]	; (8003f1c <UART_SetConfig+0x2dc>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d13a      	bne.n	8003f38 <UART_SetConfig+0x2f8>
 8003ec2:	4b18      	ldr	r3, [pc, #96]	; (8003f24 <UART_SetConfig+0x2e4>)
 8003ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ecc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ed0:	d01a      	beq.n	8003f08 <UART_SetConfig+0x2c8>
 8003ed2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ed6:	d81b      	bhi.n	8003f10 <UART_SetConfig+0x2d0>
 8003ed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003edc:	d00c      	beq.n	8003ef8 <UART_SetConfig+0x2b8>
 8003ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ee2:	d815      	bhi.n	8003f10 <UART_SetConfig+0x2d0>
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <UART_SetConfig+0x2b0>
 8003ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eec:	d008      	beq.n	8003f00 <UART_SetConfig+0x2c0>
 8003eee:	e00f      	b.n	8003f10 <UART_SetConfig+0x2d0>
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ef6:	e022      	b.n	8003f3e <UART_SetConfig+0x2fe>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003efe:	e01e      	b.n	8003f3e <UART_SetConfig+0x2fe>
 8003f00:	2304      	movs	r3, #4
 8003f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f06:	e01a      	b.n	8003f3e <UART_SetConfig+0x2fe>
 8003f08:	2308      	movs	r3, #8
 8003f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f0e:	e016      	b.n	8003f3e <UART_SetConfig+0x2fe>
 8003f10:	2310      	movs	r3, #16
 8003f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f16:	e012      	b.n	8003f3e <UART_SetConfig+0x2fe>
 8003f18:	cfff69f3 	.word	0xcfff69f3
 8003f1c:	40008000 	.word	0x40008000
 8003f20:	40013800 	.word	0x40013800
 8003f24:	40021000 	.word	0x40021000
 8003f28:	40004400 	.word	0x40004400
 8003f2c:	40004800 	.word	0x40004800
 8003f30:	40004c00 	.word	0x40004c00
 8003f34:	40005000 	.word	0x40005000
 8003f38:	2310      	movs	r3, #16
 8003f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4aae      	ldr	r2, [pc, #696]	; (80041fc <UART_SetConfig+0x5bc>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	f040 8097 	bne.w	8004078 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f4e:	2b08      	cmp	r3, #8
 8003f50:	d823      	bhi.n	8003f9a <UART_SetConfig+0x35a>
 8003f52:	a201      	add	r2, pc, #4	; (adr r2, 8003f58 <UART_SetConfig+0x318>)
 8003f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f58:	08003f7d 	.word	0x08003f7d
 8003f5c:	08003f9b 	.word	0x08003f9b
 8003f60:	08003f85 	.word	0x08003f85
 8003f64:	08003f9b 	.word	0x08003f9b
 8003f68:	08003f8b 	.word	0x08003f8b
 8003f6c:	08003f9b 	.word	0x08003f9b
 8003f70:	08003f9b 	.word	0x08003f9b
 8003f74:	08003f9b 	.word	0x08003f9b
 8003f78:	08003f93 	.word	0x08003f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f7c:	f7fe ff74 	bl	8002e68 <HAL_RCC_GetPCLK1Freq>
 8003f80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f82:	e010      	b.n	8003fa6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f84:	4b9e      	ldr	r3, [pc, #632]	; (8004200 <UART_SetConfig+0x5c0>)
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f88:	e00d      	b.n	8003fa6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f8a:	f7fe fed5 	bl	8002d38 <HAL_RCC_GetSysClockFreq>
 8003f8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f90:	e009      	b.n	8003fa6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f98:	e005      	b.n	8003fa6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003fa4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 8130 	beq.w	800420e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	4a94      	ldr	r2, [pc, #592]	; (8004204 <UART_SetConfig+0x5c4>)
 8003fb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	4413      	add	r3, r2
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d305      	bcc.n	8003fde <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d903      	bls.n	8003fe6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003fe4:	e113      	b.n	800420e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	2200      	movs	r2, #0
 8003fea:	60bb      	str	r3, [r7, #8]
 8003fec:	60fa      	str	r2, [r7, #12]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	4a84      	ldr	r2, [pc, #528]	; (8004204 <UART_SetConfig+0x5c4>)
 8003ff4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	603b      	str	r3, [r7, #0]
 8003ffe:	607a      	str	r2, [r7, #4]
 8004000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004004:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004008:	f7fc fe36 	bl	8000c78 <__aeabi_uldivmod>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	4610      	mov	r0, r2
 8004012:	4619      	mov	r1, r3
 8004014:	f04f 0200 	mov.w	r2, #0
 8004018:	f04f 0300 	mov.w	r3, #0
 800401c:	020b      	lsls	r3, r1, #8
 800401e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004022:	0202      	lsls	r2, r0, #8
 8004024:	6979      	ldr	r1, [r7, #20]
 8004026:	6849      	ldr	r1, [r1, #4]
 8004028:	0849      	lsrs	r1, r1, #1
 800402a:	2000      	movs	r0, #0
 800402c:	460c      	mov	r4, r1
 800402e:	4605      	mov	r5, r0
 8004030:	eb12 0804 	adds.w	r8, r2, r4
 8004034:	eb43 0905 	adc.w	r9, r3, r5
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	469a      	mov	sl, r3
 8004040:	4693      	mov	fp, r2
 8004042:	4652      	mov	r2, sl
 8004044:	465b      	mov	r3, fp
 8004046:	4640      	mov	r0, r8
 8004048:	4649      	mov	r1, r9
 800404a:	f7fc fe15 	bl	8000c78 <__aeabi_uldivmod>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4613      	mov	r3, r2
 8004054:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800405c:	d308      	bcc.n	8004070 <UART_SetConfig+0x430>
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004064:	d204      	bcs.n	8004070 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6a3a      	ldr	r2, [r7, #32]
 800406c:	60da      	str	r2, [r3, #12]
 800406e:	e0ce      	b.n	800420e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004076:	e0ca      	b.n	800420e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004080:	d166      	bne.n	8004150 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004082:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004086:	2b08      	cmp	r3, #8
 8004088:	d827      	bhi.n	80040da <UART_SetConfig+0x49a>
 800408a:	a201      	add	r2, pc, #4	; (adr r2, 8004090 <UART_SetConfig+0x450>)
 800408c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004090:	080040b5 	.word	0x080040b5
 8004094:	080040bd 	.word	0x080040bd
 8004098:	080040c5 	.word	0x080040c5
 800409c:	080040db 	.word	0x080040db
 80040a0:	080040cb 	.word	0x080040cb
 80040a4:	080040db 	.word	0x080040db
 80040a8:	080040db 	.word	0x080040db
 80040ac:	080040db 	.word	0x080040db
 80040b0:	080040d3 	.word	0x080040d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040b4:	f7fe fed8 	bl	8002e68 <HAL_RCC_GetPCLK1Freq>
 80040b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040ba:	e014      	b.n	80040e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040bc:	f7fe feea 	bl	8002e94 <HAL_RCC_GetPCLK2Freq>
 80040c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040c2:	e010      	b.n	80040e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040c4:	4b4e      	ldr	r3, [pc, #312]	; (8004200 <UART_SetConfig+0x5c0>)
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040c8:	e00d      	b.n	80040e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ca:	f7fe fe35 	bl	8002d38 <HAL_RCC_GetSysClockFreq>
 80040ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040d0:	e009      	b.n	80040e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040d8:	e005      	b.n	80040e6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80040da:	2300      	movs	r3, #0
 80040dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80040e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 8090 	beq.w	800420e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	4a44      	ldr	r2, [pc, #272]	; (8004204 <UART_SetConfig+0x5c4>)
 80040f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040f8:	461a      	mov	r2, r3
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004100:	005a      	lsls	r2, r3, #1
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	085b      	lsrs	r3, r3, #1
 8004108:	441a      	add	r2, r3
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004112:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	2b0f      	cmp	r3, #15
 8004118:	d916      	bls.n	8004148 <UART_SetConfig+0x508>
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004120:	d212      	bcs.n	8004148 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	b29b      	uxth	r3, r3
 8004126:	f023 030f 	bic.w	r3, r3, #15
 800412a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800412c:	6a3b      	ldr	r3, [r7, #32]
 800412e:	085b      	lsrs	r3, r3, #1
 8004130:	b29b      	uxth	r3, r3
 8004132:	f003 0307 	and.w	r3, r3, #7
 8004136:	b29a      	uxth	r2, r3
 8004138:	8bfb      	ldrh	r3, [r7, #30]
 800413a:	4313      	orrs	r3, r2
 800413c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	8bfa      	ldrh	r2, [r7, #30]
 8004144:	60da      	str	r2, [r3, #12]
 8004146:	e062      	b.n	800420e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800414e:	e05e      	b.n	800420e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004150:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004154:	2b08      	cmp	r3, #8
 8004156:	d828      	bhi.n	80041aa <UART_SetConfig+0x56a>
 8004158:	a201      	add	r2, pc, #4	; (adr r2, 8004160 <UART_SetConfig+0x520>)
 800415a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415e:	bf00      	nop
 8004160:	08004185 	.word	0x08004185
 8004164:	0800418d 	.word	0x0800418d
 8004168:	08004195 	.word	0x08004195
 800416c:	080041ab 	.word	0x080041ab
 8004170:	0800419b 	.word	0x0800419b
 8004174:	080041ab 	.word	0x080041ab
 8004178:	080041ab 	.word	0x080041ab
 800417c:	080041ab 	.word	0x080041ab
 8004180:	080041a3 	.word	0x080041a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004184:	f7fe fe70 	bl	8002e68 <HAL_RCC_GetPCLK1Freq>
 8004188:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800418a:	e014      	b.n	80041b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800418c:	f7fe fe82 	bl	8002e94 <HAL_RCC_GetPCLK2Freq>
 8004190:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004192:	e010      	b.n	80041b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004194:	4b1a      	ldr	r3, [pc, #104]	; (8004200 <UART_SetConfig+0x5c0>)
 8004196:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004198:	e00d      	b.n	80041b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800419a:	f7fe fdcd 	bl	8002d38 <HAL_RCC_GetSysClockFreq>
 800419e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80041a0:	e009      	b.n	80041b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80041a8:	e005      	b.n	80041b6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80041b4:	bf00      	nop
    }

    if (pclk != 0U)
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d028      	beq.n	800420e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	4a10      	ldr	r2, [pc, #64]	; (8004204 <UART_SetConfig+0x5c4>)
 80041c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041c6:	461a      	mov	r2, r3
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	085b      	lsrs	r3, r3, #1
 80041d4:	441a      	add	r2, r3
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	fbb2 f3f3 	udiv	r3, r2, r3
 80041de:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	2b0f      	cmp	r3, #15
 80041e4:	d910      	bls.n	8004208 <UART_SetConfig+0x5c8>
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ec:	d20c      	bcs.n	8004208 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041ee:	6a3b      	ldr	r3, [r7, #32]
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	60da      	str	r2, [r3, #12]
 80041f8:	e009      	b.n	800420e <UART_SetConfig+0x5ce>
 80041fa:	bf00      	nop
 80041fc:	40008000 	.word	0x40008000
 8004200:	00f42400 	.word	0x00f42400
 8004204:	08008dc4 	.word	0x08008dc4
      }
      else
      {
        ret = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2201      	movs	r2, #1
 8004212:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2201      	movs	r2, #1
 800421a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2200      	movs	r2, #0
 8004222:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2200      	movs	r2, #0
 8004228:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800422a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800422e:	4618      	mov	r0, r3
 8004230:	3730      	adds	r7, #48	; 0x30
 8004232:	46bd      	mov	sp, r7
 8004234:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004238 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00a      	beq.n	8004262 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00a      	beq.n	80042a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00a      	beq.n	80042c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042cc:	f003 0310 	and.w	r3, r3, #16
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00a      	beq.n	80042ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ee:	f003 0320 	and.w	r3, r3, #32
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00a      	beq.n	800430c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004314:	2b00      	cmp	r3, #0
 8004316:	d01a      	beq.n	800434e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004332:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004336:	d10a      	bne.n	800434e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00a      	beq.n	8004370 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	605a      	str	r2, [r3, #4]
  }
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af02      	add	r7, sp, #8
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800438c:	f7fd fc38 	bl	8001c00 <HAL_GetTick>
 8004390:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0308 	and.w	r3, r3, #8
 800439c:	2b08      	cmp	r3, #8
 800439e:	d10e      	bne.n	80043be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f82f 	bl	8004412 <UART_WaitOnFlagUntilTimeout>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e025      	b.n	800440a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d10e      	bne.n	80043ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f819 	bl	8004412 <UART_WaitOnFlagUntilTimeout>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e00f      	b.n	800440a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2220      	movs	r2, #32
 80043ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b09c      	sub	sp, #112	; 0x70
 8004416:	af00      	add	r7, sp, #0
 8004418:	60f8      	str	r0, [r7, #12]
 800441a:	60b9      	str	r1, [r7, #8]
 800441c:	603b      	str	r3, [r7, #0]
 800441e:	4613      	mov	r3, r2
 8004420:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004422:	e0a9      	b.n	8004578 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004424:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004426:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800442a:	f000 80a5 	beq.w	8004578 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800442e:	f7fd fbe7 	bl	8001c00 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800443a:	429a      	cmp	r2, r3
 800443c:	d302      	bcc.n	8004444 <UART_WaitOnFlagUntilTimeout+0x32>
 800443e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004440:	2b00      	cmp	r3, #0
 8004442:	d140      	bne.n	80044c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800444c:	e853 3f00 	ldrex	r3, [r3]
 8004450:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004454:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004458:	667b      	str	r3, [r7, #100]	; 0x64
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	461a      	mov	r2, r3
 8004460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004462:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004464:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004466:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004468:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800446a:	e841 2300 	strex	r3, r2, [r1]
 800446e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004470:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1e6      	bne.n	8004444 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	3308      	adds	r3, #8
 800447c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004480:	e853 3f00 	ldrex	r3, [r3]
 8004484:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004488:	f023 0301 	bic.w	r3, r3, #1
 800448c:	663b      	str	r3, [r7, #96]	; 0x60
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	3308      	adds	r3, #8
 8004494:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004496:	64ba      	str	r2, [r7, #72]	; 0x48
 8004498:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800449c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800449e:	e841 2300 	strex	r3, r2, [r1]
 80044a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80044a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1e5      	bne.n	8004476 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e069      	b.n	800459a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d051      	beq.n	8004578 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044e2:	d149      	bne.n	8004578 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f6:	e853 3f00 	ldrex	r3, [r3]
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004502:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	461a      	mov	r2, r3
 800450a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800450c:	637b      	str	r3, [r7, #52]	; 0x34
 800450e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004510:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004514:	e841 2300 	strex	r3, r2, [r1]
 8004518:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800451a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1e6      	bne.n	80044ee <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3308      	adds	r3, #8
 8004526:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	e853 3f00 	ldrex	r3, [r3]
 800452e:	613b      	str	r3, [r7, #16]
   return(result);
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f023 0301 	bic.w	r3, r3, #1
 8004536:	66bb      	str	r3, [r7, #104]	; 0x68
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3308      	adds	r3, #8
 800453e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004540:	623a      	str	r2, [r7, #32]
 8004542:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004544:	69f9      	ldr	r1, [r7, #28]
 8004546:	6a3a      	ldr	r2, [r7, #32]
 8004548:	e841 2300 	strex	r3, r2, [r1]
 800454c:	61bb      	str	r3, [r7, #24]
   return(result);
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1e5      	bne.n	8004520 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2220      	movs	r2, #32
 8004558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2220      	movs	r2, #32
 8004560:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2220      	movs	r2, #32
 8004568:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e010      	b.n	800459a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	69da      	ldr	r2, [r3, #28]
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	4013      	ands	r3, r2
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	429a      	cmp	r2, r3
 8004586:	bf0c      	ite	eq
 8004588:	2301      	moveq	r3, #1
 800458a:	2300      	movne	r3, #0
 800458c:	b2db      	uxtb	r3, r3
 800458e:	461a      	mov	r2, r3
 8004590:	79fb      	ldrb	r3, [r7, #7]
 8004592:	429a      	cmp	r2, r3
 8004594:	f43f af46 	beq.w	8004424 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3770      	adds	r7, #112	; 0x70
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b085      	sub	sp, #20
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d101      	bne.n	80045b8 <HAL_UARTEx_DisableFifoMode+0x16>
 80045b4:	2302      	movs	r3, #2
 80045b6:	e027      	b.n	8004608 <HAL_UARTEx_DisableFifoMode+0x66>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2224      	movs	r2, #36	; 0x24
 80045c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0201 	bic.w	r2, r2, #1
 80045de:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80045e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2220      	movs	r2, #32
 80045fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004624:	2b01      	cmp	r3, #1
 8004626:	d101      	bne.n	800462c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004628:	2302      	movs	r3, #2
 800462a:	e02d      	b.n	8004688 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2224      	movs	r2, #36	; 0x24
 8004638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0201 	bic.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f84f 	bl	800470c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2220      	movs	r2, #32
 800467a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d101      	bne.n	80046a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80046a4:	2302      	movs	r3, #2
 80046a6:	e02d      	b.n	8004704 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2224      	movs	r2, #36	; 0x24
 80046b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0201 	bic.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f811 	bl	800470c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004718:	2b00      	cmp	r3, #0
 800471a:	d108      	bne.n	800472e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800472c:	e031      	b.n	8004792 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800472e:	2308      	movs	r3, #8
 8004730:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004732:	2308      	movs	r3, #8
 8004734:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	0e5b      	lsrs	r3, r3, #25
 800473e:	b2db      	uxtb	r3, r3
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	0f5b      	lsrs	r3, r3, #29
 800474e:	b2db      	uxtb	r3, r3
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004756:	7bbb      	ldrb	r3, [r7, #14]
 8004758:	7b3a      	ldrb	r2, [r7, #12]
 800475a:	4911      	ldr	r1, [pc, #68]	; (80047a0 <UARTEx_SetNbDataToProcess+0x94>)
 800475c:	5c8a      	ldrb	r2, [r1, r2]
 800475e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004762:	7b3a      	ldrb	r2, [r7, #12]
 8004764:	490f      	ldr	r1, [pc, #60]	; (80047a4 <UARTEx_SetNbDataToProcess+0x98>)
 8004766:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004768:	fb93 f3f2 	sdiv	r3, r3, r2
 800476c:	b29a      	uxth	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004774:	7bfb      	ldrb	r3, [r7, #15]
 8004776:	7b7a      	ldrb	r2, [r7, #13]
 8004778:	4909      	ldr	r1, [pc, #36]	; (80047a0 <UARTEx_SetNbDataToProcess+0x94>)
 800477a:	5c8a      	ldrb	r2, [r1, r2]
 800477c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004780:	7b7a      	ldrb	r2, [r7, #13]
 8004782:	4908      	ldr	r1, [pc, #32]	; (80047a4 <UARTEx_SetNbDataToProcess+0x98>)
 8004784:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004786:	fb93 f3f2 	sdiv	r3, r3, r2
 800478a:	b29a      	uxth	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004792:	bf00      	nop
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	08008ddc 	.word	0x08008ddc
 80047a4:	08008de4 	.word	0x08008de4

080047a8 <arm_correlate_f32>:
 80047a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ac:	4299      	cmp	r1, r3
 80047ae:	b08d      	sub	sp, #52	; 0x34
 80047b0:	f0c0 824c 	bcc.w	8004c4c <arm_correlate_f32+0x4a4>
 80047b4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80047b6:	eba1 0c03 	sub.w	ip, r1, r3
 80047ba:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 80047be:	f04f 0e04 	mov.w	lr, #4
 80047c2:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 80047c6:	3101      	adds	r1, #1
 80047c8:	1ac9      	subs	r1, r1, r3
 80047ca:	3c01      	subs	r4, #1
 80047cc:	1e5e      	subs	r6, r3, #1
 80047ce:	9102      	str	r1, [sp, #8]
 80047d0:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 80047d4:	f000 8294 	beq.w	8004d00 <arm_correlate_f32+0x558>
 80047d8:	eddf 7a53 	vldr	s15, [pc, #332]	; 8004928 <arm_correlate_f32+0x180>
 80047dc:	f1a1 0804 	sub.w	r8, r1, #4
 80047e0:	46e1      	mov	r9, ip
 80047e2:	4605      	mov	r5, r0
 80047e4:	2401      	movs	r4, #1
 80047e6:	f014 0703 	ands.w	r7, r4, #3
 80047ea:	d01b      	beq.n	8004824 <arm_correlate_f32+0x7c>
 80047ec:	ed91 7a00 	vldr	s14, [r1]
 80047f0:	edd5 6a00 	vldr	s13, [r5]
 80047f4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80047f8:	3f01      	subs	r7, #1
 80047fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047fe:	d011      	beq.n	8004824 <arm_correlate_f32+0x7c>
 8004800:	ed91 7a01 	vldr	s14, [r1, #4]
 8004804:	edd5 6a01 	vldr	s13, [r5, #4]
 8004808:	ee27 7a26 	vmul.f32	s14, s14, s13
 800480c:	2f01      	cmp	r7, #1
 800480e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004812:	d007      	beq.n	8004824 <arm_correlate_f32+0x7c>
 8004814:	ed95 7a02 	vldr	s14, [r5, #8]
 8004818:	edd1 6a02 	vldr	s13, [r1, #8]
 800481c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004820:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004824:	1c67      	adds	r7, r4, #1
 8004826:	42bb      	cmp	r3, r7
 8004828:	edc9 7a00 	vstr	s15, [r9]
 800482c:	4641      	mov	r1, r8
 800482e:	44f1      	add	r9, lr
 8004830:	d03a      	beq.n	80048a8 <arm_correlate_f32+0x100>
 8004832:	ea5f 0a97 	movs.w	sl, r7, lsr #2
 8004836:	f000 8267 	beq.w	8004d08 <arm_correlate_f32+0x560>
 800483a:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 800483e:	f100 0110 	add.w	r1, r0, #16
 8004842:	eddf 7a39 	vldr	s15, [pc, #228]	; 8004928 <arm_correlate_f32+0x180>
 8004846:	eb01 050a 	add.w	r5, r1, sl
 800484a:	f108 0410 	add.w	r4, r8, #16
 800484e:	ed11 7a04 	vldr	s14, [r1, #-16]
 8004852:	ed54 3a04 	vldr	s7, [r4, #-16]
 8004856:	ed11 6a03 	vldr	s12, [r1, #-12]
 800485a:	ed14 4a03 	vldr	s8, [r4, #-12]
 800485e:	ed51 6a02 	vldr	s13, [r1, #-8]
 8004862:	ed54 4a02 	vldr	s9, [r4, #-8]
 8004866:	ed51 5a01 	vldr	s11, [r1, #-4]
 800486a:	ed14 5a01 	vldr	s10, [r4, #-4]
 800486e:	ee27 7a23 	vmul.f32	s14, s14, s7
 8004872:	ee26 6a04 	vmul.f32	s12, s12, s8
 8004876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800487a:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800487e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8004882:	ee65 6a85 	vmul.f32	s13, s11, s10
 8004886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800488a:	3110      	adds	r1, #16
 800488c:	428d      	cmp	r5, r1
 800488e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004892:	f104 0410 	add.w	r4, r4, #16
 8004896:	d1da      	bne.n	800484e <arm_correlate_f32+0xa6>
 8004898:	eb00 050a 	add.w	r5, r0, sl
 800489c:	eb08 010a 	add.w	r1, r8, sl
 80048a0:	f1a8 0804 	sub.w	r8, r8, #4
 80048a4:	463c      	mov	r4, r7
 80048a6:	e79e      	b.n	80047e6 <arm_correlate_f32+0x3e>
 80048a8:	2b03      	cmp	r3, #3
 80048aa:	fb0e cc04 	mla	ip, lr, r4, ip
 80048ae:	f240 81dd 	bls.w	8004c6c <arm_correlate_f32+0x4c4>
 80048b2:	9b02      	ldr	r3, [sp, #8]
 80048b4:	0899      	lsrs	r1, r3, #2
 80048b6:	9103      	str	r1, [sp, #12]
 80048b8:	f000 8220 	beq.w	8004cfc <arm_correlate_f32+0x554>
 80048bc:	08bb      	lsrs	r3, r7, #2
 80048be:	f007 0403 	and.w	r4, r7, #3
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	f103 0b0c 	add.w	fp, r3, #12
 80048ca:	18d5      	adds	r5, r2, r3
 80048cc:	1e63      	subs	r3, r4, #1
 80048ce:	0109      	lsls	r1, r1, #4
 80048d0:	9306      	str	r3, [sp, #24]
 80048d2:	f100 080c 	add.w	r8, r0, #12
 80048d6:	9401      	str	r4, [sp, #4]
 80048d8:	9104      	str	r1, [sp, #16]
 80048da:	ea4f 048e 	mov.w	r4, lr, lsl #2
 80048de:	4441      	add	r1, r8
 80048e0:	f102 0310 	add.w	r3, r2, #16
 80048e4:	e9cd 6009 	strd	r6, r0, [sp, #36]	; 0x24
 80048e8:	9e06      	ldr	r6, [sp, #24]
 80048ea:	9405      	str	r4, [sp, #20]
 80048ec:	e9cd 7c07 	strd	r7, ip, [sp, #28]
 80048f0:	eb0c 0a4e 	add.w	sl, ip, lr, lsl #1
 80048f4:	46e1      	mov	r9, ip
 80048f6:	4483      	add	fp, r0
 80048f8:	460f      	mov	r7, r1
 80048fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80048fc:	469c      	mov	ip, r3
 80048fe:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8004928 <arm_correlate_f32+0x180>
 8004902:	ed58 1a03 	vldr	s3, [r8, #-12]
 8004906:	ed18 2a02 	vldr	s4, [r8, #-8]
 800490a:	ed58 2a01 	vldr	s5, [r8, #-4]
 800490e:	ed98 0a00 	vldr	s0, [r8]
 8004912:	9900      	ldr	r1, [sp, #0]
 8004914:	eef0 5a46 	vmov.f32	s11, s12
 8004918:	eeb0 5a46 	vmov.f32	s10, s12
 800491c:	eef0 4a46 	vmov.f32	s9, s12
 8004920:	4663      	mov	r3, ip
 8004922:	4642      	mov	r2, r8
 8004924:	e005      	b.n	8004932 <arm_correlate_f32+0x18a>
 8004926:	bf00      	nop
 8004928:	00000000 	.word	0x00000000
 800492c:	ed90 0a04 	vldr	s0, [r0, #16]
 8004930:	3210      	adds	r2, #16
 8004932:	ed53 6a04 	vldr	s13, [r3, #-16]
 8004936:	ed13 7a03 	vldr	s14, [r3, #-12]
 800493a:	ed53 7a02 	vldr	s15, [r3, #-8]
 800493e:	ed13 1a01 	vldr	s2, [r3, #-4]
 8004942:	ee62 3a26 	vmul.f32	s7, s4, s13
 8004946:	ee22 4aa6 	vmul.f32	s8, s5, s13
 800494a:	ee61 0aa6 	vmul.f32	s1, s3, s13
 800494e:	edd2 1a01 	vldr	s3, [r2, #4]
 8004952:	ee66 6a80 	vmul.f32	s13, s13, s0
 8004956:	ee22 3a07 	vmul.f32	s6, s4, s14
 800495a:	ee33 5a85 	vadd.f32	s10, s7, s10
 800495e:	ee74 5a25 	vadd.f32	s11, s8, s11
 8004962:	ee62 3a87 	vmul.f32	s7, s5, s14
 8004966:	ee20 4a07 	vmul.f32	s8, s0, s14
 800496a:	ee70 4aa4 	vadd.f32	s9, s1, s9
 800496e:	ee36 6a86 	vadd.f32	s12, s13, s12
 8004972:	ed92 2a02 	vldr	s4, [r2, #8]
 8004976:	ee27 7a21 	vmul.f32	s14, s14, s3
 800497a:	ee73 3a85 	vadd.f32	s7, s7, s10
 800497e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004982:	ee20 5a27 	vmul.f32	s10, s0, s15
 8004986:	ee33 3a24 	vadd.f32	s6, s6, s9
 800498a:	ee34 4a25 	vadd.f32	s8, s8, s11
 800498e:	ee62 4aa7 	vmul.f32	s9, s5, s15
 8004992:	ee61 5aa7 	vmul.f32	s11, s3, s15
 8004996:	edd2 2a03 	vldr	s5, [r2, #12]
 800499a:	ee67 7a82 	vmul.f32	s15, s15, s4
 800499e:	ee35 5a23 	vadd.f32	s10, s10, s7
 80049a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049a6:	ee74 4a83 	vadd.f32	s9, s9, s6
 80049aa:	ee20 0a01 	vmul.f32	s0, s0, s2
 80049ae:	ee61 3a81 	vmul.f32	s7, s3, s2
 80049b2:	ee75 5a84 	vadd.f32	s11, s11, s8
 80049b6:	ee22 7a01 	vmul.f32	s14, s4, s2
 80049ba:	ee21 6a22 	vmul.f32	s12, s2, s5
 80049be:	3901      	subs	r1, #1
 80049c0:	f103 0310 	add.w	r3, r3, #16
 80049c4:	ee70 4a24 	vadd.f32	s9, s0, s9
 80049c8:	ee33 5a85 	vadd.f32	s10, s7, s10
 80049cc:	ee77 5a25 	vadd.f32	s11, s14, s11
 80049d0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80049d4:	4610      	mov	r0, r2
 80049d6:	d1a9      	bne.n	800492c <arm_correlate_f32+0x184>
 80049d8:	9b01      	ldr	r3, [sp, #4]
 80049da:	b3f3      	cbz	r3, 8004a5a <arm_correlate_f32+0x2b2>
 80049dc:	edd5 7a00 	vldr	s15, [r5]
 80049e0:	ed9b 4a00 	vldr	s8, [fp]
 80049e4:	ee61 6aa7 	vmul.f32	s13, s3, s15
 80049e8:	ee62 3a27 	vmul.f32	s7, s4, s15
 80049ec:	ee22 7aa7 	vmul.f32	s14, s5, s15
 80049f0:	ee64 7a27 	vmul.f32	s15, s8, s15
 80049f4:	ee74 4aa6 	vadd.f32	s9, s9, s13
 80049f8:	ee35 5a23 	vadd.f32	s10, s10, s7
 80049fc:	ee75 5a87 	vadd.f32	s11, s11, s14
 8004a00:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004a04:	b34e      	cbz	r6, 8004a5a <arm_correlate_f32+0x2b2>
 8004a06:	edd5 7a01 	vldr	s15, [r5, #4]
 8004a0a:	eddb 6a01 	vldr	s13, [fp, #4]
 8004a0e:	ee22 7a27 	vmul.f32	s14, s4, s15
 8004a12:	ee22 3aa7 	vmul.f32	s6, s5, s15
 8004a16:	ee67 3a84 	vmul.f32	s7, s15, s8
 8004a1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a1e:	2e01      	cmp	r6, #1
 8004a20:	ee74 4a87 	vadd.f32	s9, s9, s14
 8004a24:	ee35 5a03 	vadd.f32	s10, s10, s6
 8004a28:	ee75 5aa3 	vadd.f32	s11, s11, s7
 8004a2c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004a30:	d013      	beq.n	8004a5a <arm_correlate_f32+0x2b2>
 8004a32:	ed95 7a02 	vldr	s14, [r5, #8]
 8004a36:	eddb 3a02 	vldr	s7, [fp, #8]
 8004a3a:	ee62 7a87 	vmul.f32	s15, s5, s14
 8004a3e:	ee27 4a04 	vmul.f32	s8, s14, s8
 8004a42:	ee67 6a26 	vmul.f32	s13, s14, s13
 8004a46:	ee27 7a23 	vmul.f32	s14, s14, s7
 8004a4a:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8004a4e:	ee35 5a04 	vadd.f32	s10, s10, s8
 8004a52:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8004a56:	ee36 6a07 	vadd.f32	s12, s12, s14
 8004a5a:	f108 0810 	add.w	r8, r8, #16
 8004a5e:	eb09 020e 	add.w	r2, r9, lr
 8004a62:	eb0a 030e 	add.w	r3, sl, lr
 8004a66:	4547      	cmp	r7, r8
 8004a68:	edc9 4a00 	vstr	s9, [r9]
 8004a6c:	f10b 0b10 	add.w	fp, fp, #16
 8004a70:	ed82 5a00 	vstr	s10, [r2]
 8004a74:	44a1      	add	r9, r4
 8004a76:	edca 5a00 	vstr	s11, [sl]
 8004a7a:	ed83 6a00 	vstr	s12, [r3]
 8004a7e:	44a2      	add	sl, r4
 8004a80:	f47f af3d 	bne.w	80048fe <arm_correlate_f32+0x156>
 8004a84:	e9dd 7c07 	ldrd	r7, ip, [sp, #28]
 8004a88:	e9dd 6009 	ldrd	r6, r0, [sp, #36]	; 0x24
 8004a8c:	9b03      	ldr	r3, [sp, #12]
 8004a8e:	9c05      	ldr	r4, [sp, #20]
 8004a90:	9904      	ldr	r1, [sp, #16]
 8004a92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a94:	fb04 cc03 	mla	ip, r4, r3, ip
 8004a98:	4401      	add	r1, r0
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	460d      	mov	r5, r1
 8004a9e:	9303      	str	r3, [sp, #12]
 8004aa0:	9b02      	ldr	r3, [sp, #8]
 8004aa2:	f013 0303 	ands.w	r3, r3, #3
 8004aa6:	9301      	str	r3, [sp, #4]
 8004aa8:	d071      	beq.n	8004b8e <arm_correlate_f32+0x3e6>
 8004aaa:	9903      	ldr	r1, [sp, #12]
 8004aac:	9205      	str	r2, [sp, #20]
 8004aae:	f007 0403 	and.w	r4, r7, #3
 8004ab2:	ea4f 0b97 	mov.w	fp, r7, lsr #2
 8004ab6:	1c4f      	adds	r7, r1, #1
 8004ab8:	1859      	adds	r1, r3, r1
 8004aba:	1d03      	adds	r3, r0, #4
 8004abc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004ac0:	9400      	str	r4, [sp, #0]
 8004ac2:	f102 0110 	add.w	r1, r2, #16
 8004ac6:	ea4f 1a0b 	mov.w	sl, fp, lsl #4
 8004aca:	3c01      	subs	r4, #1
 8004acc:	e9cd 6003 	strd	r6, r0, [sp, #12]
 8004ad0:	eb02 090a 	add.w	r9, r2, sl
 8004ad4:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8004ad8:	46e0      	mov	r8, ip
 8004ada:	4618      	mov	r0, r3
 8004adc:	460e      	mov	r6, r1
 8004ade:	4622      	mov	r2, r4
 8004ae0:	ed5f 7a6f 	vldr	s15, [pc, #-444]	; 8004928 <arm_correlate_f32+0x180>
 8004ae4:	f105 0110 	add.w	r1, r5, #16
 8004ae8:	4633      	mov	r3, r6
 8004aea:	465c      	mov	r4, fp
 8004aec:	ed11 7a04 	vldr	s14, [r1, #-16]
 8004af0:	ed53 3a04 	vldr	s7, [r3, #-16]
 8004af4:	ed11 6a03 	vldr	s12, [r1, #-12]
 8004af8:	ed13 4a03 	vldr	s8, [r3, #-12]
 8004afc:	ed51 6a02 	vldr	s13, [r1, #-8]
 8004b00:	ed53 4a02 	vldr	s9, [r3, #-8]
 8004b04:	ed51 5a01 	vldr	s11, [r1, #-4]
 8004b08:	ed13 5a01 	vldr	s10, [r3, #-4]
 8004b0c:	ee27 7a23 	vmul.f32	s14, s14, s7
 8004b10:	ee26 6a04 	vmul.f32	s12, s12, s8
 8004b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b18:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8004b1c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8004b20:	ee65 6a85 	vmul.f32	s13, s11, s10
 8004b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b28:	3c01      	subs	r4, #1
 8004b2a:	f101 0110 	add.w	r1, r1, #16
 8004b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b32:	f103 0310 	add.w	r3, r3, #16
 8004b36:	d1d9      	bne.n	8004aec <arm_correlate_f32+0x344>
 8004b38:	9b00      	ldr	r3, [sp, #0]
 8004b3a:	4455      	add	r5, sl
 8004b3c:	b1d3      	cbz	r3, 8004b74 <arm_correlate_f32+0x3cc>
 8004b3e:	ed99 7a00 	vldr	s14, [r9]
 8004b42:	edd5 6a00 	vldr	s13, [r5]
 8004b46:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004b4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b4e:	b18a      	cbz	r2, 8004b74 <arm_correlate_f32+0x3cc>
 8004b50:	ed99 7a01 	vldr	s14, [r9, #4]
 8004b54:	edd5 6a01 	vldr	s13, [r5, #4]
 8004b58:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004b5c:	2a01      	cmp	r2, #1
 8004b5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b62:	d007      	beq.n	8004b74 <arm_correlate_f32+0x3cc>
 8004b64:	ed95 7a02 	vldr	s14, [r5, #8]
 8004b68:	edd9 6a02 	vldr	s13, [r9, #8]
 8004b6c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004b70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b74:	463d      	mov	r5, r7
 8004b76:	3704      	adds	r7, #4
 8004b78:	42b8      	cmp	r0, r7
 8004b7a:	edc8 7a00 	vstr	s15, [r8]
 8004b7e:	44f0      	add	r8, lr
 8004b80:	d1ae      	bne.n	8004ae0 <arm_correlate_f32+0x338>
 8004b82:	9b01      	ldr	r3, [sp, #4]
 8004b84:	9a05      	ldr	r2, [sp, #20]
 8004b86:	e9dd 6003 	ldrd	r6, r0, [sp, #12]
 8004b8a:	fb0e cc03 	mla	ip, lr, r3, ip
 8004b8e:	9b02      	ldr	r3, [sp, #8]
 8004b90:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8004b94:	08b5      	lsrs	r5, r6, #2
 8004b96:	ed5f 5a9c 	vldr	s11, [pc, #-624]	; 8004928 <arm_correlate_f32+0x180>
 8004b9a:	f000 80ac 	beq.w	8004cf6 <arm_correlate_f32+0x54e>
 8004b9e:	f100 0110 	add.w	r1, r0, #16
 8004ba2:	f102 0310 	add.w	r3, r2, #16
 8004ba6:	462c      	mov	r4, r5
 8004ba8:	ed51 6a04 	vldr	s13, [r1, #-16]
 8004bac:	ed53 3a04 	vldr	s7, [r3, #-16]
 8004bb0:	ed11 7a03 	vldr	s14, [r1, #-12]
 8004bb4:	ed13 4a03 	vldr	s8, [r3, #-12]
 8004bb8:	ed51 7a02 	vldr	s15, [r1, #-8]
 8004bbc:	ed53 4a02 	vldr	s9, [r3, #-8]
 8004bc0:	ed11 6a01 	vldr	s12, [r1, #-4]
 8004bc4:	ed13 5a01 	vldr	s10, [r3, #-4]
 8004bc8:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8004bcc:	ee27 7a04 	vmul.f32	s14, s14, s8
 8004bd0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8004bd4:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8004bd8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004bdc:	ee66 6a05 	vmul.f32	s13, s12, s10
 8004be0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004be4:	3c01      	subs	r4, #1
 8004be6:	f101 0110 	add.w	r1, r1, #16
 8004bea:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8004bee:	f103 0310 	add.w	r3, r3, #16
 8004bf2:	d1d9      	bne.n	8004ba8 <arm_correlate_f32+0x400>
 8004bf4:	012d      	lsls	r5, r5, #4
 8004bf6:	1941      	adds	r1, r0, r5
 8004bf8:	4415      	add	r5, r2
 8004bfa:	f016 0303 	ands.w	r3, r6, #3
 8004bfe:	d01b      	beq.n	8004c38 <arm_correlate_f32+0x490>
 8004c00:	edd5 7a00 	vldr	s15, [r5]
 8004c04:	ed91 7a00 	vldr	s14, [r1]
 8004c08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8004c12:	d011      	beq.n	8004c38 <arm_correlate_f32+0x490>
 8004c14:	edd5 7a01 	vldr	s15, [r5, #4]
 8004c18:	ed91 7a01 	vldr	s14, [r1, #4]
 8004c1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8004c26:	d007      	beq.n	8004c38 <arm_correlate_f32+0x490>
 8004c28:	edd1 7a02 	vldr	s15, [r1, #8]
 8004c2c:	ed95 7a02 	vldr	s14, [r5, #8]
 8004c30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c34:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8004c38:	3e01      	subs	r6, #1
 8004c3a:	edcc 5a00 	vstr	s11, [ip]
 8004c3e:	f100 0004 	add.w	r0, r0, #4
 8004c42:	44f4      	add	ip, lr
 8004c44:	d1a6      	bne.n	8004b94 <arm_correlate_f32+0x3ec>
 8004c46:	b00d      	add	sp, #52	; 0x34
 8004c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c4c:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 8004c50:	4606      	mov	r6, r0
 8004c52:	3c02      	subs	r4, #2
 8004c54:	4610      	mov	r0, r2
 8004c56:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004c58:	440c      	add	r4, r1
 8004c5a:	460d      	mov	r5, r1
 8004c5c:	eb02 0c84 	add.w	ip, r2, r4, lsl #2
 8004c60:	4619      	mov	r1, r3
 8004c62:	4632      	mov	r2, r6
 8004c64:	f06f 0e03 	mvn.w	lr, #3
 8004c68:	462b      	mov	r3, r5
 8004c6a:	e5aa      	b.n	80047c2 <arm_correlate_f32+0x1a>
 8004c6c:	9902      	ldr	r1, [sp, #8]
 8004c6e:	2900      	cmp	r1, #0
 8004c70:	d090      	beq.n	8004b94 <arm_correlate_f32+0x3ec>
 8004c72:	9902      	ldr	r1, [sp, #8]
 8004c74:	ed1f 6ad4 	vldr	s12, [pc, #-848]	; 8004928 <arm_correlate_f32+0x180>
 8004c78:	ea4f 0881 	mov.w	r8, r1, lsl #2
 8004c7c:	eb00 0708 	add.w	r7, r0, r8
 8004c80:	4601      	mov	r1, r0
 8004c82:	4665      	mov	r5, ip
 8004c84:	e020      	b.n	8004cc8 <arm_correlate_f32+0x520>
 8004c86:	edd2 7a00 	vldr	s15, [r2]
 8004c8a:	ecb4 7a01 	vldmia	r4!, {s14}
 8004c8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c92:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004c96:	b18e      	cbz	r6, 8004cbc <arm_correlate_f32+0x514>
 8004c98:	ed92 7a01 	vldr	s14, [r2, #4]
 8004c9c:	edd1 6a01 	vldr	s13, [r1, #4]
 8004ca0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004caa:	d007      	beq.n	8004cbc <arm_correlate_f32+0x514>
 8004cac:	ed91 7a02 	vldr	s14, [r1, #8]
 8004cb0:	edd2 6a02 	vldr	s13, [r2, #8]
 8004cb4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004cb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004cbc:	42bc      	cmp	r4, r7
 8004cbe:	edc5 7a00 	vstr	s15, [r5]
 8004cc2:	4621      	mov	r1, r4
 8004cc4:	4475      	add	r5, lr
 8004cc6:	d00b      	beq.n	8004ce0 <arm_correlate_f32+0x538>
 8004cc8:	460c      	mov	r4, r1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1db      	bne.n	8004c86 <arm_correlate_f32+0x4de>
 8004cce:	1d0c      	adds	r4, r1, #4
 8004cd0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8004d10 <arm_correlate_f32+0x568>
 8004cd4:	42bc      	cmp	r4, r7
 8004cd6:	edc5 7a00 	vstr	s15, [r5]
 8004cda:	4621      	mov	r1, r4
 8004cdc:	4475      	add	r5, lr
 8004cde:	d1f3      	bne.n	8004cc8 <arm_correlate_f32+0x520>
 8004ce0:	9b02      	ldr	r3, [sp, #8]
 8004ce2:	4440      	add	r0, r8
 8004ce4:	fb0e cc03 	mla	ip, lr, r3, ip
 8004ce8:	2e00      	cmp	r6, #0
 8004cea:	d0ac      	beq.n	8004c46 <arm_correlate_f32+0x49e>
 8004cec:	08b5      	lsrs	r5, r6, #2
 8004cee:	eddf 5a08 	vldr	s11, [pc, #32]	; 8004d10 <arm_correlate_f32+0x568>
 8004cf2:	f47f af54 	bne.w	8004b9e <arm_correlate_f32+0x3f6>
 8004cf6:	4615      	mov	r5, r2
 8004cf8:	4601      	mov	r1, r0
 8004cfa:	e77e      	b.n	8004bfa <arm_correlate_f32+0x452>
 8004cfc:	4605      	mov	r5, r0
 8004cfe:	e6cf      	b.n	8004aa0 <arm_correlate_f32+0x2f8>
 8004d00:	9902      	ldr	r1, [sp, #8]
 8004d02:	2900      	cmp	r1, #0
 8004d04:	d1b5      	bne.n	8004c72 <arm_correlate_f32+0x4ca>
 8004d06:	e79e      	b.n	8004c46 <arm_correlate_f32+0x49e>
 8004d08:	eddf 7a01 	vldr	s15, [pc, #4]	; 8004d10 <arm_correlate_f32+0x568>
 8004d0c:	4605      	mov	r5, r0
 8004d0e:	e5c7      	b.n	80048a0 <arm_correlate_f32+0xf8>
 8004d10:	00000000 	.word	0x00000000

08004d14 <arm_conv_f32>:
 8004d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d18:	b08b      	sub	sp, #44	; 0x2c
 8004d1a:	4299      	cmp	r1, r3
 8004d1c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8004d1e:	d205      	bcs.n	8004d2c <arm_conv_f32+0x18>
 8004d20:	4606      	mov	r6, r0
 8004d22:	460c      	mov	r4, r1
 8004d24:	4610      	mov	r0, r2
 8004d26:	4619      	mov	r1, r3
 8004d28:	4632      	mov	r2, r6
 8004d2a:	4623      	mov	r3, r4
 8004d2c:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
 8004d30:	3101      	adds	r1, #1
 8004d32:	1ac9      	subs	r1, r1, r3
 8004d34:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004d38:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8004d3c:	9101      	str	r1, [sp, #4]
 8004d3e:	1e59      	subs	r1, r3, #1
 8004d40:	eb02 070b 	add.w	r7, r2, fp
 8004d44:	f000 8277 	beq.w	8005236 <arm_conv_f32+0x522>
 8004d48:	eddf 7aaf 	vldr	s15, [pc, #700]	; 8005008 <arm_conv_f32+0x2f4>
 8004d4c:	f102 0904 	add.w	r9, r2, #4
 8004d50:	46aa      	mov	sl, r5
 8004d52:	4680      	mov	r8, r0
 8004d54:	2401      	movs	r4, #1
 8004d56:	f014 0603 	ands.w	r6, r4, #3
 8004d5a:	d01b      	beq.n	8004d94 <arm_conv_f32+0x80>
 8004d5c:	ed92 7a00 	vldr	s14, [r2]
 8004d60:	edd8 6a00 	vldr	s13, [r8]
 8004d64:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004d68:	3e01      	subs	r6, #1
 8004d6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d6e:	d011      	beq.n	8004d94 <arm_conv_f32+0x80>
 8004d70:	ed12 7a01 	vldr	s14, [r2, #-4]
 8004d74:	edd8 6a01 	vldr	s13, [r8, #4]
 8004d78:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004d7c:	2e01      	cmp	r6, #1
 8004d7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d82:	d007      	beq.n	8004d94 <arm_conv_f32+0x80>
 8004d84:	ed98 7a02 	vldr	s14, [r8, #8]
 8004d88:	ed52 6a02 	vldr	s13, [r2, #-8]
 8004d8c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004d90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d94:	3401      	adds	r4, #1
 8004d96:	42a3      	cmp	r3, r4
 8004d98:	ecea 7a01 	vstmia	sl!, {s15}
 8004d9c:	464a      	mov	r2, r9
 8004d9e:	d03a      	beq.n	8004e16 <arm_conv_f32+0x102>
 8004da0:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 8004da4:	f000 824c 	beq.w	8005240 <arm_conv_f32+0x52c>
 8004da8:	f100 0210 	add.w	r2, r0, #16
 8004dac:	ea4f 180e 	mov.w	r8, lr, lsl #4
 8004db0:	eddf 7a95 	vldr	s15, [pc, #596]	; 8005008 <arm_conv_f32+0x2f4>
 8004db4:	eb02 0c08 	add.w	ip, r2, r8
 8004db8:	f1a9 0610 	sub.w	r6, r9, #16
 8004dbc:	ed12 7a04 	vldr	s14, [r2, #-16]
 8004dc0:	edd6 3a04 	vldr	s7, [r6, #16]
 8004dc4:	ed12 6a03 	vldr	s12, [r2, #-12]
 8004dc8:	ed96 4a03 	vldr	s8, [r6, #12]
 8004dcc:	ed52 6a02 	vldr	s13, [r2, #-8]
 8004dd0:	edd6 4a02 	vldr	s9, [r6, #8]
 8004dd4:	ed52 5a01 	vldr	s11, [r2, #-4]
 8004dd8:	ed96 5a01 	vldr	s10, [r6, #4]
 8004ddc:	ee27 7a23 	vmul.f32	s14, s14, s7
 8004de0:	ee26 6a04 	vmul.f32	s12, s12, s8
 8004de4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004de8:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8004dec:	ee76 7a27 	vadd.f32	s15, s12, s15
 8004df0:	ee65 6a85 	vmul.f32	s13, s11, s10
 8004df4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004df8:	3210      	adds	r2, #16
 8004dfa:	4594      	cmp	ip, r2
 8004dfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e00:	f1a6 0610 	sub.w	r6, r6, #16
 8004e04:	d1da      	bne.n	8004dbc <arm_conv_f32+0xa8>
 8004e06:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 8004e0a:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 8004e0e:	4480      	add	r8, r0
 8004e10:	f109 0904 	add.w	r9, r9, #4
 8004e14:	e79f      	b.n	8004d56 <arm_conv_f32+0x42>
 8004e16:	2b03      	cmp	r3, #3
 8004e18:	445d      	add	r5, fp
 8004e1a:	f240 80e9 	bls.w	8004ff0 <arm_conv_f32+0x2dc>
 8004e1e:	9b01      	ldr	r3, [sp, #4]
 8004e20:	089a      	lsrs	r2, r3, #2
 8004e22:	9202      	str	r2, [sp, #8]
 8004e24:	f000 8203 	beq.w	800522e <arm_conv_f32+0x51a>
 8004e28:	ea4f 0894 	mov.w	r8, r4, lsr #2
 8004e2c:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8004e30:	0112      	lsls	r2, r2, #4
 8004e32:	f004 0603 	and.w	r6, r4, #3
 8004e36:	9203      	str	r2, [sp, #12]
 8004e38:	f1a3 0a10 	sub.w	sl, r3, #16
 8004e3c:	f1a3 020c 	sub.w	r2, r3, #12
 8004e40:	3b08      	subs	r3, #8
 8004e42:	9204      	str	r2, [sp, #16]
 8004e44:	9305      	str	r3, [sp, #20]
 8004e46:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
 8004e4a:	e9cd 7008 	strd	r7, r0, [sp, #32]
 8004e4e:	9a03      	ldr	r2, [sp, #12]
 8004e50:	f100 0c1c 	add.w	ip, r0, #28
 8004e54:	e9cd 4106 	strd	r4, r1, [sp, #24]
 8004e58:	464c      	mov	r4, r9
 8004e5a:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 8004e5e:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 8004e62:	f1a7 0310 	sub.w	r3, r7, #16
 8004e66:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 8004e6a:	eb05 0b02 	add.w	fp, r5, r2
 8004e6e:	461f      	mov	r7, r3
 8004e70:	3510      	adds	r5, #16
 8004e72:	ed9f 6a65 	vldr	s12, [pc, #404]	; 8005008 <arm_conv_f32+0x2f4>
 8004e76:	ed1c 1a07 	vldr	s2, [ip, #-28]	; 0xffffffe4
 8004e7a:	ed5c 1a06 	vldr	s3, [ip, #-24]	; 0xffffffe8
 8004e7e:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8004e82:	eeb0 5a46 	vmov.f32	s10, s12
 8004e86:	eef0 4a46 	vmov.f32	s9, s12
 8004e8a:	eef0 5a46 	vmov.f32	s11, s12
 8004e8e:	463a      	mov	r2, r7
 8004e90:	4663      	mov	r3, ip
 8004e92:	4641      	mov	r1, r8
 8004e94:	edd2 6a04 	vldr	s13, [r2, #16]
 8004e98:	ed13 0a04 	vldr	s0, [r3, #-16]
 8004e9c:	ed92 7a03 	vldr	s14, [r2, #12]
 8004ea0:	edd2 7a02 	vldr	s15, [r2, #8]
 8004ea4:	edd2 0a01 	vldr	s1, [r2, #4]
 8004ea8:	ee21 3aa6 	vmul.f32	s6, s3, s13
 8004eac:	ee62 3a26 	vmul.f32	s7, s4, s13
 8004eb0:	ee61 2a26 	vmul.f32	s5, s2, s13
 8004eb4:	ed13 1a03 	vldr	s2, [r3, #-12]
 8004eb8:	ee66 6a80 	vmul.f32	s13, s13, s0
 8004ebc:	ee21 4a87 	vmul.f32	s8, s3, s14
 8004ec0:	ee73 4a24 	vadd.f32	s9, s6, s9
 8004ec4:	ee33 5a85 	vadd.f32	s10, s7, s10
 8004ec8:	ee22 3a07 	vmul.f32	s6, s4, s14
 8004ecc:	ed53 1a02 	vldr	s3, [r3, #-8]
 8004ed0:	ee72 2aa5 	vadd.f32	s5, s5, s11
 8004ed4:	ee36 6a86 	vadd.f32	s12, s13, s12
 8004ed8:	ee60 3a07 	vmul.f32	s7, s0, s14
 8004edc:	ee27 7a01 	vmul.f32	s14, s14, s2
 8004ee0:	ee33 3a24 	vadd.f32	s6, s6, s9
 8004ee4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004ee8:	ee74 2a22 	vadd.f32	s5, s8, s5
 8004eec:	ee60 4a27 	vmul.f32	s9, s0, s15
 8004ef0:	ee22 4a27 	vmul.f32	s8, s4, s15
 8004ef4:	ee73 3a85 	vadd.f32	s7, s7, s10
 8004ef8:	ed13 2a01 	vldr	s4, [r3, #-4]
 8004efc:	ee21 5a27 	vmul.f32	s10, s2, s15
 8004f00:	ee67 7aa1 	vmul.f32	s15, s15, s3
 8004f04:	ee74 4a83 	vadd.f32	s9, s9, s6
 8004f08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f0c:	ee34 4a22 	vadd.f32	s8, s8, s5
 8004f10:	ee60 5a20 	vmul.f32	s11, s0, s1
 8004f14:	ee21 3a20 	vmul.f32	s6, s2, s1
 8004f18:	ee35 5a23 	vadd.f32	s10, s10, s7
 8004f1c:	ee21 7aa0 	vmul.f32	s14, s3, s1
 8004f20:	ee20 6a82 	vmul.f32	s12, s1, s4
 8004f24:	3901      	subs	r1, #1
 8004f26:	f1a2 0210 	sub.w	r2, r2, #16
 8004f2a:	ee75 5a84 	vadd.f32	s11, s11, s8
 8004f2e:	ee73 4a24 	vadd.f32	s9, s6, s9
 8004f32:	ee37 5a05 	vadd.f32	s10, s14, s10
 8004f36:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004f3a:	f103 0310 	add.w	r3, r3, #16
 8004f3e:	d1a9      	bne.n	8004e94 <arm_conv_f32+0x180>
 8004f40:	eb0a 030c 	add.w	r3, sl, ip
 8004f44:	2e00      	cmp	r6, #0
 8004f46:	d042      	beq.n	8004fce <arm_conv_f32+0x2ba>
 8004f48:	edde 7a00 	vldr	s15, [lr]
 8004f4c:	ed93 4a00 	vldr	s8, [r3]
 8004f50:	ee61 6a27 	vmul.f32	s13, s2, s15
 8004f54:	ee61 3aa7 	vmul.f32	s7, s3, s15
 8004f58:	ee22 7a27 	vmul.f32	s14, s4, s15
 8004f5c:	ee64 7a27 	vmul.f32	s15, s8, s15
 8004f60:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8004f64:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8004f68:	ee35 5a07 	vadd.f32	s10, s10, s14
 8004f6c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004f70:	eb09 030c 	add.w	r3, r9, ip
 8004f74:	b35c      	cbz	r4, 8004fce <arm_conv_f32+0x2ba>
 8004f76:	ed5e 7a01 	vldr	s15, [lr, #-4]
 8004f7a:	edd3 6a00 	vldr	s13, [r3]
 8004f7e:	ee21 7aa7 	vmul.f32	s14, s3, s15
 8004f82:	ee22 3a27 	vmul.f32	s6, s4, s15
 8004f86:	ee67 3a84 	vmul.f32	s7, s15, s8
 8004f8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f8e:	2c01      	cmp	r4, #1
 8004f90:	ee75 5a87 	vadd.f32	s11, s11, s14
 8004f94:	ee74 4a83 	vadd.f32	s9, s9, s6
 8004f98:	ee35 5a23 	vadd.f32	s10, s10, s7
 8004f9c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004fa0:	eb00 030c 	add.w	r3, r0, ip
 8004fa4:	d013      	beq.n	8004fce <arm_conv_f32+0x2ba>
 8004fa6:	ed1e 7a02 	vldr	s14, [lr, #-8]
 8004faa:	edd3 3a00 	vldr	s7, [r3]
 8004fae:	ee62 7a07 	vmul.f32	s15, s4, s14
 8004fb2:	ee27 4a04 	vmul.f32	s8, s14, s8
 8004fb6:	ee67 6a26 	vmul.f32	s13, s14, s13
 8004fba:	ee27 7a23 	vmul.f32	s14, s14, s7
 8004fbe:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8004fc2:	ee74 4a84 	vadd.f32	s9, s9, s8
 8004fc6:	ee35 5a26 	vadd.f32	s10, s10, s13
 8004fca:	ee36 6a07 	vadd.f32	s12, s12, s14
 8004fce:	45ab      	cmp	fp, r5
 8004fd0:	ed45 5a04 	vstr	s11, [r5, #-16]
 8004fd4:	ed45 4a03 	vstr	s9, [r5, #-12]
 8004fd8:	ed05 5a02 	vstr	s10, [r5, #-8]
 8004fdc:	ed05 6a01 	vstr	s12, [r5, #-4]
 8004fe0:	f10c 0c10 	add.w	ip, ip, #16
 8004fe4:	f105 0310 	add.w	r3, r5, #16
 8004fe8:	f000 809e 	beq.w	8005128 <arm_conv_f32+0x414>
 8004fec:	461d      	mov	r5, r3
 8004fee:	e740      	b.n	8004e72 <arm_conv_f32+0x15e>
 8004ff0:	9a01      	ldr	r2, [sp, #4]
 8004ff2:	46ac      	mov	ip, r5
 8004ff4:	2a00      	cmp	r2, #0
 8004ff6:	d037      	beq.n	8005068 <arm_conv_f32+0x354>
 8004ff8:	9a01      	ldr	r2, [sp, #4]
 8004ffa:	ed9f 6a03 	vldr	s12, [pc, #12]	; 8005008 <arm_conv_f32+0x2f4>
 8004ffe:	0096      	lsls	r6, r2, #2
 8005000:	eb05 0c06 	add.w	ip, r5, r6
 8005004:	4604      	mov	r4, r0
 8005006:	e021      	b.n	800504c <arm_conv_f32+0x338>
 8005008:	00000000 	.word	0x00000000
 800500c:	edd7 7a00 	vldr	s15, [r7]
 8005010:	ecb2 7a01 	vldmia	r2!, {s14}
 8005014:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005018:	ee77 7a86 	vadd.f32	s15, s15, s12
 800501c:	b189      	cbz	r1, 8005042 <arm_conv_f32+0x32e>
 800501e:	ed17 7a01 	vldr	s14, [r7, #-4]
 8005022:	edd4 6a01 	vldr	s13, [r4, #4]
 8005026:	ee27 7a26 	vmul.f32	s14, s14, s13
 800502a:	2b02      	cmp	r3, #2
 800502c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005030:	d007      	beq.n	8005042 <arm_conv_f32+0x32e>
 8005032:	ed94 7a02 	vldr	s14, [r4, #8]
 8005036:	ed57 6a02 	vldr	s13, [r7, #-8]
 800503a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800503e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005042:	ece5 7a01 	vstmia	r5!, {s15}
 8005046:	4565      	cmp	r5, ip
 8005048:	4614      	mov	r4, r2
 800504a:	d00a      	beq.n	8005062 <arm_conv_f32+0x34e>
 800504c:	4622      	mov	r2, r4
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1dc      	bne.n	800500c <arm_conv_f32+0x2f8>
 8005052:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 8005008 <arm_conv_f32+0x2f4>
 8005056:	ece5 7a01 	vstmia	r5!, {s15}
 800505a:	1d22      	adds	r2, r4, #4
 800505c:	4565      	cmp	r5, ip
 800505e:	4614      	mov	r4, r2
 8005060:	d1f4      	bne.n	800504c <arm_conv_f32+0x338>
 8005062:	4430      	add	r0, r6
 8005064:	2900      	cmp	r1, #0
 8005066:	d059      	beq.n	800511c <arm_conv_f32+0x408>
 8005068:	088d      	lsrs	r5, r1, #2
 800506a:	ed5f 5a19 	vldr	s11, [pc, #-100]	; 8005008 <arm_conv_f32+0x2f4>
 800506e:	d058      	beq.n	8005122 <arm_conv_f32+0x40e>
 8005070:	f100 0210 	add.w	r2, r0, #16
 8005074:	f1a7 0310 	sub.w	r3, r7, #16
 8005078:	462c      	mov	r4, r5
 800507a:	ed52 6a04 	vldr	s13, [r2, #-16]
 800507e:	edd3 3a04 	vldr	s7, [r3, #16]
 8005082:	ed12 7a03 	vldr	s14, [r2, #-12]
 8005086:	ed93 4a03 	vldr	s8, [r3, #12]
 800508a:	ed52 7a02 	vldr	s15, [r2, #-8]
 800508e:	edd3 4a02 	vldr	s9, [r3, #8]
 8005092:	ed12 6a01 	vldr	s12, [r2, #-4]
 8005096:	ed93 5a01 	vldr	s10, [r3, #4]
 800509a:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800509e:	ee27 7a04 	vmul.f32	s14, s14, s8
 80050a2:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80050a6:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80050aa:	ee37 7a26 	vadd.f32	s14, s14, s13
 80050ae:	ee66 6a05 	vmul.f32	s13, s12, s10
 80050b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80050b6:	3c01      	subs	r4, #1
 80050b8:	f102 0210 	add.w	r2, r2, #16
 80050bc:	ee76 5aa7 	vadd.f32	s11, s13, s15
 80050c0:	f1a3 0310 	sub.w	r3, r3, #16
 80050c4:	d1d9      	bne.n	800507a <arm_conv_f32+0x366>
 80050c6:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 80050ca:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 80050ce:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 80050d2:	f011 0203 	ands.w	r2, r1, #3
 80050d6:	d01b      	beq.n	8005110 <arm_conv_f32+0x3fc>
 80050d8:	edd3 7a00 	vldr	s15, [r3]
 80050dc:	ed95 7a00 	vldr	s14, [r5]
 80050e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050e4:	3a01      	subs	r2, #1
 80050e6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80050ea:	d011      	beq.n	8005110 <arm_conv_f32+0x3fc>
 80050ec:	ed53 7a01 	vldr	s15, [r3, #-4]
 80050f0:	ed95 7a01 	vldr	s14, [r5, #4]
 80050f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050f8:	2a01      	cmp	r2, #1
 80050fa:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80050fe:	d007      	beq.n	8005110 <arm_conv_f32+0x3fc>
 8005100:	edd5 7a02 	vldr	s15, [r5, #8]
 8005104:	ed13 7a02 	vldr	s14, [r3, #-8]
 8005108:	ee67 7a87 	vmul.f32	s15, s15, s14
 800510c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005110:	3901      	subs	r1, #1
 8005112:	ecec 5a01 	vstmia	ip!, {s11}
 8005116:	f100 0004 	add.w	r0, r0, #4
 800511a:	d1a5      	bne.n	8005068 <arm_conv_f32+0x354>
 800511c:	b00b      	add	sp, #44	; 0x2c
 800511e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005122:	463b      	mov	r3, r7
 8005124:	4605      	mov	r5, r0
 8005126:	e7d4      	b.n	80050d2 <arm_conv_f32+0x3be>
 8005128:	9b02      	ldr	r3, [sp, #8]
 800512a:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	9302      	str	r3, [sp, #8]
 8005132:	9b03      	ldr	r3, [sp, #12]
 8005134:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 8005138:	4403      	add	r3, r0
 800513a:	465d      	mov	r5, fp
 800513c:	469e      	mov	lr, r3
 800513e:	9b01      	ldr	r3, [sp, #4]
 8005140:	f013 0c03 	ands.w	ip, r3, #3
 8005144:	d075      	beq.n	8005232 <arm_conv_f32+0x51e>
 8005146:	9b02      	ldr	r3, [sp, #8]
 8005148:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 800514c:	f004 0403 	and.w	r4, r4, #3
 8005150:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 8005154:	f103 0801 	add.w	r8, r3, #1
 8005158:	ea4f 130a 	mov.w	r3, sl, lsl #4
 800515c:	e9cd 7002 	strd	r7, r0, [sp, #8]
 8005160:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 8005164:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8005168:	f1a7 0210 	sub.w	r2, r7, #16
 800516c:	4618      	mov	r0, r3
 800516e:	465b      	mov	r3, fp
 8005170:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 8005174:	468b      	mov	fp, r1
 8005176:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 800517a:	4621      	mov	r1, r4
 800517c:	4617      	mov	r7, r2
 800517e:	461c      	mov	r4, r3
 8005180:	ed5f 7a5f 	vldr	s15, [pc, #-380]	; 8005008 <arm_conv_f32+0x2f4>
 8005184:	f10e 0210 	add.w	r2, lr, #16
 8005188:	463b      	mov	r3, r7
 800518a:	4656      	mov	r6, sl
 800518c:	ed12 7a04 	vldr	s14, [r2, #-16]
 8005190:	edd3 3a04 	vldr	s7, [r3, #16]
 8005194:	ed12 6a03 	vldr	s12, [r2, #-12]
 8005198:	ed93 4a03 	vldr	s8, [r3, #12]
 800519c:	ed52 6a02 	vldr	s13, [r2, #-8]
 80051a0:	edd3 4a02 	vldr	s9, [r3, #8]
 80051a4:	ed52 5a01 	vldr	s11, [r2, #-4]
 80051a8:	ed93 5a01 	vldr	s10, [r3, #4]
 80051ac:	ee27 7a23 	vmul.f32	s14, s14, s7
 80051b0:	ee26 6a04 	vmul.f32	s12, s12, s8
 80051b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051b8:	ee26 7aa4 	vmul.f32	s14, s13, s9
 80051bc:	ee76 7a27 	vadd.f32	s15, s12, s15
 80051c0:	ee65 6a85 	vmul.f32	s13, s11, s10
 80051c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051c8:	3e01      	subs	r6, #1
 80051ca:	f102 0210 	add.w	r2, r2, #16
 80051ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051d2:	f1a3 0310 	sub.w	r3, r3, #16
 80051d6:	d1d9      	bne.n	800518c <arm_conv_f32+0x478>
 80051d8:	4486      	add	lr, r0
 80051da:	b1d1      	cbz	r1, 8005212 <arm_conv_f32+0x4fe>
 80051dc:	ed99 7a00 	vldr	s14, [r9]
 80051e0:	edde 6a00 	vldr	s13, [lr]
 80051e4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80051e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051ec:	b18c      	cbz	r4, 8005212 <arm_conv_f32+0x4fe>
 80051ee:	ed19 7a01 	vldr	s14, [r9, #-4]
 80051f2:	edde 6a01 	vldr	s13, [lr, #4]
 80051f6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80051fa:	2c01      	cmp	r4, #1
 80051fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005200:	d007      	beq.n	8005212 <arm_conv_f32+0x4fe>
 8005202:	ed9e 7a02 	vldr	s14, [lr, #8]
 8005206:	ed59 6a02 	vldr	s13, [r9, #-8]
 800520a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800520e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005212:	ece5 7a01 	vstmia	r5!, {s15}
 8005216:	4565      	cmp	r5, ip
 8005218:	46c6      	mov	lr, r8
 800521a:	f108 0804 	add.w	r8, r8, #4
 800521e:	d1af      	bne.n	8005180 <arm_conv_f32+0x46c>
 8005220:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 8005224:	4659      	mov	r1, fp
 8005226:	9b01      	ldr	r3, [sp, #4]
 8005228:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800522c:	e71c      	b.n	8005068 <arm_conv_f32+0x354>
 800522e:	4686      	mov	lr, r0
 8005230:	e785      	b.n	800513e <arm_conv_f32+0x42a>
 8005232:	46ac      	mov	ip, r5
 8005234:	e7f7      	b.n	8005226 <arm_conv_f32+0x512>
 8005236:	9a01      	ldr	r2, [sp, #4]
 8005238:	2a00      	cmp	r2, #0
 800523a:	f47f aedd 	bne.w	8004ff8 <arm_conv_f32+0x2e4>
 800523e:	e76d      	b.n	800511c <arm_conv_f32+0x408>
 8005240:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 8005008 <arm_conv_f32+0x2f4>
 8005244:	4680      	mov	r8, r0
 8005246:	e5e3      	b.n	8004e10 <arm_conv_f32+0xfc>

08005248 <__errno>:
 8005248:	4b01      	ldr	r3, [pc, #4]	; (8005250 <__errno+0x8>)
 800524a:	6818      	ldr	r0, [r3, #0]
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	2000000c 	.word	0x2000000c

08005254 <__libc_init_array>:
 8005254:	b570      	push	{r4, r5, r6, lr}
 8005256:	4d0d      	ldr	r5, [pc, #52]	; (800528c <__libc_init_array+0x38>)
 8005258:	4c0d      	ldr	r4, [pc, #52]	; (8005290 <__libc_init_array+0x3c>)
 800525a:	1b64      	subs	r4, r4, r5
 800525c:	10a4      	asrs	r4, r4, #2
 800525e:	2600      	movs	r6, #0
 8005260:	42a6      	cmp	r6, r4
 8005262:	d109      	bne.n	8005278 <__libc_init_array+0x24>
 8005264:	4d0b      	ldr	r5, [pc, #44]	; (8005294 <__libc_init_array+0x40>)
 8005266:	4c0c      	ldr	r4, [pc, #48]	; (8005298 <__libc_init_array+0x44>)
 8005268:	f003 fc98 	bl	8008b9c <_init>
 800526c:	1b64      	subs	r4, r4, r5
 800526e:	10a4      	asrs	r4, r4, #2
 8005270:	2600      	movs	r6, #0
 8005272:	42a6      	cmp	r6, r4
 8005274:	d105      	bne.n	8005282 <__libc_init_array+0x2e>
 8005276:	bd70      	pop	{r4, r5, r6, pc}
 8005278:	f855 3b04 	ldr.w	r3, [r5], #4
 800527c:	4798      	blx	r3
 800527e:	3601      	adds	r6, #1
 8005280:	e7ee      	b.n	8005260 <__libc_init_array+0xc>
 8005282:	f855 3b04 	ldr.w	r3, [r5], #4
 8005286:	4798      	blx	r3
 8005288:	3601      	adds	r6, #1
 800528a:	e7f2      	b.n	8005272 <__libc_init_array+0x1e>
 800528c:	08009200 	.word	0x08009200
 8005290:	08009200 	.word	0x08009200
 8005294:	08009200 	.word	0x08009200
 8005298:	08009204 	.word	0x08009204

0800529c <memcpy>:
 800529c:	440a      	add	r2, r1
 800529e:	4291      	cmp	r1, r2
 80052a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80052a4:	d100      	bne.n	80052a8 <memcpy+0xc>
 80052a6:	4770      	bx	lr
 80052a8:	b510      	push	{r4, lr}
 80052aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052b2:	4291      	cmp	r1, r2
 80052b4:	d1f9      	bne.n	80052aa <memcpy+0xe>
 80052b6:	bd10      	pop	{r4, pc}

080052b8 <memset>:
 80052b8:	4402      	add	r2, r0
 80052ba:	4603      	mov	r3, r0
 80052bc:	4293      	cmp	r3, r2
 80052be:	d100      	bne.n	80052c2 <memset+0xa>
 80052c0:	4770      	bx	lr
 80052c2:	f803 1b01 	strb.w	r1, [r3], #1
 80052c6:	e7f9      	b.n	80052bc <memset+0x4>

080052c8 <__cvt>:
 80052c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052cc:	ec55 4b10 	vmov	r4, r5, d0
 80052d0:	2d00      	cmp	r5, #0
 80052d2:	460e      	mov	r6, r1
 80052d4:	4619      	mov	r1, r3
 80052d6:	462b      	mov	r3, r5
 80052d8:	bfbb      	ittet	lt
 80052da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80052de:	461d      	movlt	r5, r3
 80052e0:	2300      	movge	r3, #0
 80052e2:	232d      	movlt	r3, #45	; 0x2d
 80052e4:	700b      	strb	r3, [r1, #0]
 80052e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80052ec:	4691      	mov	r9, r2
 80052ee:	f023 0820 	bic.w	r8, r3, #32
 80052f2:	bfbc      	itt	lt
 80052f4:	4622      	movlt	r2, r4
 80052f6:	4614      	movlt	r4, r2
 80052f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052fc:	d005      	beq.n	800530a <__cvt+0x42>
 80052fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005302:	d100      	bne.n	8005306 <__cvt+0x3e>
 8005304:	3601      	adds	r6, #1
 8005306:	2102      	movs	r1, #2
 8005308:	e000      	b.n	800530c <__cvt+0x44>
 800530a:	2103      	movs	r1, #3
 800530c:	ab03      	add	r3, sp, #12
 800530e:	9301      	str	r3, [sp, #4]
 8005310:	ab02      	add	r3, sp, #8
 8005312:	9300      	str	r3, [sp, #0]
 8005314:	ec45 4b10 	vmov	d0, r4, r5
 8005318:	4653      	mov	r3, sl
 800531a:	4632      	mov	r2, r6
 800531c:	f000 fce4 	bl	8005ce8 <_dtoa_r>
 8005320:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005324:	4607      	mov	r7, r0
 8005326:	d102      	bne.n	800532e <__cvt+0x66>
 8005328:	f019 0f01 	tst.w	r9, #1
 800532c:	d022      	beq.n	8005374 <__cvt+0xac>
 800532e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005332:	eb07 0906 	add.w	r9, r7, r6
 8005336:	d110      	bne.n	800535a <__cvt+0x92>
 8005338:	783b      	ldrb	r3, [r7, #0]
 800533a:	2b30      	cmp	r3, #48	; 0x30
 800533c:	d10a      	bne.n	8005354 <__cvt+0x8c>
 800533e:	2200      	movs	r2, #0
 8005340:	2300      	movs	r3, #0
 8005342:	4620      	mov	r0, r4
 8005344:	4629      	mov	r1, r5
 8005346:	f7fb fbd7 	bl	8000af8 <__aeabi_dcmpeq>
 800534a:	b918      	cbnz	r0, 8005354 <__cvt+0x8c>
 800534c:	f1c6 0601 	rsb	r6, r6, #1
 8005350:	f8ca 6000 	str.w	r6, [sl]
 8005354:	f8da 3000 	ldr.w	r3, [sl]
 8005358:	4499      	add	r9, r3
 800535a:	2200      	movs	r2, #0
 800535c:	2300      	movs	r3, #0
 800535e:	4620      	mov	r0, r4
 8005360:	4629      	mov	r1, r5
 8005362:	f7fb fbc9 	bl	8000af8 <__aeabi_dcmpeq>
 8005366:	b108      	cbz	r0, 800536c <__cvt+0xa4>
 8005368:	f8cd 900c 	str.w	r9, [sp, #12]
 800536c:	2230      	movs	r2, #48	; 0x30
 800536e:	9b03      	ldr	r3, [sp, #12]
 8005370:	454b      	cmp	r3, r9
 8005372:	d307      	bcc.n	8005384 <__cvt+0xbc>
 8005374:	9b03      	ldr	r3, [sp, #12]
 8005376:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005378:	1bdb      	subs	r3, r3, r7
 800537a:	4638      	mov	r0, r7
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	b004      	add	sp, #16
 8005380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005384:	1c59      	adds	r1, r3, #1
 8005386:	9103      	str	r1, [sp, #12]
 8005388:	701a      	strb	r2, [r3, #0]
 800538a:	e7f0      	b.n	800536e <__cvt+0xa6>

0800538c <__exponent>:
 800538c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800538e:	4603      	mov	r3, r0
 8005390:	2900      	cmp	r1, #0
 8005392:	bfb8      	it	lt
 8005394:	4249      	neglt	r1, r1
 8005396:	f803 2b02 	strb.w	r2, [r3], #2
 800539a:	bfb4      	ite	lt
 800539c:	222d      	movlt	r2, #45	; 0x2d
 800539e:	222b      	movge	r2, #43	; 0x2b
 80053a0:	2909      	cmp	r1, #9
 80053a2:	7042      	strb	r2, [r0, #1]
 80053a4:	dd2a      	ble.n	80053fc <__exponent+0x70>
 80053a6:	f10d 0407 	add.w	r4, sp, #7
 80053aa:	46a4      	mov	ip, r4
 80053ac:	270a      	movs	r7, #10
 80053ae:	46a6      	mov	lr, r4
 80053b0:	460a      	mov	r2, r1
 80053b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80053b6:	fb07 1516 	mls	r5, r7, r6, r1
 80053ba:	3530      	adds	r5, #48	; 0x30
 80053bc:	2a63      	cmp	r2, #99	; 0x63
 80053be:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80053c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80053c6:	4631      	mov	r1, r6
 80053c8:	dcf1      	bgt.n	80053ae <__exponent+0x22>
 80053ca:	3130      	adds	r1, #48	; 0x30
 80053cc:	f1ae 0502 	sub.w	r5, lr, #2
 80053d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80053d4:	1c44      	adds	r4, r0, #1
 80053d6:	4629      	mov	r1, r5
 80053d8:	4561      	cmp	r1, ip
 80053da:	d30a      	bcc.n	80053f2 <__exponent+0x66>
 80053dc:	f10d 0209 	add.w	r2, sp, #9
 80053e0:	eba2 020e 	sub.w	r2, r2, lr
 80053e4:	4565      	cmp	r5, ip
 80053e6:	bf88      	it	hi
 80053e8:	2200      	movhi	r2, #0
 80053ea:	4413      	add	r3, r2
 80053ec:	1a18      	subs	r0, r3, r0
 80053ee:	b003      	add	sp, #12
 80053f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80053fa:	e7ed      	b.n	80053d8 <__exponent+0x4c>
 80053fc:	2330      	movs	r3, #48	; 0x30
 80053fe:	3130      	adds	r1, #48	; 0x30
 8005400:	7083      	strb	r3, [r0, #2]
 8005402:	70c1      	strb	r1, [r0, #3]
 8005404:	1d03      	adds	r3, r0, #4
 8005406:	e7f1      	b.n	80053ec <__exponent+0x60>

08005408 <_printf_float>:
 8005408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800540c:	ed2d 8b02 	vpush	{d8}
 8005410:	b08d      	sub	sp, #52	; 0x34
 8005412:	460c      	mov	r4, r1
 8005414:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005418:	4616      	mov	r6, r2
 800541a:	461f      	mov	r7, r3
 800541c:	4605      	mov	r5, r0
 800541e:	f001 fb47 	bl	8006ab0 <_localeconv_r>
 8005422:	f8d0 a000 	ldr.w	sl, [r0]
 8005426:	4650      	mov	r0, sl
 8005428:	f7fa feea 	bl	8000200 <strlen>
 800542c:	2300      	movs	r3, #0
 800542e:	930a      	str	r3, [sp, #40]	; 0x28
 8005430:	6823      	ldr	r3, [r4, #0]
 8005432:	9305      	str	r3, [sp, #20]
 8005434:	f8d8 3000 	ldr.w	r3, [r8]
 8005438:	f894 b018 	ldrb.w	fp, [r4, #24]
 800543c:	3307      	adds	r3, #7
 800543e:	f023 0307 	bic.w	r3, r3, #7
 8005442:	f103 0208 	add.w	r2, r3, #8
 8005446:	f8c8 2000 	str.w	r2, [r8]
 800544a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005452:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005456:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800545a:	9307      	str	r3, [sp, #28]
 800545c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005460:	ee08 0a10 	vmov	s16, r0
 8005464:	4b9f      	ldr	r3, [pc, #636]	; (80056e4 <_printf_float+0x2dc>)
 8005466:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800546a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800546e:	f7fb fb75 	bl	8000b5c <__aeabi_dcmpun>
 8005472:	bb88      	cbnz	r0, 80054d8 <_printf_float+0xd0>
 8005474:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005478:	4b9a      	ldr	r3, [pc, #616]	; (80056e4 <_printf_float+0x2dc>)
 800547a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800547e:	f7fb fb4f 	bl	8000b20 <__aeabi_dcmple>
 8005482:	bb48      	cbnz	r0, 80054d8 <_printf_float+0xd0>
 8005484:	2200      	movs	r2, #0
 8005486:	2300      	movs	r3, #0
 8005488:	4640      	mov	r0, r8
 800548a:	4649      	mov	r1, r9
 800548c:	f7fb fb3e 	bl	8000b0c <__aeabi_dcmplt>
 8005490:	b110      	cbz	r0, 8005498 <_printf_float+0x90>
 8005492:	232d      	movs	r3, #45	; 0x2d
 8005494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005498:	4b93      	ldr	r3, [pc, #588]	; (80056e8 <_printf_float+0x2e0>)
 800549a:	4894      	ldr	r0, [pc, #592]	; (80056ec <_printf_float+0x2e4>)
 800549c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80054a0:	bf94      	ite	ls
 80054a2:	4698      	movls	r8, r3
 80054a4:	4680      	movhi	r8, r0
 80054a6:	2303      	movs	r3, #3
 80054a8:	6123      	str	r3, [r4, #16]
 80054aa:	9b05      	ldr	r3, [sp, #20]
 80054ac:	f023 0204 	bic.w	r2, r3, #4
 80054b0:	6022      	str	r2, [r4, #0]
 80054b2:	f04f 0900 	mov.w	r9, #0
 80054b6:	9700      	str	r7, [sp, #0]
 80054b8:	4633      	mov	r3, r6
 80054ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80054bc:	4621      	mov	r1, r4
 80054be:	4628      	mov	r0, r5
 80054c0:	f000 f9d8 	bl	8005874 <_printf_common>
 80054c4:	3001      	adds	r0, #1
 80054c6:	f040 8090 	bne.w	80055ea <_printf_float+0x1e2>
 80054ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054ce:	b00d      	add	sp, #52	; 0x34
 80054d0:	ecbd 8b02 	vpop	{d8}
 80054d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d8:	4642      	mov	r2, r8
 80054da:	464b      	mov	r3, r9
 80054dc:	4640      	mov	r0, r8
 80054de:	4649      	mov	r1, r9
 80054e0:	f7fb fb3c 	bl	8000b5c <__aeabi_dcmpun>
 80054e4:	b140      	cbz	r0, 80054f8 <_printf_float+0xf0>
 80054e6:	464b      	mov	r3, r9
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	bfbc      	itt	lt
 80054ec:	232d      	movlt	r3, #45	; 0x2d
 80054ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80054f2:	487f      	ldr	r0, [pc, #508]	; (80056f0 <_printf_float+0x2e8>)
 80054f4:	4b7f      	ldr	r3, [pc, #508]	; (80056f4 <_printf_float+0x2ec>)
 80054f6:	e7d1      	b.n	800549c <_printf_float+0x94>
 80054f8:	6863      	ldr	r3, [r4, #4]
 80054fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80054fe:	9206      	str	r2, [sp, #24]
 8005500:	1c5a      	adds	r2, r3, #1
 8005502:	d13f      	bne.n	8005584 <_printf_float+0x17c>
 8005504:	2306      	movs	r3, #6
 8005506:	6063      	str	r3, [r4, #4]
 8005508:	9b05      	ldr	r3, [sp, #20]
 800550a:	6861      	ldr	r1, [r4, #4]
 800550c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005510:	2300      	movs	r3, #0
 8005512:	9303      	str	r3, [sp, #12]
 8005514:	ab0a      	add	r3, sp, #40	; 0x28
 8005516:	e9cd b301 	strd	fp, r3, [sp, #4]
 800551a:	ab09      	add	r3, sp, #36	; 0x24
 800551c:	ec49 8b10 	vmov	d0, r8, r9
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	6022      	str	r2, [r4, #0]
 8005524:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005528:	4628      	mov	r0, r5
 800552a:	f7ff fecd 	bl	80052c8 <__cvt>
 800552e:	9b06      	ldr	r3, [sp, #24]
 8005530:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005532:	2b47      	cmp	r3, #71	; 0x47
 8005534:	4680      	mov	r8, r0
 8005536:	d108      	bne.n	800554a <_printf_float+0x142>
 8005538:	1cc8      	adds	r0, r1, #3
 800553a:	db02      	blt.n	8005542 <_printf_float+0x13a>
 800553c:	6863      	ldr	r3, [r4, #4]
 800553e:	4299      	cmp	r1, r3
 8005540:	dd41      	ble.n	80055c6 <_printf_float+0x1be>
 8005542:	f1ab 0b02 	sub.w	fp, fp, #2
 8005546:	fa5f fb8b 	uxtb.w	fp, fp
 800554a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800554e:	d820      	bhi.n	8005592 <_printf_float+0x18a>
 8005550:	3901      	subs	r1, #1
 8005552:	465a      	mov	r2, fp
 8005554:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005558:	9109      	str	r1, [sp, #36]	; 0x24
 800555a:	f7ff ff17 	bl	800538c <__exponent>
 800555e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005560:	1813      	adds	r3, r2, r0
 8005562:	2a01      	cmp	r2, #1
 8005564:	4681      	mov	r9, r0
 8005566:	6123      	str	r3, [r4, #16]
 8005568:	dc02      	bgt.n	8005570 <_printf_float+0x168>
 800556a:	6822      	ldr	r2, [r4, #0]
 800556c:	07d2      	lsls	r2, r2, #31
 800556e:	d501      	bpl.n	8005574 <_printf_float+0x16c>
 8005570:	3301      	adds	r3, #1
 8005572:	6123      	str	r3, [r4, #16]
 8005574:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005578:	2b00      	cmp	r3, #0
 800557a:	d09c      	beq.n	80054b6 <_printf_float+0xae>
 800557c:	232d      	movs	r3, #45	; 0x2d
 800557e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005582:	e798      	b.n	80054b6 <_printf_float+0xae>
 8005584:	9a06      	ldr	r2, [sp, #24]
 8005586:	2a47      	cmp	r2, #71	; 0x47
 8005588:	d1be      	bne.n	8005508 <_printf_float+0x100>
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1bc      	bne.n	8005508 <_printf_float+0x100>
 800558e:	2301      	movs	r3, #1
 8005590:	e7b9      	b.n	8005506 <_printf_float+0xfe>
 8005592:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005596:	d118      	bne.n	80055ca <_printf_float+0x1c2>
 8005598:	2900      	cmp	r1, #0
 800559a:	6863      	ldr	r3, [r4, #4]
 800559c:	dd0b      	ble.n	80055b6 <_printf_float+0x1ae>
 800559e:	6121      	str	r1, [r4, #16]
 80055a0:	b913      	cbnz	r3, 80055a8 <_printf_float+0x1a0>
 80055a2:	6822      	ldr	r2, [r4, #0]
 80055a4:	07d0      	lsls	r0, r2, #31
 80055a6:	d502      	bpl.n	80055ae <_printf_float+0x1a6>
 80055a8:	3301      	adds	r3, #1
 80055aa:	440b      	add	r3, r1
 80055ac:	6123      	str	r3, [r4, #16]
 80055ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80055b0:	f04f 0900 	mov.w	r9, #0
 80055b4:	e7de      	b.n	8005574 <_printf_float+0x16c>
 80055b6:	b913      	cbnz	r3, 80055be <_printf_float+0x1b6>
 80055b8:	6822      	ldr	r2, [r4, #0]
 80055ba:	07d2      	lsls	r2, r2, #31
 80055bc:	d501      	bpl.n	80055c2 <_printf_float+0x1ba>
 80055be:	3302      	adds	r3, #2
 80055c0:	e7f4      	b.n	80055ac <_printf_float+0x1a4>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e7f2      	b.n	80055ac <_printf_float+0x1a4>
 80055c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80055ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055cc:	4299      	cmp	r1, r3
 80055ce:	db05      	blt.n	80055dc <_printf_float+0x1d4>
 80055d0:	6823      	ldr	r3, [r4, #0]
 80055d2:	6121      	str	r1, [r4, #16]
 80055d4:	07d8      	lsls	r0, r3, #31
 80055d6:	d5ea      	bpl.n	80055ae <_printf_float+0x1a6>
 80055d8:	1c4b      	adds	r3, r1, #1
 80055da:	e7e7      	b.n	80055ac <_printf_float+0x1a4>
 80055dc:	2900      	cmp	r1, #0
 80055de:	bfd4      	ite	le
 80055e0:	f1c1 0202 	rsble	r2, r1, #2
 80055e4:	2201      	movgt	r2, #1
 80055e6:	4413      	add	r3, r2
 80055e8:	e7e0      	b.n	80055ac <_printf_float+0x1a4>
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	055a      	lsls	r2, r3, #21
 80055ee:	d407      	bmi.n	8005600 <_printf_float+0x1f8>
 80055f0:	6923      	ldr	r3, [r4, #16]
 80055f2:	4642      	mov	r2, r8
 80055f4:	4631      	mov	r1, r6
 80055f6:	4628      	mov	r0, r5
 80055f8:	47b8      	blx	r7
 80055fa:	3001      	adds	r0, #1
 80055fc:	d12c      	bne.n	8005658 <_printf_float+0x250>
 80055fe:	e764      	b.n	80054ca <_printf_float+0xc2>
 8005600:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005604:	f240 80e0 	bls.w	80057c8 <_printf_float+0x3c0>
 8005608:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800560c:	2200      	movs	r2, #0
 800560e:	2300      	movs	r3, #0
 8005610:	f7fb fa72 	bl	8000af8 <__aeabi_dcmpeq>
 8005614:	2800      	cmp	r0, #0
 8005616:	d034      	beq.n	8005682 <_printf_float+0x27a>
 8005618:	4a37      	ldr	r2, [pc, #220]	; (80056f8 <_printf_float+0x2f0>)
 800561a:	2301      	movs	r3, #1
 800561c:	4631      	mov	r1, r6
 800561e:	4628      	mov	r0, r5
 8005620:	47b8      	blx	r7
 8005622:	3001      	adds	r0, #1
 8005624:	f43f af51 	beq.w	80054ca <_printf_float+0xc2>
 8005628:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800562c:	429a      	cmp	r2, r3
 800562e:	db02      	blt.n	8005636 <_printf_float+0x22e>
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	07d8      	lsls	r0, r3, #31
 8005634:	d510      	bpl.n	8005658 <_printf_float+0x250>
 8005636:	ee18 3a10 	vmov	r3, s16
 800563a:	4652      	mov	r2, sl
 800563c:	4631      	mov	r1, r6
 800563e:	4628      	mov	r0, r5
 8005640:	47b8      	blx	r7
 8005642:	3001      	adds	r0, #1
 8005644:	f43f af41 	beq.w	80054ca <_printf_float+0xc2>
 8005648:	f04f 0800 	mov.w	r8, #0
 800564c:	f104 091a 	add.w	r9, r4, #26
 8005650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005652:	3b01      	subs	r3, #1
 8005654:	4543      	cmp	r3, r8
 8005656:	dc09      	bgt.n	800566c <_printf_float+0x264>
 8005658:	6823      	ldr	r3, [r4, #0]
 800565a:	079b      	lsls	r3, r3, #30
 800565c:	f100 8105 	bmi.w	800586a <_printf_float+0x462>
 8005660:	68e0      	ldr	r0, [r4, #12]
 8005662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005664:	4298      	cmp	r0, r3
 8005666:	bfb8      	it	lt
 8005668:	4618      	movlt	r0, r3
 800566a:	e730      	b.n	80054ce <_printf_float+0xc6>
 800566c:	2301      	movs	r3, #1
 800566e:	464a      	mov	r2, r9
 8005670:	4631      	mov	r1, r6
 8005672:	4628      	mov	r0, r5
 8005674:	47b8      	blx	r7
 8005676:	3001      	adds	r0, #1
 8005678:	f43f af27 	beq.w	80054ca <_printf_float+0xc2>
 800567c:	f108 0801 	add.w	r8, r8, #1
 8005680:	e7e6      	b.n	8005650 <_printf_float+0x248>
 8005682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005684:	2b00      	cmp	r3, #0
 8005686:	dc39      	bgt.n	80056fc <_printf_float+0x2f4>
 8005688:	4a1b      	ldr	r2, [pc, #108]	; (80056f8 <_printf_float+0x2f0>)
 800568a:	2301      	movs	r3, #1
 800568c:	4631      	mov	r1, r6
 800568e:	4628      	mov	r0, r5
 8005690:	47b8      	blx	r7
 8005692:	3001      	adds	r0, #1
 8005694:	f43f af19 	beq.w	80054ca <_printf_float+0xc2>
 8005698:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800569c:	4313      	orrs	r3, r2
 800569e:	d102      	bne.n	80056a6 <_printf_float+0x29e>
 80056a0:	6823      	ldr	r3, [r4, #0]
 80056a2:	07d9      	lsls	r1, r3, #31
 80056a4:	d5d8      	bpl.n	8005658 <_printf_float+0x250>
 80056a6:	ee18 3a10 	vmov	r3, s16
 80056aa:	4652      	mov	r2, sl
 80056ac:	4631      	mov	r1, r6
 80056ae:	4628      	mov	r0, r5
 80056b0:	47b8      	blx	r7
 80056b2:	3001      	adds	r0, #1
 80056b4:	f43f af09 	beq.w	80054ca <_printf_float+0xc2>
 80056b8:	f04f 0900 	mov.w	r9, #0
 80056bc:	f104 0a1a 	add.w	sl, r4, #26
 80056c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056c2:	425b      	negs	r3, r3
 80056c4:	454b      	cmp	r3, r9
 80056c6:	dc01      	bgt.n	80056cc <_printf_float+0x2c4>
 80056c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ca:	e792      	b.n	80055f2 <_printf_float+0x1ea>
 80056cc:	2301      	movs	r3, #1
 80056ce:	4652      	mov	r2, sl
 80056d0:	4631      	mov	r1, r6
 80056d2:	4628      	mov	r0, r5
 80056d4:	47b8      	blx	r7
 80056d6:	3001      	adds	r0, #1
 80056d8:	f43f aef7 	beq.w	80054ca <_printf_float+0xc2>
 80056dc:	f109 0901 	add.w	r9, r9, #1
 80056e0:	e7ee      	b.n	80056c0 <_printf_float+0x2b8>
 80056e2:	bf00      	nop
 80056e4:	7fefffff 	.word	0x7fefffff
 80056e8:	08008df0 	.word	0x08008df0
 80056ec:	08008df4 	.word	0x08008df4
 80056f0:	08008dfc 	.word	0x08008dfc
 80056f4:	08008df8 	.word	0x08008df8
 80056f8:	08008e00 	.word	0x08008e00
 80056fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005700:	429a      	cmp	r2, r3
 8005702:	bfa8      	it	ge
 8005704:	461a      	movge	r2, r3
 8005706:	2a00      	cmp	r2, #0
 8005708:	4691      	mov	r9, r2
 800570a:	dc37      	bgt.n	800577c <_printf_float+0x374>
 800570c:	f04f 0b00 	mov.w	fp, #0
 8005710:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005714:	f104 021a 	add.w	r2, r4, #26
 8005718:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800571a:	9305      	str	r3, [sp, #20]
 800571c:	eba3 0309 	sub.w	r3, r3, r9
 8005720:	455b      	cmp	r3, fp
 8005722:	dc33      	bgt.n	800578c <_printf_float+0x384>
 8005724:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005728:	429a      	cmp	r2, r3
 800572a:	db3b      	blt.n	80057a4 <_printf_float+0x39c>
 800572c:	6823      	ldr	r3, [r4, #0]
 800572e:	07da      	lsls	r2, r3, #31
 8005730:	d438      	bmi.n	80057a4 <_printf_float+0x39c>
 8005732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005734:	9a05      	ldr	r2, [sp, #20]
 8005736:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005738:	1a9a      	subs	r2, r3, r2
 800573a:	eba3 0901 	sub.w	r9, r3, r1
 800573e:	4591      	cmp	r9, r2
 8005740:	bfa8      	it	ge
 8005742:	4691      	movge	r9, r2
 8005744:	f1b9 0f00 	cmp.w	r9, #0
 8005748:	dc35      	bgt.n	80057b6 <_printf_float+0x3ae>
 800574a:	f04f 0800 	mov.w	r8, #0
 800574e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005752:	f104 0a1a 	add.w	sl, r4, #26
 8005756:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800575a:	1a9b      	subs	r3, r3, r2
 800575c:	eba3 0309 	sub.w	r3, r3, r9
 8005760:	4543      	cmp	r3, r8
 8005762:	f77f af79 	ble.w	8005658 <_printf_float+0x250>
 8005766:	2301      	movs	r3, #1
 8005768:	4652      	mov	r2, sl
 800576a:	4631      	mov	r1, r6
 800576c:	4628      	mov	r0, r5
 800576e:	47b8      	blx	r7
 8005770:	3001      	adds	r0, #1
 8005772:	f43f aeaa 	beq.w	80054ca <_printf_float+0xc2>
 8005776:	f108 0801 	add.w	r8, r8, #1
 800577a:	e7ec      	b.n	8005756 <_printf_float+0x34e>
 800577c:	4613      	mov	r3, r2
 800577e:	4631      	mov	r1, r6
 8005780:	4642      	mov	r2, r8
 8005782:	4628      	mov	r0, r5
 8005784:	47b8      	blx	r7
 8005786:	3001      	adds	r0, #1
 8005788:	d1c0      	bne.n	800570c <_printf_float+0x304>
 800578a:	e69e      	b.n	80054ca <_printf_float+0xc2>
 800578c:	2301      	movs	r3, #1
 800578e:	4631      	mov	r1, r6
 8005790:	4628      	mov	r0, r5
 8005792:	9205      	str	r2, [sp, #20]
 8005794:	47b8      	blx	r7
 8005796:	3001      	adds	r0, #1
 8005798:	f43f ae97 	beq.w	80054ca <_printf_float+0xc2>
 800579c:	9a05      	ldr	r2, [sp, #20]
 800579e:	f10b 0b01 	add.w	fp, fp, #1
 80057a2:	e7b9      	b.n	8005718 <_printf_float+0x310>
 80057a4:	ee18 3a10 	vmov	r3, s16
 80057a8:	4652      	mov	r2, sl
 80057aa:	4631      	mov	r1, r6
 80057ac:	4628      	mov	r0, r5
 80057ae:	47b8      	blx	r7
 80057b0:	3001      	adds	r0, #1
 80057b2:	d1be      	bne.n	8005732 <_printf_float+0x32a>
 80057b4:	e689      	b.n	80054ca <_printf_float+0xc2>
 80057b6:	9a05      	ldr	r2, [sp, #20]
 80057b8:	464b      	mov	r3, r9
 80057ba:	4442      	add	r2, r8
 80057bc:	4631      	mov	r1, r6
 80057be:	4628      	mov	r0, r5
 80057c0:	47b8      	blx	r7
 80057c2:	3001      	adds	r0, #1
 80057c4:	d1c1      	bne.n	800574a <_printf_float+0x342>
 80057c6:	e680      	b.n	80054ca <_printf_float+0xc2>
 80057c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057ca:	2a01      	cmp	r2, #1
 80057cc:	dc01      	bgt.n	80057d2 <_printf_float+0x3ca>
 80057ce:	07db      	lsls	r3, r3, #31
 80057d0:	d538      	bpl.n	8005844 <_printf_float+0x43c>
 80057d2:	2301      	movs	r3, #1
 80057d4:	4642      	mov	r2, r8
 80057d6:	4631      	mov	r1, r6
 80057d8:	4628      	mov	r0, r5
 80057da:	47b8      	blx	r7
 80057dc:	3001      	adds	r0, #1
 80057de:	f43f ae74 	beq.w	80054ca <_printf_float+0xc2>
 80057e2:	ee18 3a10 	vmov	r3, s16
 80057e6:	4652      	mov	r2, sl
 80057e8:	4631      	mov	r1, r6
 80057ea:	4628      	mov	r0, r5
 80057ec:	47b8      	blx	r7
 80057ee:	3001      	adds	r0, #1
 80057f0:	f43f ae6b 	beq.w	80054ca <_printf_float+0xc2>
 80057f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057f8:	2200      	movs	r2, #0
 80057fa:	2300      	movs	r3, #0
 80057fc:	f7fb f97c 	bl	8000af8 <__aeabi_dcmpeq>
 8005800:	b9d8      	cbnz	r0, 800583a <_printf_float+0x432>
 8005802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005804:	f108 0201 	add.w	r2, r8, #1
 8005808:	3b01      	subs	r3, #1
 800580a:	4631      	mov	r1, r6
 800580c:	4628      	mov	r0, r5
 800580e:	47b8      	blx	r7
 8005810:	3001      	adds	r0, #1
 8005812:	d10e      	bne.n	8005832 <_printf_float+0x42a>
 8005814:	e659      	b.n	80054ca <_printf_float+0xc2>
 8005816:	2301      	movs	r3, #1
 8005818:	4652      	mov	r2, sl
 800581a:	4631      	mov	r1, r6
 800581c:	4628      	mov	r0, r5
 800581e:	47b8      	blx	r7
 8005820:	3001      	adds	r0, #1
 8005822:	f43f ae52 	beq.w	80054ca <_printf_float+0xc2>
 8005826:	f108 0801 	add.w	r8, r8, #1
 800582a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800582c:	3b01      	subs	r3, #1
 800582e:	4543      	cmp	r3, r8
 8005830:	dcf1      	bgt.n	8005816 <_printf_float+0x40e>
 8005832:	464b      	mov	r3, r9
 8005834:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005838:	e6dc      	b.n	80055f4 <_printf_float+0x1ec>
 800583a:	f04f 0800 	mov.w	r8, #0
 800583e:	f104 0a1a 	add.w	sl, r4, #26
 8005842:	e7f2      	b.n	800582a <_printf_float+0x422>
 8005844:	2301      	movs	r3, #1
 8005846:	4642      	mov	r2, r8
 8005848:	e7df      	b.n	800580a <_printf_float+0x402>
 800584a:	2301      	movs	r3, #1
 800584c:	464a      	mov	r2, r9
 800584e:	4631      	mov	r1, r6
 8005850:	4628      	mov	r0, r5
 8005852:	47b8      	blx	r7
 8005854:	3001      	adds	r0, #1
 8005856:	f43f ae38 	beq.w	80054ca <_printf_float+0xc2>
 800585a:	f108 0801 	add.w	r8, r8, #1
 800585e:	68e3      	ldr	r3, [r4, #12]
 8005860:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005862:	1a5b      	subs	r3, r3, r1
 8005864:	4543      	cmp	r3, r8
 8005866:	dcf0      	bgt.n	800584a <_printf_float+0x442>
 8005868:	e6fa      	b.n	8005660 <_printf_float+0x258>
 800586a:	f04f 0800 	mov.w	r8, #0
 800586e:	f104 0919 	add.w	r9, r4, #25
 8005872:	e7f4      	b.n	800585e <_printf_float+0x456>

08005874 <_printf_common>:
 8005874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005878:	4616      	mov	r6, r2
 800587a:	4699      	mov	r9, r3
 800587c:	688a      	ldr	r2, [r1, #8]
 800587e:	690b      	ldr	r3, [r1, #16]
 8005880:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005884:	4293      	cmp	r3, r2
 8005886:	bfb8      	it	lt
 8005888:	4613      	movlt	r3, r2
 800588a:	6033      	str	r3, [r6, #0]
 800588c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005890:	4607      	mov	r7, r0
 8005892:	460c      	mov	r4, r1
 8005894:	b10a      	cbz	r2, 800589a <_printf_common+0x26>
 8005896:	3301      	adds	r3, #1
 8005898:	6033      	str	r3, [r6, #0]
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	0699      	lsls	r1, r3, #26
 800589e:	bf42      	ittt	mi
 80058a0:	6833      	ldrmi	r3, [r6, #0]
 80058a2:	3302      	addmi	r3, #2
 80058a4:	6033      	strmi	r3, [r6, #0]
 80058a6:	6825      	ldr	r5, [r4, #0]
 80058a8:	f015 0506 	ands.w	r5, r5, #6
 80058ac:	d106      	bne.n	80058bc <_printf_common+0x48>
 80058ae:	f104 0a19 	add.w	sl, r4, #25
 80058b2:	68e3      	ldr	r3, [r4, #12]
 80058b4:	6832      	ldr	r2, [r6, #0]
 80058b6:	1a9b      	subs	r3, r3, r2
 80058b8:	42ab      	cmp	r3, r5
 80058ba:	dc26      	bgt.n	800590a <_printf_common+0x96>
 80058bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058c0:	1e13      	subs	r3, r2, #0
 80058c2:	6822      	ldr	r2, [r4, #0]
 80058c4:	bf18      	it	ne
 80058c6:	2301      	movne	r3, #1
 80058c8:	0692      	lsls	r2, r2, #26
 80058ca:	d42b      	bmi.n	8005924 <_printf_common+0xb0>
 80058cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058d0:	4649      	mov	r1, r9
 80058d2:	4638      	mov	r0, r7
 80058d4:	47c0      	blx	r8
 80058d6:	3001      	adds	r0, #1
 80058d8:	d01e      	beq.n	8005918 <_printf_common+0xa4>
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	68e5      	ldr	r5, [r4, #12]
 80058de:	6832      	ldr	r2, [r6, #0]
 80058e0:	f003 0306 	and.w	r3, r3, #6
 80058e4:	2b04      	cmp	r3, #4
 80058e6:	bf08      	it	eq
 80058e8:	1aad      	subeq	r5, r5, r2
 80058ea:	68a3      	ldr	r3, [r4, #8]
 80058ec:	6922      	ldr	r2, [r4, #16]
 80058ee:	bf0c      	ite	eq
 80058f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058f4:	2500      	movne	r5, #0
 80058f6:	4293      	cmp	r3, r2
 80058f8:	bfc4      	itt	gt
 80058fa:	1a9b      	subgt	r3, r3, r2
 80058fc:	18ed      	addgt	r5, r5, r3
 80058fe:	2600      	movs	r6, #0
 8005900:	341a      	adds	r4, #26
 8005902:	42b5      	cmp	r5, r6
 8005904:	d11a      	bne.n	800593c <_printf_common+0xc8>
 8005906:	2000      	movs	r0, #0
 8005908:	e008      	b.n	800591c <_printf_common+0xa8>
 800590a:	2301      	movs	r3, #1
 800590c:	4652      	mov	r2, sl
 800590e:	4649      	mov	r1, r9
 8005910:	4638      	mov	r0, r7
 8005912:	47c0      	blx	r8
 8005914:	3001      	adds	r0, #1
 8005916:	d103      	bne.n	8005920 <_printf_common+0xac>
 8005918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800591c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005920:	3501      	adds	r5, #1
 8005922:	e7c6      	b.n	80058b2 <_printf_common+0x3e>
 8005924:	18e1      	adds	r1, r4, r3
 8005926:	1c5a      	adds	r2, r3, #1
 8005928:	2030      	movs	r0, #48	; 0x30
 800592a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800592e:	4422      	add	r2, r4
 8005930:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005934:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005938:	3302      	adds	r3, #2
 800593a:	e7c7      	b.n	80058cc <_printf_common+0x58>
 800593c:	2301      	movs	r3, #1
 800593e:	4622      	mov	r2, r4
 8005940:	4649      	mov	r1, r9
 8005942:	4638      	mov	r0, r7
 8005944:	47c0      	blx	r8
 8005946:	3001      	adds	r0, #1
 8005948:	d0e6      	beq.n	8005918 <_printf_common+0xa4>
 800594a:	3601      	adds	r6, #1
 800594c:	e7d9      	b.n	8005902 <_printf_common+0x8e>
	...

08005950 <_printf_i>:
 8005950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005954:	7e0f      	ldrb	r7, [r1, #24]
 8005956:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005958:	2f78      	cmp	r7, #120	; 0x78
 800595a:	4691      	mov	r9, r2
 800595c:	4680      	mov	r8, r0
 800595e:	460c      	mov	r4, r1
 8005960:	469a      	mov	sl, r3
 8005962:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005966:	d807      	bhi.n	8005978 <_printf_i+0x28>
 8005968:	2f62      	cmp	r7, #98	; 0x62
 800596a:	d80a      	bhi.n	8005982 <_printf_i+0x32>
 800596c:	2f00      	cmp	r7, #0
 800596e:	f000 80d8 	beq.w	8005b22 <_printf_i+0x1d2>
 8005972:	2f58      	cmp	r7, #88	; 0x58
 8005974:	f000 80a3 	beq.w	8005abe <_printf_i+0x16e>
 8005978:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800597c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005980:	e03a      	b.n	80059f8 <_printf_i+0xa8>
 8005982:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005986:	2b15      	cmp	r3, #21
 8005988:	d8f6      	bhi.n	8005978 <_printf_i+0x28>
 800598a:	a101      	add	r1, pc, #4	; (adr r1, 8005990 <_printf_i+0x40>)
 800598c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005990:	080059e9 	.word	0x080059e9
 8005994:	080059fd 	.word	0x080059fd
 8005998:	08005979 	.word	0x08005979
 800599c:	08005979 	.word	0x08005979
 80059a0:	08005979 	.word	0x08005979
 80059a4:	08005979 	.word	0x08005979
 80059a8:	080059fd 	.word	0x080059fd
 80059ac:	08005979 	.word	0x08005979
 80059b0:	08005979 	.word	0x08005979
 80059b4:	08005979 	.word	0x08005979
 80059b8:	08005979 	.word	0x08005979
 80059bc:	08005b09 	.word	0x08005b09
 80059c0:	08005a2d 	.word	0x08005a2d
 80059c4:	08005aeb 	.word	0x08005aeb
 80059c8:	08005979 	.word	0x08005979
 80059cc:	08005979 	.word	0x08005979
 80059d0:	08005b2b 	.word	0x08005b2b
 80059d4:	08005979 	.word	0x08005979
 80059d8:	08005a2d 	.word	0x08005a2d
 80059dc:	08005979 	.word	0x08005979
 80059e0:	08005979 	.word	0x08005979
 80059e4:	08005af3 	.word	0x08005af3
 80059e8:	682b      	ldr	r3, [r5, #0]
 80059ea:	1d1a      	adds	r2, r3, #4
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	602a      	str	r2, [r5, #0]
 80059f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059f8:	2301      	movs	r3, #1
 80059fa:	e0a3      	b.n	8005b44 <_printf_i+0x1f4>
 80059fc:	6820      	ldr	r0, [r4, #0]
 80059fe:	6829      	ldr	r1, [r5, #0]
 8005a00:	0606      	lsls	r6, r0, #24
 8005a02:	f101 0304 	add.w	r3, r1, #4
 8005a06:	d50a      	bpl.n	8005a1e <_printf_i+0xce>
 8005a08:	680e      	ldr	r6, [r1, #0]
 8005a0a:	602b      	str	r3, [r5, #0]
 8005a0c:	2e00      	cmp	r6, #0
 8005a0e:	da03      	bge.n	8005a18 <_printf_i+0xc8>
 8005a10:	232d      	movs	r3, #45	; 0x2d
 8005a12:	4276      	negs	r6, r6
 8005a14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a18:	485e      	ldr	r0, [pc, #376]	; (8005b94 <_printf_i+0x244>)
 8005a1a:	230a      	movs	r3, #10
 8005a1c:	e019      	b.n	8005a52 <_printf_i+0x102>
 8005a1e:	680e      	ldr	r6, [r1, #0]
 8005a20:	602b      	str	r3, [r5, #0]
 8005a22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a26:	bf18      	it	ne
 8005a28:	b236      	sxthne	r6, r6
 8005a2a:	e7ef      	b.n	8005a0c <_printf_i+0xbc>
 8005a2c:	682b      	ldr	r3, [r5, #0]
 8005a2e:	6820      	ldr	r0, [r4, #0]
 8005a30:	1d19      	adds	r1, r3, #4
 8005a32:	6029      	str	r1, [r5, #0]
 8005a34:	0601      	lsls	r1, r0, #24
 8005a36:	d501      	bpl.n	8005a3c <_printf_i+0xec>
 8005a38:	681e      	ldr	r6, [r3, #0]
 8005a3a:	e002      	b.n	8005a42 <_printf_i+0xf2>
 8005a3c:	0646      	lsls	r6, r0, #25
 8005a3e:	d5fb      	bpl.n	8005a38 <_printf_i+0xe8>
 8005a40:	881e      	ldrh	r6, [r3, #0]
 8005a42:	4854      	ldr	r0, [pc, #336]	; (8005b94 <_printf_i+0x244>)
 8005a44:	2f6f      	cmp	r7, #111	; 0x6f
 8005a46:	bf0c      	ite	eq
 8005a48:	2308      	moveq	r3, #8
 8005a4a:	230a      	movne	r3, #10
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a52:	6865      	ldr	r5, [r4, #4]
 8005a54:	60a5      	str	r5, [r4, #8]
 8005a56:	2d00      	cmp	r5, #0
 8005a58:	bfa2      	ittt	ge
 8005a5a:	6821      	ldrge	r1, [r4, #0]
 8005a5c:	f021 0104 	bicge.w	r1, r1, #4
 8005a60:	6021      	strge	r1, [r4, #0]
 8005a62:	b90e      	cbnz	r6, 8005a68 <_printf_i+0x118>
 8005a64:	2d00      	cmp	r5, #0
 8005a66:	d04d      	beq.n	8005b04 <_printf_i+0x1b4>
 8005a68:	4615      	mov	r5, r2
 8005a6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a6e:	fb03 6711 	mls	r7, r3, r1, r6
 8005a72:	5dc7      	ldrb	r7, [r0, r7]
 8005a74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a78:	4637      	mov	r7, r6
 8005a7a:	42bb      	cmp	r3, r7
 8005a7c:	460e      	mov	r6, r1
 8005a7e:	d9f4      	bls.n	8005a6a <_printf_i+0x11a>
 8005a80:	2b08      	cmp	r3, #8
 8005a82:	d10b      	bne.n	8005a9c <_printf_i+0x14c>
 8005a84:	6823      	ldr	r3, [r4, #0]
 8005a86:	07de      	lsls	r6, r3, #31
 8005a88:	d508      	bpl.n	8005a9c <_printf_i+0x14c>
 8005a8a:	6923      	ldr	r3, [r4, #16]
 8005a8c:	6861      	ldr	r1, [r4, #4]
 8005a8e:	4299      	cmp	r1, r3
 8005a90:	bfde      	ittt	le
 8005a92:	2330      	movle	r3, #48	; 0x30
 8005a94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a98:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005a9c:	1b52      	subs	r2, r2, r5
 8005a9e:	6122      	str	r2, [r4, #16]
 8005aa0:	f8cd a000 	str.w	sl, [sp]
 8005aa4:	464b      	mov	r3, r9
 8005aa6:	aa03      	add	r2, sp, #12
 8005aa8:	4621      	mov	r1, r4
 8005aaa:	4640      	mov	r0, r8
 8005aac:	f7ff fee2 	bl	8005874 <_printf_common>
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	d14c      	bne.n	8005b4e <_printf_i+0x1fe>
 8005ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ab8:	b004      	add	sp, #16
 8005aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005abe:	4835      	ldr	r0, [pc, #212]	; (8005b94 <_printf_i+0x244>)
 8005ac0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ac4:	6829      	ldr	r1, [r5, #0]
 8005ac6:	6823      	ldr	r3, [r4, #0]
 8005ac8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005acc:	6029      	str	r1, [r5, #0]
 8005ace:	061d      	lsls	r5, r3, #24
 8005ad0:	d514      	bpl.n	8005afc <_printf_i+0x1ac>
 8005ad2:	07df      	lsls	r7, r3, #31
 8005ad4:	bf44      	itt	mi
 8005ad6:	f043 0320 	orrmi.w	r3, r3, #32
 8005ada:	6023      	strmi	r3, [r4, #0]
 8005adc:	b91e      	cbnz	r6, 8005ae6 <_printf_i+0x196>
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	f023 0320 	bic.w	r3, r3, #32
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	2310      	movs	r3, #16
 8005ae8:	e7b0      	b.n	8005a4c <_printf_i+0xfc>
 8005aea:	6823      	ldr	r3, [r4, #0]
 8005aec:	f043 0320 	orr.w	r3, r3, #32
 8005af0:	6023      	str	r3, [r4, #0]
 8005af2:	2378      	movs	r3, #120	; 0x78
 8005af4:	4828      	ldr	r0, [pc, #160]	; (8005b98 <_printf_i+0x248>)
 8005af6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005afa:	e7e3      	b.n	8005ac4 <_printf_i+0x174>
 8005afc:	0659      	lsls	r1, r3, #25
 8005afe:	bf48      	it	mi
 8005b00:	b2b6      	uxthmi	r6, r6
 8005b02:	e7e6      	b.n	8005ad2 <_printf_i+0x182>
 8005b04:	4615      	mov	r5, r2
 8005b06:	e7bb      	b.n	8005a80 <_printf_i+0x130>
 8005b08:	682b      	ldr	r3, [r5, #0]
 8005b0a:	6826      	ldr	r6, [r4, #0]
 8005b0c:	6961      	ldr	r1, [r4, #20]
 8005b0e:	1d18      	adds	r0, r3, #4
 8005b10:	6028      	str	r0, [r5, #0]
 8005b12:	0635      	lsls	r5, r6, #24
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	d501      	bpl.n	8005b1c <_printf_i+0x1cc>
 8005b18:	6019      	str	r1, [r3, #0]
 8005b1a:	e002      	b.n	8005b22 <_printf_i+0x1d2>
 8005b1c:	0670      	lsls	r0, r6, #25
 8005b1e:	d5fb      	bpl.n	8005b18 <_printf_i+0x1c8>
 8005b20:	8019      	strh	r1, [r3, #0]
 8005b22:	2300      	movs	r3, #0
 8005b24:	6123      	str	r3, [r4, #16]
 8005b26:	4615      	mov	r5, r2
 8005b28:	e7ba      	b.n	8005aa0 <_printf_i+0x150>
 8005b2a:	682b      	ldr	r3, [r5, #0]
 8005b2c:	1d1a      	adds	r2, r3, #4
 8005b2e:	602a      	str	r2, [r5, #0]
 8005b30:	681d      	ldr	r5, [r3, #0]
 8005b32:	6862      	ldr	r2, [r4, #4]
 8005b34:	2100      	movs	r1, #0
 8005b36:	4628      	mov	r0, r5
 8005b38:	f7fa fb6a 	bl	8000210 <memchr>
 8005b3c:	b108      	cbz	r0, 8005b42 <_printf_i+0x1f2>
 8005b3e:	1b40      	subs	r0, r0, r5
 8005b40:	6060      	str	r0, [r4, #4]
 8005b42:	6863      	ldr	r3, [r4, #4]
 8005b44:	6123      	str	r3, [r4, #16]
 8005b46:	2300      	movs	r3, #0
 8005b48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b4c:	e7a8      	b.n	8005aa0 <_printf_i+0x150>
 8005b4e:	6923      	ldr	r3, [r4, #16]
 8005b50:	462a      	mov	r2, r5
 8005b52:	4649      	mov	r1, r9
 8005b54:	4640      	mov	r0, r8
 8005b56:	47d0      	blx	sl
 8005b58:	3001      	adds	r0, #1
 8005b5a:	d0ab      	beq.n	8005ab4 <_printf_i+0x164>
 8005b5c:	6823      	ldr	r3, [r4, #0]
 8005b5e:	079b      	lsls	r3, r3, #30
 8005b60:	d413      	bmi.n	8005b8a <_printf_i+0x23a>
 8005b62:	68e0      	ldr	r0, [r4, #12]
 8005b64:	9b03      	ldr	r3, [sp, #12]
 8005b66:	4298      	cmp	r0, r3
 8005b68:	bfb8      	it	lt
 8005b6a:	4618      	movlt	r0, r3
 8005b6c:	e7a4      	b.n	8005ab8 <_printf_i+0x168>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	4632      	mov	r2, r6
 8005b72:	4649      	mov	r1, r9
 8005b74:	4640      	mov	r0, r8
 8005b76:	47d0      	blx	sl
 8005b78:	3001      	adds	r0, #1
 8005b7a:	d09b      	beq.n	8005ab4 <_printf_i+0x164>
 8005b7c:	3501      	adds	r5, #1
 8005b7e:	68e3      	ldr	r3, [r4, #12]
 8005b80:	9903      	ldr	r1, [sp, #12]
 8005b82:	1a5b      	subs	r3, r3, r1
 8005b84:	42ab      	cmp	r3, r5
 8005b86:	dcf2      	bgt.n	8005b6e <_printf_i+0x21e>
 8005b88:	e7eb      	b.n	8005b62 <_printf_i+0x212>
 8005b8a:	2500      	movs	r5, #0
 8005b8c:	f104 0619 	add.w	r6, r4, #25
 8005b90:	e7f5      	b.n	8005b7e <_printf_i+0x22e>
 8005b92:	bf00      	nop
 8005b94:	08008e02 	.word	0x08008e02
 8005b98:	08008e13 	.word	0x08008e13

08005b9c <iprintf>:
 8005b9c:	b40f      	push	{r0, r1, r2, r3}
 8005b9e:	4b0a      	ldr	r3, [pc, #40]	; (8005bc8 <iprintf+0x2c>)
 8005ba0:	b513      	push	{r0, r1, r4, lr}
 8005ba2:	681c      	ldr	r4, [r3, #0]
 8005ba4:	b124      	cbz	r4, 8005bb0 <iprintf+0x14>
 8005ba6:	69a3      	ldr	r3, [r4, #24]
 8005ba8:	b913      	cbnz	r3, 8005bb0 <iprintf+0x14>
 8005baa:	4620      	mov	r0, r4
 8005bac:	f000 fee2 	bl	8006974 <__sinit>
 8005bb0:	ab05      	add	r3, sp, #20
 8005bb2:	9a04      	ldr	r2, [sp, #16]
 8005bb4:	68a1      	ldr	r1, [r4, #8]
 8005bb6:	9301      	str	r3, [sp, #4]
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f001 fc2d 	bl	8007418 <_vfiprintf_r>
 8005bbe:	b002      	add	sp, #8
 8005bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bc4:	b004      	add	sp, #16
 8005bc6:	4770      	bx	lr
 8005bc8:	2000000c 	.word	0x2000000c

08005bcc <quorem>:
 8005bcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd0:	6903      	ldr	r3, [r0, #16]
 8005bd2:	690c      	ldr	r4, [r1, #16]
 8005bd4:	42a3      	cmp	r3, r4
 8005bd6:	4607      	mov	r7, r0
 8005bd8:	f2c0 8081 	blt.w	8005cde <quorem+0x112>
 8005bdc:	3c01      	subs	r4, #1
 8005bde:	f101 0814 	add.w	r8, r1, #20
 8005be2:	f100 0514 	add.w	r5, r0, #20
 8005be6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bea:	9301      	str	r3, [sp, #4]
 8005bec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005bf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005bfc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c00:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c04:	d331      	bcc.n	8005c6a <quorem+0x9e>
 8005c06:	f04f 0e00 	mov.w	lr, #0
 8005c0a:	4640      	mov	r0, r8
 8005c0c:	46ac      	mov	ip, r5
 8005c0e:	46f2      	mov	sl, lr
 8005c10:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c14:	b293      	uxth	r3, r2
 8005c16:	fb06 e303 	mla	r3, r6, r3, lr
 8005c1a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	ebaa 0303 	sub.w	r3, sl, r3
 8005c24:	f8dc a000 	ldr.w	sl, [ip]
 8005c28:	0c12      	lsrs	r2, r2, #16
 8005c2a:	fa13 f38a 	uxtah	r3, r3, sl
 8005c2e:	fb06 e202 	mla	r2, r6, r2, lr
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	9b00      	ldr	r3, [sp, #0]
 8005c36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c3a:	b292      	uxth	r2, r2
 8005c3c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005c40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c44:	f8bd 3000 	ldrh.w	r3, [sp]
 8005c48:	4581      	cmp	r9, r0
 8005c4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c4e:	f84c 3b04 	str.w	r3, [ip], #4
 8005c52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c56:	d2db      	bcs.n	8005c10 <quorem+0x44>
 8005c58:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c5c:	b92b      	cbnz	r3, 8005c6a <quorem+0x9e>
 8005c5e:	9b01      	ldr	r3, [sp, #4]
 8005c60:	3b04      	subs	r3, #4
 8005c62:	429d      	cmp	r5, r3
 8005c64:	461a      	mov	r2, r3
 8005c66:	d32e      	bcc.n	8005cc6 <quorem+0xfa>
 8005c68:	613c      	str	r4, [r7, #16]
 8005c6a:	4638      	mov	r0, r7
 8005c6c:	f001 f9b2 	bl	8006fd4 <__mcmp>
 8005c70:	2800      	cmp	r0, #0
 8005c72:	db24      	blt.n	8005cbe <quorem+0xf2>
 8005c74:	3601      	adds	r6, #1
 8005c76:	4628      	mov	r0, r5
 8005c78:	f04f 0c00 	mov.w	ip, #0
 8005c7c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c80:	f8d0 e000 	ldr.w	lr, [r0]
 8005c84:	b293      	uxth	r3, r2
 8005c86:	ebac 0303 	sub.w	r3, ip, r3
 8005c8a:	0c12      	lsrs	r2, r2, #16
 8005c8c:	fa13 f38e 	uxtah	r3, r3, lr
 8005c90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005c94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c9e:	45c1      	cmp	r9, r8
 8005ca0:	f840 3b04 	str.w	r3, [r0], #4
 8005ca4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005ca8:	d2e8      	bcs.n	8005c7c <quorem+0xb0>
 8005caa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cb2:	b922      	cbnz	r2, 8005cbe <quorem+0xf2>
 8005cb4:	3b04      	subs	r3, #4
 8005cb6:	429d      	cmp	r5, r3
 8005cb8:	461a      	mov	r2, r3
 8005cba:	d30a      	bcc.n	8005cd2 <quorem+0x106>
 8005cbc:	613c      	str	r4, [r7, #16]
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	b003      	add	sp, #12
 8005cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc6:	6812      	ldr	r2, [r2, #0]
 8005cc8:	3b04      	subs	r3, #4
 8005cca:	2a00      	cmp	r2, #0
 8005ccc:	d1cc      	bne.n	8005c68 <quorem+0x9c>
 8005cce:	3c01      	subs	r4, #1
 8005cd0:	e7c7      	b.n	8005c62 <quorem+0x96>
 8005cd2:	6812      	ldr	r2, [r2, #0]
 8005cd4:	3b04      	subs	r3, #4
 8005cd6:	2a00      	cmp	r2, #0
 8005cd8:	d1f0      	bne.n	8005cbc <quorem+0xf0>
 8005cda:	3c01      	subs	r4, #1
 8005cdc:	e7eb      	b.n	8005cb6 <quorem+0xea>
 8005cde:	2000      	movs	r0, #0
 8005ce0:	e7ee      	b.n	8005cc0 <quorem+0xf4>
 8005ce2:	0000      	movs	r0, r0
 8005ce4:	0000      	movs	r0, r0
	...

08005ce8 <_dtoa_r>:
 8005ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cec:	ed2d 8b04 	vpush	{d8-d9}
 8005cf0:	ec57 6b10 	vmov	r6, r7, d0
 8005cf4:	b093      	sub	sp, #76	; 0x4c
 8005cf6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005cf8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005cfc:	9106      	str	r1, [sp, #24]
 8005cfe:	ee10 aa10 	vmov	sl, s0
 8005d02:	4604      	mov	r4, r0
 8005d04:	9209      	str	r2, [sp, #36]	; 0x24
 8005d06:	930c      	str	r3, [sp, #48]	; 0x30
 8005d08:	46bb      	mov	fp, r7
 8005d0a:	b975      	cbnz	r5, 8005d2a <_dtoa_r+0x42>
 8005d0c:	2010      	movs	r0, #16
 8005d0e:	f000 fed7 	bl	8006ac0 <malloc>
 8005d12:	4602      	mov	r2, r0
 8005d14:	6260      	str	r0, [r4, #36]	; 0x24
 8005d16:	b920      	cbnz	r0, 8005d22 <_dtoa_r+0x3a>
 8005d18:	4ba7      	ldr	r3, [pc, #668]	; (8005fb8 <_dtoa_r+0x2d0>)
 8005d1a:	21ea      	movs	r1, #234	; 0xea
 8005d1c:	48a7      	ldr	r0, [pc, #668]	; (8005fbc <_dtoa_r+0x2d4>)
 8005d1e:	f001 fdd1 	bl	80078c4 <__assert_func>
 8005d22:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d26:	6005      	str	r5, [r0, #0]
 8005d28:	60c5      	str	r5, [r0, #12]
 8005d2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d2c:	6819      	ldr	r1, [r3, #0]
 8005d2e:	b151      	cbz	r1, 8005d46 <_dtoa_r+0x5e>
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	604a      	str	r2, [r1, #4]
 8005d34:	2301      	movs	r3, #1
 8005d36:	4093      	lsls	r3, r2
 8005d38:	608b      	str	r3, [r1, #8]
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	f000 ff08 	bl	8006b50 <_Bfree>
 8005d40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d42:	2200      	movs	r2, #0
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	1e3b      	subs	r3, r7, #0
 8005d48:	bfaa      	itet	ge
 8005d4a:	2300      	movge	r3, #0
 8005d4c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005d50:	f8c8 3000 	strge.w	r3, [r8]
 8005d54:	4b9a      	ldr	r3, [pc, #616]	; (8005fc0 <_dtoa_r+0x2d8>)
 8005d56:	bfbc      	itt	lt
 8005d58:	2201      	movlt	r2, #1
 8005d5a:	f8c8 2000 	strlt.w	r2, [r8]
 8005d5e:	ea33 030b 	bics.w	r3, r3, fp
 8005d62:	d11b      	bne.n	8005d9c <_dtoa_r+0xb4>
 8005d64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d66:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d6a:	6013      	str	r3, [r2, #0]
 8005d6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005d70:	4333      	orrs	r3, r6
 8005d72:	f000 8592 	beq.w	800689a <_dtoa_r+0xbb2>
 8005d76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d78:	b963      	cbnz	r3, 8005d94 <_dtoa_r+0xac>
 8005d7a:	4b92      	ldr	r3, [pc, #584]	; (8005fc4 <_dtoa_r+0x2dc>)
 8005d7c:	e022      	b.n	8005dc4 <_dtoa_r+0xdc>
 8005d7e:	4b92      	ldr	r3, [pc, #584]	; (8005fc8 <_dtoa_r+0x2e0>)
 8005d80:	9301      	str	r3, [sp, #4]
 8005d82:	3308      	adds	r3, #8
 8005d84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d86:	6013      	str	r3, [r2, #0]
 8005d88:	9801      	ldr	r0, [sp, #4]
 8005d8a:	b013      	add	sp, #76	; 0x4c
 8005d8c:	ecbd 8b04 	vpop	{d8-d9}
 8005d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d94:	4b8b      	ldr	r3, [pc, #556]	; (8005fc4 <_dtoa_r+0x2dc>)
 8005d96:	9301      	str	r3, [sp, #4]
 8005d98:	3303      	adds	r3, #3
 8005d9a:	e7f3      	b.n	8005d84 <_dtoa_r+0x9c>
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	2300      	movs	r3, #0
 8005da0:	4650      	mov	r0, sl
 8005da2:	4659      	mov	r1, fp
 8005da4:	f7fa fea8 	bl	8000af8 <__aeabi_dcmpeq>
 8005da8:	ec4b ab19 	vmov	d9, sl, fp
 8005dac:	4680      	mov	r8, r0
 8005dae:	b158      	cbz	r0, 8005dc8 <_dtoa_r+0xe0>
 8005db0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005db2:	2301      	movs	r3, #1
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 856b 	beq.w	8006894 <_dtoa_r+0xbac>
 8005dbe:	4883      	ldr	r0, [pc, #524]	; (8005fcc <_dtoa_r+0x2e4>)
 8005dc0:	6018      	str	r0, [r3, #0]
 8005dc2:	1e43      	subs	r3, r0, #1
 8005dc4:	9301      	str	r3, [sp, #4]
 8005dc6:	e7df      	b.n	8005d88 <_dtoa_r+0xa0>
 8005dc8:	ec4b ab10 	vmov	d0, sl, fp
 8005dcc:	aa10      	add	r2, sp, #64	; 0x40
 8005dce:	a911      	add	r1, sp, #68	; 0x44
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	f001 f9a5 	bl	8007120 <__d2b>
 8005dd6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005dda:	ee08 0a10 	vmov	s16, r0
 8005dde:	2d00      	cmp	r5, #0
 8005de0:	f000 8084 	beq.w	8005eec <_dtoa_r+0x204>
 8005de4:	ee19 3a90 	vmov	r3, s19
 8005de8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005df0:	4656      	mov	r6, sl
 8005df2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005df6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005dfa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005dfe:	4b74      	ldr	r3, [pc, #464]	; (8005fd0 <_dtoa_r+0x2e8>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	4630      	mov	r0, r6
 8005e04:	4639      	mov	r1, r7
 8005e06:	f7fa fa57 	bl	80002b8 <__aeabi_dsub>
 8005e0a:	a365      	add	r3, pc, #404	; (adr r3, 8005fa0 <_dtoa_r+0x2b8>)
 8005e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e10:	f7fa fc0a 	bl	8000628 <__aeabi_dmul>
 8005e14:	a364      	add	r3, pc, #400	; (adr r3, 8005fa8 <_dtoa_r+0x2c0>)
 8005e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1a:	f7fa fa4f 	bl	80002bc <__adddf3>
 8005e1e:	4606      	mov	r6, r0
 8005e20:	4628      	mov	r0, r5
 8005e22:	460f      	mov	r7, r1
 8005e24:	f7fa fb96 	bl	8000554 <__aeabi_i2d>
 8005e28:	a361      	add	r3, pc, #388	; (adr r3, 8005fb0 <_dtoa_r+0x2c8>)
 8005e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2e:	f7fa fbfb 	bl	8000628 <__aeabi_dmul>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	4630      	mov	r0, r6
 8005e38:	4639      	mov	r1, r7
 8005e3a:	f7fa fa3f 	bl	80002bc <__adddf3>
 8005e3e:	4606      	mov	r6, r0
 8005e40:	460f      	mov	r7, r1
 8005e42:	f7fa fea1 	bl	8000b88 <__aeabi_d2iz>
 8005e46:	2200      	movs	r2, #0
 8005e48:	9000      	str	r0, [sp, #0]
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	4639      	mov	r1, r7
 8005e50:	f7fa fe5c 	bl	8000b0c <__aeabi_dcmplt>
 8005e54:	b150      	cbz	r0, 8005e6c <_dtoa_r+0x184>
 8005e56:	9800      	ldr	r0, [sp, #0]
 8005e58:	f7fa fb7c 	bl	8000554 <__aeabi_i2d>
 8005e5c:	4632      	mov	r2, r6
 8005e5e:	463b      	mov	r3, r7
 8005e60:	f7fa fe4a 	bl	8000af8 <__aeabi_dcmpeq>
 8005e64:	b910      	cbnz	r0, 8005e6c <_dtoa_r+0x184>
 8005e66:	9b00      	ldr	r3, [sp, #0]
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	9b00      	ldr	r3, [sp, #0]
 8005e6e:	2b16      	cmp	r3, #22
 8005e70:	d85a      	bhi.n	8005f28 <_dtoa_r+0x240>
 8005e72:	9a00      	ldr	r2, [sp, #0]
 8005e74:	4b57      	ldr	r3, [pc, #348]	; (8005fd4 <_dtoa_r+0x2ec>)
 8005e76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7e:	ec51 0b19 	vmov	r0, r1, d9
 8005e82:	f7fa fe43 	bl	8000b0c <__aeabi_dcmplt>
 8005e86:	2800      	cmp	r0, #0
 8005e88:	d050      	beq.n	8005f2c <_dtoa_r+0x244>
 8005e8a:	9b00      	ldr	r3, [sp, #0]
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	2300      	movs	r3, #0
 8005e92:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e96:	1b5d      	subs	r5, r3, r5
 8005e98:	1e6b      	subs	r3, r5, #1
 8005e9a:	9305      	str	r3, [sp, #20]
 8005e9c:	bf45      	ittet	mi
 8005e9e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005ea2:	9304      	strmi	r3, [sp, #16]
 8005ea4:	2300      	movpl	r3, #0
 8005ea6:	2300      	movmi	r3, #0
 8005ea8:	bf4c      	ite	mi
 8005eaa:	9305      	strmi	r3, [sp, #20]
 8005eac:	9304      	strpl	r3, [sp, #16]
 8005eae:	9b00      	ldr	r3, [sp, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	db3d      	blt.n	8005f30 <_dtoa_r+0x248>
 8005eb4:	9b05      	ldr	r3, [sp, #20]
 8005eb6:	9a00      	ldr	r2, [sp, #0]
 8005eb8:	920a      	str	r2, [sp, #40]	; 0x28
 8005eba:	4413      	add	r3, r2
 8005ebc:	9305      	str	r3, [sp, #20]
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	9307      	str	r3, [sp, #28]
 8005ec2:	9b06      	ldr	r3, [sp, #24]
 8005ec4:	2b09      	cmp	r3, #9
 8005ec6:	f200 8089 	bhi.w	8005fdc <_dtoa_r+0x2f4>
 8005eca:	2b05      	cmp	r3, #5
 8005ecc:	bfc4      	itt	gt
 8005ece:	3b04      	subgt	r3, #4
 8005ed0:	9306      	strgt	r3, [sp, #24]
 8005ed2:	9b06      	ldr	r3, [sp, #24]
 8005ed4:	f1a3 0302 	sub.w	r3, r3, #2
 8005ed8:	bfcc      	ite	gt
 8005eda:	2500      	movgt	r5, #0
 8005edc:	2501      	movle	r5, #1
 8005ede:	2b03      	cmp	r3, #3
 8005ee0:	f200 8087 	bhi.w	8005ff2 <_dtoa_r+0x30a>
 8005ee4:	e8df f003 	tbb	[pc, r3]
 8005ee8:	59383a2d 	.word	0x59383a2d
 8005eec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005ef0:	441d      	add	r5, r3
 8005ef2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005ef6:	2b20      	cmp	r3, #32
 8005ef8:	bfc1      	itttt	gt
 8005efa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005efe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005f02:	fa0b f303 	lslgt.w	r3, fp, r3
 8005f06:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005f0a:	bfda      	itte	le
 8005f0c:	f1c3 0320 	rsble	r3, r3, #32
 8005f10:	fa06 f003 	lslle.w	r0, r6, r3
 8005f14:	4318      	orrgt	r0, r3
 8005f16:	f7fa fb0d 	bl	8000534 <__aeabi_ui2d>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	4606      	mov	r6, r0
 8005f1e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005f22:	3d01      	subs	r5, #1
 8005f24:	930e      	str	r3, [sp, #56]	; 0x38
 8005f26:	e76a      	b.n	8005dfe <_dtoa_r+0x116>
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e7b2      	b.n	8005e92 <_dtoa_r+0x1aa>
 8005f2c:	900b      	str	r0, [sp, #44]	; 0x2c
 8005f2e:	e7b1      	b.n	8005e94 <_dtoa_r+0x1ac>
 8005f30:	9b04      	ldr	r3, [sp, #16]
 8005f32:	9a00      	ldr	r2, [sp, #0]
 8005f34:	1a9b      	subs	r3, r3, r2
 8005f36:	9304      	str	r3, [sp, #16]
 8005f38:	4253      	negs	r3, r2
 8005f3a:	9307      	str	r3, [sp, #28]
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	930a      	str	r3, [sp, #40]	; 0x28
 8005f40:	e7bf      	b.n	8005ec2 <_dtoa_r+0x1da>
 8005f42:	2300      	movs	r3, #0
 8005f44:	9308      	str	r3, [sp, #32]
 8005f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	dc55      	bgt.n	8005ff8 <_dtoa_r+0x310>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005f52:	461a      	mov	r2, r3
 8005f54:	9209      	str	r2, [sp, #36]	; 0x24
 8005f56:	e00c      	b.n	8005f72 <_dtoa_r+0x28a>
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e7f3      	b.n	8005f44 <_dtoa_r+0x25c>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f60:	9308      	str	r3, [sp, #32]
 8005f62:	9b00      	ldr	r3, [sp, #0]
 8005f64:	4413      	add	r3, r2
 8005f66:	9302      	str	r3, [sp, #8]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	9303      	str	r3, [sp, #12]
 8005f6e:	bfb8      	it	lt
 8005f70:	2301      	movlt	r3, #1
 8005f72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005f74:	2200      	movs	r2, #0
 8005f76:	6042      	str	r2, [r0, #4]
 8005f78:	2204      	movs	r2, #4
 8005f7a:	f102 0614 	add.w	r6, r2, #20
 8005f7e:	429e      	cmp	r6, r3
 8005f80:	6841      	ldr	r1, [r0, #4]
 8005f82:	d93d      	bls.n	8006000 <_dtoa_r+0x318>
 8005f84:	4620      	mov	r0, r4
 8005f86:	f000 fda3 	bl	8006ad0 <_Balloc>
 8005f8a:	9001      	str	r0, [sp, #4]
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	d13b      	bne.n	8006008 <_dtoa_r+0x320>
 8005f90:	4b11      	ldr	r3, [pc, #68]	; (8005fd8 <_dtoa_r+0x2f0>)
 8005f92:	4602      	mov	r2, r0
 8005f94:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005f98:	e6c0      	b.n	8005d1c <_dtoa_r+0x34>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e7df      	b.n	8005f5e <_dtoa_r+0x276>
 8005f9e:	bf00      	nop
 8005fa0:	636f4361 	.word	0x636f4361
 8005fa4:	3fd287a7 	.word	0x3fd287a7
 8005fa8:	8b60c8b3 	.word	0x8b60c8b3
 8005fac:	3fc68a28 	.word	0x3fc68a28
 8005fb0:	509f79fb 	.word	0x509f79fb
 8005fb4:	3fd34413 	.word	0x3fd34413
 8005fb8:	08008e31 	.word	0x08008e31
 8005fbc:	08008e48 	.word	0x08008e48
 8005fc0:	7ff00000 	.word	0x7ff00000
 8005fc4:	08008e2d 	.word	0x08008e2d
 8005fc8:	08008e24 	.word	0x08008e24
 8005fcc:	08008e01 	.word	0x08008e01
 8005fd0:	3ff80000 	.word	0x3ff80000
 8005fd4:	08008f98 	.word	0x08008f98
 8005fd8:	08008ea3 	.word	0x08008ea3
 8005fdc:	2501      	movs	r5, #1
 8005fde:	2300      	movs	r3, #0
 8005fe0:	9306      	str	r3, [sp, #24]
 8005fe2:	9508      	str	r5, [sp, #32]
 8005fe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fe8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005fec:	2200      	movs	r2, #0
 8005fee:	2312      	movs	r3, #18
 8005ff0:	e7b0      	b.n	8005f54 <_dtoa_r+0x26c>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	9308      	str	r3, [sp, #32]
 8005ff6:	e7f5      	b.n	8005fe4 <_dtoa_r+0x2fc>
 8005ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ffa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005ffe:	e7b8      	b.n	8005f72 <_dtoa_r+0x28a>
 8006000:	3101      	adds	r1, #1
 8006002:	6041      	str	r1, [r0, #4]
 8006004:	0052      	lsls	r2, r2, #1
 8006006:	e7b8      	b.n	8005f7a <_dtoa_r+0x292>
 8006008:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800600a:	9a01      	ldr	r2, [sp, #4]
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	9b03      	ldr	r3, [sp, #12]
 8006010:	2b0e      	cmp	r3, #14
 8006012:	f200 809d 	bhi.w	8006150 <_dtoa_r+0x468>
 8006016:	2d00      	cmp	r5, #0
 8006018:	f000 809a 	beq.w	8006150 <_dtoa_r+0x468>
 800601c:	9b00      	ldr	r3, [sp, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	dd32      	ble.n	8006088 <_dtoa_r+0x3a0>
 8006022:	4ab7      	ldr	r2, [pc, #732]	; (8006300 <_dtoa_r+0x618>)
 8006024:	f003 030f 	and.w	r3, r3, #15
 8006028:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800602c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006030:	9b00      	ldr	r3, [sp, #0]
 8006032:	05d8      	lsls	r0, r3, #23
 8006034:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006038:	d516      	bpl.n	8006068 <_dtoa_r+0x380>
 800603a:	4bb2      	ldr	r3, [pc, #712]	; (8006304 <_dtoa_r+0x61c>)
 800603c:	ec51 0b19 	vmov	r0, r1, d9
 8006040:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006044:	f7fa fc1a 	bl	800087c <__aeabi_ddiv>
 8006048:	f007 070f 	and.w	r7, r7, #15
 800604c:	4682      	mov	sl, r0
 800604e:	468b      	mov	fp, r1
 8006050:	2503      	movs	r5, #3
 8006052:	4eac      	ldr	r6, [pc, #688]	; (8006304 <_dtoa_r+0x61c>)
 8006054:	b957      	cbnz	r7, 800606c <_dtoa_r+0x384>
 8006056:	4642      	mov	r2, r8
 8006058:	464b      	mov	r3, r9
 800605a:	4650      	mov	r0, sl
 800605c:	4659      	mov	r1, fp
 800605e:	f7fa fc0d 	bl	800087c <__aeabi_ddiv>
 8006062:	4682      	mov	sl, r0
 8006064:	468b      	mov	fp, r1
 8006066:	e028      	b.n	80060ba <_dtoa_r+0x3d2>
 8006068:	2502      	movs	r5, #2
 800606a:	e7f2      	b.n	8006052 <_dtoa_r+0x36a>
 800606c:	07f9      	lsls	r1, r7, #31
 800606e:	d508      	bpl.n	8006082 <_dtoa_r+0x39a>
 8006070:	4640      	mov	r0, r8
 8006072:	4649      	mov	r1, r9
 8006074:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006078:	f7fa fad6 	bl	8000628 <__aeabi_dmul>
 800607c:	3501      	adds	r5, #1
 800607e:	4680      	mov	r8, r0
 8006080:	4689      	mov	r9, r1
 8006082:	107f      	asrs	r7, r7, #1
 8006084:	3608      	adds	r6, #8
 8006086:	e7e5      	b.n	8006054 <_dtoa_r+0x36c>
 8006088:	f000 809b 	beq.w	80061c2 <_dtoa_r+0x4da>
 800608c:	9b00      	ldr	r3, [sp, #0]
 800608e:	4f9d      	ldr	r7, [pc, #628]	; (8006304 <_dtoa_r+0x61c>)
 8006090:	425e      	negs	r6, r3
 8006092:	4b9b      	ldr	r3, [pc, #620]	; (8006300 <_dtoa_r+0x618>)
 8006094:	f006 020f 	and.w	r2, r6, #15
 8006098:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800609c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a0:	ec51 0b19 	vmov	r0, r1, d9
 80060a4:	f7fa fac0 	bl	8000628 <__aeabi_dmul>
 80060a8:	1136      	asrs	r6, r6, #4
 80060aa:	4682      	mov	sl, r0
 80060ac:	468b      	mov	fp, r1
 80060ae:	2300      	movs	r3, #0
 80060b0:	2502      	movs	r5, #2
 80060b2:	2e00      	cmp	r6, #0
 80060b4:	d17a      	bne.n	80061ac <_dtoa_r+0x4c4>
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1d3      	bne.n	8006062 <_dtoa_r+0x37a>
 80060ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 8082 	beq.w	80061c6 <_dtoa_r+0x4de>
 80060c2:	4b91      	ldr	r3, [pc, #580]	; (8006308 <_dtoa_r+0x620>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	4650      	mov	r0, sl
 80060c8:	4659      	mov	r1, fp
 80060ca:	f7fa fd1f 	bl	8000b0c <__aeabi_dcmplt>
 80060ce:	2800      	cmp	r0, #0
 80060d0:	d079      	beq.n	80061c6 <_dtoa_r+0x4de>
 80060d2:	9b03      	ldr	r3, [sp, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d076      	beq.n	80061c6 <_dtoa_r+0x4de>
 80060d8:	9b02      	ldr	r3, [sp, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	dd36      	ble.n	800614c <_dtoa_r+0x464>
 80060de:	9b00      	ldr	r3, [sp, #0]
 80060e0:	4650      	mov	r0, sl
 80060e2:	4659      	mov	r1, fp
 80060e4:	1e5f      	subs	r7, r3, #1
 80060e6:	2200      	movs	r2, #0
 80060e8:	4b88      	ldr	r3, [pc, #544]	; (800630c <_dtoa_r+0x624>)
 80060ea:	f7fa fa9d 	bl	8000628 <__aeabi_dmul>
 80060ee:	9e02      	ldr	r6, [sp, #8]
 80060f0:	4682      	mov	sl, r0
 80060f2:	468b      	mov	fp, r1
 80060f4:	3501      	adds	r5, #1
 80060f6:	4628      	mov	r0, r5
 80060f8:	f7fa fa2c 	bl	8000554 <__aeabi_i2d>
 80060fc:	4652      	mov	r2, sl
 80060fe:	465b      	mov	r3, fp
 8006100:	f7fa fa92 	bl	8000628 <__aeabi_dmul>
 8006104:	4b82      	ldr	r3, [pc, #520]	; (8006310 <_dtoa_r+0x628>)
 8006106:	2200      	movs	r2, #0
 8006108:	f7fa f8d8 	bl	80002bc <__adddf3>
 800610c:	46d0      	mov	r8, sl
 800610e:	46d9      	mov	r9, fp
 8006110:	4682      	mov	sl, r0
 8006112:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006116:	2e00      	cmp	r6, #0
 8006118:	d158      	bne.n	80061cc <_dtoa_r+0x4e4>
 800611a:	4b7e      	ldr	r3, [pc, #504]	; (8006314 <_dtoa_r+0x62c>)
 800611c:	2200      	movs	r2, #0
 800611e:	4640      	mov	r0, r8
 8006120:	4649      	mov	r1, r9
 8006122:	f7fa f8c9 	bl	80002b8 <__aeabi_dsub>
 8006126:	4652      	mov	r2, sl
 8006128:	465b      	mov	r3, fp
 800612a:	4680      	mov	r8, r0
 800612c:	4689      	mov	r9, r1
 800612e:	f7fa fd0b 	bl	8000b48 <__aeabi_dcmpgt>
 8006132:	2800      	cmp	r0, #0
 8006134:	f040 8295 	bne.w	8006662 <_dtoa_r+0x97a>
 8006138:	4652      	mov	r2, sl
 800613a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800613e:	4640      	mov	r0, r8
 8006140:	4649      	mov	r1, r9
 8006142:	f7fa fce3 	bl	8000b0c <__aeabi_dcmplt>
 8006146:	2800      	cmp	r0, #0
 8006148:	f040 8289 	bne.w	800665e <_dtoa_r+0x976>
 800614c:	ec5b ab19 	vmov	sl, fp, d9
 8006150:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006152:	2b00      	cmp	r3, #0
 8006154:	f2c0 8148 	blt.w	80063e8 <_dtoa_r+0x700>
 8006158:	9a00      	ldr	r2, [sp, #0]
 800615a:	2a0e      	cmp	r2, #14
 800615c:	f300 8144 	bgt.w	80063e8 <_dtoa_r+0x700>
 8006160:	4b67      	ldr	r3, [pc, #412]	; (8006300 <_dtoa_r+0x618>)
 8006162:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006166:	e9d3 8900 	ldrd	r8, r9, [r3]
 800616a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800616c:	2b00      	cmp	r3, #0
 800616e:	f280 80d5 	bge.w	800631c <_dtoa_r+0x634>
 8006172:	9b03      	ldr	r3, [sp, #12]
 8006174:	2b00      	cmp	r3, #0
 8006176:	f300 80d1 	bgt.w	800631c <_dtoa_r+0x634>
 800617a:	f040 826f 	bne.w	800665c <_dtoa_r+0x974>
 800617e:	4b65      	ldr	r3, [pc, #404]	; (8006314 <_dtoa_r+0x62c>)
 8006180:	2200      	movs	r2, #0
 8006182:	4640      	mov	r0, r8
 8006184:	4649      	mov	r1, r9
 8006186:	f7fa fa4f 	bl	8000628 <__aeabi_dmul>
 800618a:	4652      	mov	r2, sl
 800618c:	465b      	mov	r3, fp
 800618e:	f7fa fcd1 	bl	8000b34 <__aeabi_dcmpge>
 8006192:	9e03      	ldr	r6, [sp, #12]
 8006194:	4637      	mov	r7, r6
 8006196:	2800      	cmp	r0, #0
 8006198:	f040 8245 	bne.w	8006626 <_dtoa_r+0x93e>
 800619c:	9d01      	ldr	r5, [sp, #4]
 800619e:	2331      	movs	r3, #49	; 0x31
 80061a0:	f805 3b01 	strb.w	r3, [r5], #1
 80061a4:	9b00      	ldr	r3, [sp, #0]
 80061a6:	3301      	adds	r3, #1
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	e240      	b.n	800662e <_dtoa_r+0x946>
 80061ac:	07f2      	lsls	r2, r6, #31
 80061ae:	d505      	bpl.n	80061bc <_dtoa_r+0x4d4>
 80061b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061b4:	f7fa fa38 	bl	8000628 <__aeabi_dmul>
 80061b8:	3501      	adds	r5, #1
 80061ba:	2301      	movs	r3, #1
 80061bc:	1076      	asrs	r6, r6, #1
 80061be:	3708      	adds	r7, #8
 80061c0:	e777      	b.n	80060b2 <_dtoa_r+0x3ca>
 80061c2:	2502      	movs	r5, #2
 80061c4:	e779      	b.n	80060ba <_dtoa_r+0x3d2>
 80061c6:	9f00      	ldr	r7, [sp, #0]
 80061c8:	9e03      	ldr	r6, [sp, #12]
 80061ca:	e794      	b.n	80060f6 <_dtoa_r+0x40e>
 80061cc:	9901      	ldr	r1, [sp, #4]
 80061ce:	4b4c      	ldr	r3, [pc, #304]	; (8006300 <_dtoa_r+0x618>)
 80061d0:	4431      	add	r1, r6
 80061d2:	910d      	str	r1, [sp, #52]	; 0x34
 80061d4:	9908      	ldr	r1, [sp, #32]
 80061d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80061da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80061de:	2900      	cmp	r1, #0
 80061e0:	d043      	beq.n	800626a <_dtoa_r+0x582>
 80061e2:	494d      	ldr	r1, [pc, #308]	; (8006318 <_dtoa_r+0x630>)
 80061e4:	2000      	movs	r0, #0
 80061e6:	f7fa fb49 	bl	800087c <__aeabi_ddiv>
 80061ea:	4652      	mov	r2, sl
 80061ec:	465b      	mov	r3, fp
 80061ee:	f7fa f863 	bl	80002b8 <__aeabi_dsub>
 80061f2:	9d01      	ldr	r5, [sp, #4]
 80061f4:	4682      	mov	sl, r0
 80061f6:	468b      	mov	fp, r1
 80061f8:	4649      	mov	r1, r9
 80061fa:	4640      	mov	r0, r8
 80061fc:	f7fa fcc4 	bl	8000b88 <__aeabi_d2iz>
 8006200:	4606      	mov	r6, r0
 8006202:	f7fa f9a7 	bl	8000554 <__aeabi_i2d>
 8006206:	4602      	mov	r2, r0
 8006208:	460b      	mov	r3, r1
 800620a:	4640      	mov	r0, r8
 800620c:	4649      	mov	r1, r9
 800620e:	f7fa f853 	bl	80002b8 <__aeabi_dsub>
 8006212:	3630      	adds	r6, #48	; 0x30
 8006214:	f805 6b01 	strb.w	r6, [r5], #1
 8006218:	4652      	mov	r2, sl
 800621a:	465b      	mov	r3, fp
 800621c:	4680      	mov	r8, r0
 800621e:	4689      	mov	r9, r1
 8006220:	f7fa fc74 	bl	8000b0c <__aeabi_dcmplt>
 8006224:	2800      	cmp	r0, #0
 8006226:	d163      	bne.n	80062f0 <_dtoa_r+0x608>
 8006228:	4642      	mov	r2, r8
 800622a:	464b      	mov	r3, r9
 800622c:	4936      	ldr	r1, [pc, #216]	; (8006308 <_dtoa_r+0x620>)
 800622e:	2000      	movs	r0, #0
 8006230:	f7fa f842 	bl	80002b8 <__aeabi_dsub>
 8006234:	4652      	mov	r2, sl
 8006236:	465b      	mov	r3, fp
 8006238:	f7fa fc68 	bl	8000b0c <__aeabi_dcmplt>
 800623c:	2800      	cmp	r0, #0
 800623e:	f040 80b5 	bne.w	80063ac <_dtoa_r+0x6c4>
 8006242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006244:	429d      	cmp	r5, r3
 8006246:	d081      	beq.n	800614c <_dtoa_r+0x464>
 8006248:	4b30      	ldr	r3, [pc, #192]	; (800630c <_dtoa_r+0x624>)
 800624a:	2200      	movs	r2, #0
 800624c:	4650      	mov	r0, sl
 800624e:	4659      	mov	r1, fp
 8006250:	f7fa f9ea 	bl	8000628 <__aeabi_dmul>
 8006254:	4b2d      	ldr	r3, [pc, #180]	; (800630c <_dtoa_r+0x624>)
 8006256:	4682      	mov	sl, r0
 8006258:	468b      	mov	fp, r1
 800625a:	4640      	mov	r0, r8
 800625c:	4649      	mov	r1, r9
 800625e:	2200      	movs	r2, #0
 8006260:	f7fa f9e2 	bl	8000628 <__aeabi_dmul>
 8006264:	4680      	mov	r8, r0
 8006266:	4689      	mov	r9, r1
 8006268:	e7c6      	b.n	80061f8 <_dtoa_r+0x510>
 800626a:	4650      	mov	r0, sl
 800626c:	4659      	mov	r1, fp
 800626e:	f7fa f9db 	bl	8000628 <__aeabi_dmul>
 8006272:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006274:	9d01      	ldr	r5, [sp, #4]
 8006276:	930f      	str	r3, [sp, #60]	; 0x3c
 8006278:	4682      	mov	sl, r0
 800627a:	468b      	mov	fp, r1
 800627c:	4649      	mov	r1, r9
 800627e:	4640      	mov	r0, r8
 8006280:	f7fa fc82 	bl	8000b88 <__aeabi_d2iz>
 8006284:	4606      	mov	r6, r0
 8006286:	f7fa f965 	bl	8000554 <__aeabi_i2d>
 800628a:	3630      	adds	r6, #48	; 0x30
 800628c:	4602      	mov	r2, r0
 800628e:	460b      	mov	r3, r1
 8006290:	4640      	mov	r0, r8
 8006292:	4649      	mov	r1, r9
 8006294:	f7fa f810 	bl	80002b8 <__aeabi_dsub>
 8006298:	f805 6b01 	strb.w	r6, [r5], #1
 800629c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800629e:	429d      	cmp	r5, r3
 80062a0:	4680      	mov	r8, r0
 80062a2:	4689      	mov	r9, r1
 80062a4:	f04f 0200 	mov.w	r2, #0
 80062a8:	d124      	bne.n	80062f4 <_dtoa_r+0x60c>
 80062aa:	4b1b      	ldr	r3, [pc, #108]	; (8006318 <_dtoa_r+0x630>)
 80062ac:	4650      	mov	r0, sl
 80062ae:	4659      	mov	r1, fp
 80062b0:	f7fa f804 	bl	80002bc <__adddf3>
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	4640      	mov	r0, r8
 80062ba:	4649      	mov	r1, r9
 80062bc:	f7fa fc44 	bl	8000b48 <__aeabi_dcmpgt>
 80062c0:	2800      	cmp	r0, #0
 80062c2:	d173      	bne.n	80063ac <_dtoa_r+0x6c4>
 80062c4:	4652      	mov	r2, sl
 80062c6:	465b      	mov	r3, fp
 80062c8:	4913      	ldr	r1, [pc, #76]	; (8006318 <_dtoa_r+0x630>)
 80062ca:	2000      	movs	r0, #0
 80062cc:	f7f9 fff4 	bl	80002b8 <__aeabi_dsub>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	4640      	mov	r0, r8
 80062d6:	4649      	mov	r1, r9
 80062d8:	f7fa fc18 	bl	8000b0c <__aeabi_dcmplt>
 80062dc:	2800      	cmp	r0, #0
 80062de:	f43f af35 	beq.w	800614c <_dtoa_r+0x464>
 80062e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80062e4:	1e6b      	subs	r3, r5, #1
 80062e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80062e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80062ec:	2b30      	cmp	r3, #48	; 0x30
 80062ee:	d0f8      	beq.n	80062e2 <_dtoa_r+0x5fa>
 80062f0:	9700      	str	r7, [sp, #0]
 80062f2:	e049      	b.n	8006388 <_dtoa_r+0x6a0>
 80062f4:	4b05      	ldr	r3, [pc, #20]	; (800630c <_dtoa_r+0x624>)
 80062f6:	f7fa f997 	bl	8000628 <__aeabi_dmul>
 80062fa:	4680      	mov	r8, r0
 80062fc:	4689      	mov	r9, r1
 80062fe:	e7bd      	b.n	800627c <_dtoa_r+0x594>
 8006300:	08008f98 	.word	0x08008f98
 8006304:	08008f70 	.word	0x08008f70
 8006308:	3ff00000 	.word	0x3ff00000
 800630c:	40240000 	.word	0x40240000
 8006310:	401c0000 	.word	0x401c0000
 8006314:	40140000 	.word	0x40140000
 8006318:	3fe00000 	.word	0x3fe00000
 800631c:	9d01      	ldr	r5, [sp, #4]
 800631e:	4656      	mov	r6, sl
 8006320:	465f      	mov	r7, fp
 8006322:	4642      	mov	r2, r8
 8006324:	464b      	mov	r3, r9
 8006326:	4630      	mov	r0, r6
 8006328:	4639      	mov	r1, r7
 800632a:	f7fa faa7 	bl	800087c <__aeabi_ddiv>
 800632e:	f7fa fc2b 	bl	8000b88 <__aeabi_d2iz>
 8006332:	4682      	mov	sl, r0
 8006334:	f7fa f90e 	bl	8000554 <__aeabi_i2d>
 8006338:	4642      	mov	r2, r8
 800633a:	464b      	mov	r3, r9
 800633c:	f7fa f974 	bl	8000628 <__aeabi_dmul>
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	4630      	mov	r0, r6
 8006346:	4639      	mov	r1, r7
 8006348:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800634c:	f7f9 ffb4 	bl	80002b8 <__aeabi_dsub>
 8006350:	f805 6b01 	strb.w	r6, [r5], #1
 8006354:	9e01      	ldr	r6, [sp, #4]
 8006356:	9f03      	ldr	r7, [sp, #12]
 8006358:	1bae      	subs	r6, r5, r6
 800635a:	42b7      	cmp	r7, r6
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	d135      	bne.n	80063ce <_dtoa_r+0x6e6>
 8006362:	f7f9 ffab 	bl	80002bc <__adddf3>
 8006366:	4642      	mov	r2, r8
 8006368:	464b      	mov	r3, r9
 800636a:	4606      	mov	r6, r0
 800636c:	460f      	mov	r7, r1
 800636e:	f7fa fbeb 	bl	8000b48 <__aeabi_dcmpgt>
 8006372:	b9d0      	cbnz	r0, 80063aa <_dtoa_r+0x6c2>
 8006374:	4642      	mov	r2, r8
 8006376:	464b      	mov	r3, r9
 8006378:	4630      	mov	r0, r6
 800637a:	4639      	mov	r1, r7
 800637c:	f7fa fbbc 	bl	8000af8 <__aeabi_dcmpeq>
 8006380:	b110      	cbz	r0, 8006388 <_dtoa_r+0x6a0>
 8006382:	f01a 0f01 	tst.w	sl, #1
 8006386:	d110      	bne.n	80063aa <_dtoa_r+0x6c2>
 8006388:	4620      	mov	r0, r4
 800638a:	ee18 1a10 	vmov	r1, s16
 800638e:	f000 fbdf 	bl	8006b50 <_Bfree>
 8006392:	2300      	movs	r3, #0
 8006394:	9800      	ldr	r0, [sp, #0]
 8006396:	702b      	strb	r3, [r5, #0]
 8006398:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800639a:	3001      	adds	r0, #1
 800639c:	6018      	str	r0, [r3, #0]
 800639e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f43f acf1 	beq.w	8005d88 <_dtoa_r+0xa0>
 80063a6:	601d      	str	r5, [r3, #0]
 80063a8:	e4ee      	b.n	8005d88 <_dtoa_r+0xa0>
 80063aa:	9f00      	ldr	r7, [sp, #0]
 80063ac:	462b      	mov	r3, r5
 80063ae:	461d      	mov	r5, r3
 80063b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063b4:	2a39      	cmp	r2, #57	; 0x39
 80063b6:	d106      	bne.n	80063c6 <_dtoa_r+0x6de>
 80063b8:	9a01      	ldr	r2, [sp, #4]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d1f7      	bne.n	80063ae <_dtoa_r+0x6c6>
 80063be:	9901      	ldr	r1, [sp, #4]
 80063c0:	2230      	movs	r2, #48	; 0x30
 80063c2:	3701      	adds	r7, #1
 80063c4:	700a      	strb	r2, [r1, #0]
 80063c6:	781a      	ldrb	r2, [r3, #0]
 80063c8:	3201      	adds	r2, #1
 80063ca:	701a      	strb	r2, [r3, #0]
 80063cc:	e790      	b.n	80062f0 <_dtoa_r+0x608>
 80063ce:	4ba6      	ldr	r3, [pc, #664]	; (8006668 <_dtoa_r+0x980>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	f7fa f929 	bl	8000628 <__aeabi_dmul>
 80063d6:	2200      	movs	r2, #0
 80063d8:	2300      	movs	r3, #0
 80063da:	4606      	mov	r6, r0
 80063dc:	460f      	mov	r7, r1
 80063de:	f7fa fb8b 	bl	8000af8 <__aeabi_dcmpeq>
 80063e2:	2800      	cmp	r0, #0
 80063e4:	d09d      	beq.n	8006322 <_dtoa_r+0x63a>
 80063e6:	e7cf      	b.n	8006388 <_dtoa_r+0x6a0>
 80063e8:	9a08      	ldr	r2, [sp, #32]
 80063ea:	2a00      	cmp	r2, #0
 80063ec:	f000 80d7 	beq.w	800659e <_dtoa_r+0x8b6>
 80063f0:	9a06      	ldr	r2, [sp, #24]
 80063f2:	2a01      	cmp	r2, #1
 80063f4:	f300 80ba 	bgt.w	800656c <_dtoa_r+0x884>
 80063f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063fa:	2a00      	cmp	r2, #0
 80063fc:	f000 80b2 	beq.w	8006564 <_dtoa_r+0x87c>
 8006400:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006404:	9e07      	ldr	r6, [sp, #28]
 8006406:	9d04      	ldr	r5, [sp, #16]
 8006408:	9a04      	ldr	r2, [sp, #16]
 800640a:	441a      	add	r2, r3
 800640c:	9204      	str	r2, [sp, #16]
 800640e:	9a05      	ldr	r2, [sp, #20]
 8006410:	2101      	movs	r1, #1
 8006412:	441a      	add	r2, r3
 8006414:	4620      	mov	r0, r4
 8006416:	9205      	str	r2, [sp, #20]
 8006418:	f000 fc52 	bl	8006cc0 <__i2b>
 800641c:	4607      	mov	r7, r0
 800641e:	2d00      	cmp	r5, #0
 8006420:	dd0c      	ble.n	800643c <_dtoa_r+0x754>
 8006422:	9b05      	ldr	r3, [sp, #20]
 8006424:	2b00      	cmp	r3, #0
 8006426:	dd09      	ble.n	800643c <_dtoa_r+0x754>
 8006428:	42ab      	cmp	r3, r5
 800642a:	9a04      	ldr	r2, [sp, #16]
 800642c:	bfa8      	it	ge
 800642e:	462b      	movge	r3, r5
 8006430:	1ad2      	subs	r2, r2, r3
 8006432:	9204      	str	r2, [sp, #16]
 8006434:	9a05      	ldr	r2, [sp, #20]
 8006436:	1aed      	subs	r5, r5, r3
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	9305      	str	r3, [sp, #20]
 800643c:	9b07      	ldr	r3, [sp, #28]
 800643e:	b31b      	cbz	r3, 8006488 <_dtoa_r+0x7a0>
 8006440:	9b08      	ldr	r3, [sp, #32]
 8006442:	2b00      	cmp	r3, #0
 8006444:	f000 80af 	beq.w	80065a6 <_dtoa_r+0x8be>
 8006448:	2e00      	cmp	r6, #0
 800644a:	dd13      	ble.n	8006474 <_dtoa_r+0x78c>
 800644c:	4639      	mov	r1, r7
 800644e:	4632      	mov	r2, r6
 8006450:	4620      	mov	r0, r4
 8006452:	f000 fcf5 	bl	8006e40 <__pow5mult>
 8006456:	ee18 2a10 	vmov	r2, s16
 800645a:	4601      	mov	r1, r0
 800645c:	4607      	mov	r7, r0
 800645e:	4620      	mov	r0, r4
 8006460:	f000 fc44 	bl	8006cec <__multiply>
 8006464:	ee18 1a10 	vmov	r1, s16
 8006468:	4680      	mov	r8, r0
 800646a:	4620      	mov	r0, r4
 800646c:	f000 fb70 	bl	8006b50 <_Bfree>
 8006470:	ee08 8a10 	vmov	s16, r8
 8006474:	9b07      	ldr	r3, [sp, #28]
 8006476:	1b9a      	subs	r2, r3, r6
 8006478:	d006      	beq.n	8006488 <_dtoa_r+0x7a0>
 800647a:	ee18 1a10 	vmov	r1, s16
 800647e:	4620      	mov	r0, r4
 8006480:	f000 fcde 	bl	8006e40 <__pow5mult>
 8006484:	ee08 0a10 	vmov	s16, r0
 8006488:	2101      	movs	r1, #1
 800648a:	4620      	mov	r0, r4
 800648c:	f000 fc18 	bl	8006cc0 <__i2b>
 8006490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006492:	2b00      	cmp	r3, #0
 8006494:	4606      	mov	r6, r0
 8006496:	f340 8088 	ble.w	80065aa <_dtoa_r+0x8c2>
 800649a:	461a      	mov	r2, r3
 800649c:	4601      	mov	r1, r0
 800649e:	4620      	mov	r0, r4
 80064a0:	f000 fcce 	bl	8006e40 <__pow5mult>
 80064a4:	9b06      	ldr	r3, [sp, #24]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	4606      	mov	r6, r0
 80064aa:	f340 8081 	ble.w	80065b0 <_dtoa_r+0x8c8>
 80064ae:	f04f 0800 	mov.w	r8, #0
 80064b2:	6933      	ldr	r3, [r6, #16]
 80064b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80064b8:	6918      	ldr	r0, [r3, #16]
 80064ba:	f000 fbb1 	bl	8006c20 <__hi0bits>
 80064be:	f1c0 0020 	rsb	r0, r0, #32
 80064c2:	9b05      	ldr	r3, [sp, #20]
 80064c4:	4418      	add	r0, r3
 80064c6:	f010 001f 	ands.w	r0, r0, #31
 80064ca:	f000 8092 	beq.w	80065f2 <_dtoa_r+0x90a>
 80064ce:	f1c0 0320 	rsb	r3, r0, #32
 80064d2:	2b04      	cmp	r3, #4
 80064d4:	f340 808a 	ble.w	80065ec <_dtoa_r+0x904>
 80064d8:	f1c0 001c 	rsb	r0, r0, #28
 80064dc:	9b04      	ldr	r3, [sp, #16]
 80064de:	4403      	add	r3, r0
 80064e0:	9304      	str	r3, [sp, #16]
 80064e2:	9b05      	ldr	r3, [sp, #20]
 80064e4:	4403      	add	r3, r0
 80064e6:	4405      	add	r5, r0
 80064e8:	9305      	str	r3, [sp, #20]
 80064ea:	9b04      	ldr	r3, [sp, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	dd07      	ble.n	8006500 <_dtoa_r+0x818>
 80064f0:	ee18 1a10 	vmov	r1, s16
 80064f4:	461a      	mov	r2, r3
 80064f6:	4620      	mov	r0, r4
 80064f8:	f000 fcfc 	bl	8006ef4 <__lshift>
 80064fc:	ee08 0a10 	vmov	s16, r0
 8006500:	9b05      	ldr	r3, [sp, #20]
 8006502:	2b00      	cmp	r3, #0
 8006504:	dd05      	ble.n	8006512 <_dtoa_r+0x82a>
 8006506:	4631      	mov	r1, r6
 8006508:	461a      	mov	r2, r3
 800650a:	4620      	mov	r0, r4
 800650c:	f000 fcf2 	bl	8006ef4 <__lshift>
 8006510:	4606      	mov	r6, r0
 8006512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006514:	2b00      	cmp	r3, #0
 8006516:	d06e      	beq.n	80065f6 <_dtoa_r+0x90e>
 8006518:	ee18 0a10 	vmov	r0, s16
 800651c:	4631      	mov	r1, r6
 800651e:	f000 fd59 	bl	8006fd4 <__mcmp>
 8006522:	2800      	cmp	r0, #0
 8006524:	da67      	bge.n	80065f6 <_dtoa_r+0x90e>
 8006526:	9b00      	ldr	r3, [sp, #0]
 8006528:	3b01      	subs	r3, #1
 800652a:	ee18 1a10 	vmov	r1, s16
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	220a      	movs	r2, #10
 8006532:	2300      	movs	r3, #0
 8006534:	4620      	mov	r0, r4
 8006536:	f000 fb2d 	bl	8006b94 <__multadd>
 800653a:	9b08      	ldr	r3, [sp, #32]
 800653c:	ee08 0a10 	vmov	s16, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	f000 81b1 	beq.w	80068a8 <_dtoa_r+0xbc0>
 8006546:	2300      	movs	r3, #0
 8006548:	4639      	mov	r1, r7
 800654a:	220a      	movs	r2, #10
 800654c:	4620      	mov	r0, r4
 800654e:	f000 fb21 	bl	8006b94 <__multadd>
 8006552:	9b02      	ldr	r3, [sp, #8]
 8006554:	2b00      	cmp	r3, #0
 8006556:	4607      	mov	r7, r0
 8006558:	f300 808e 	bgt.w	8006678 <_dtoa_r+0x990>
 800655c:	9b06      	ldr	r3, [sp, #24]
 800655e:	2b02      	cmp	r3, #2
 8006560:	dc51      	bgt.n	8006606 <_dtoa_r+0x91e>
 8006562:	e089      	b.n	8006678 <_dtoa_r+0x990>
 8006564:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006566:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800656a:	e74b      	b.n	8006404 <_dtoa_r+0x71c>
 800656c:	9b03      	ldr	r3, [sp, #12]
 800656e:	1e5e      	subs	r6, r3, #1
 8006570:	9b07      	ldr	r3, [sp, #28]
 8006572:	42b3      	cmp	r3, r6
 8006574:	bfbf      	itttt	lt
 8006576:	9b07      	ldrlt	r3, [sp, #28]
 8006578:	9607      	strlt	r6, [sp, #28]
 800657a:	1af2      	sublt	r2, r6, r3
 800657c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800657e:	bfb6      	itet	lt
 8006580:	189b      	addlt	r3, r3, r2
 8006582:	1b9e      	subge	r6, r3, r6
 8006584:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006586:	9b03      	ldr	r3, [sp, #12]
 8006588:	bfb8      	it	lt
 800658a:	2600      	movlt	r6, #0
 800658c:	2b00      	cmp	r3, #0
 800658e:	bfb7      	itett	lt
 8006590:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006594:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006598:	1a9d      	sublt	r5, r3, r2
 800659a:	2300      	movlt	r3, #0
 800659c:	e734      	b.n	8006408 <_dtoa_r+0x720>
 800659e:	9e07      	ldr	r6, [sp, #28]
 80065a0:	9d04      	ldr	r5, [sp, #16]
 80065a2:	9f08      	ldr	r7, [sp, #32]
 80065a4:	e73b      	b.n	800641e <_dtoa_r+0x736>
 80065a6:	9a07      	ldr	r2, [sp, #28]
 80065a8:	e767      	b.n	800647a <_dtoa_r+0x792>
 80065aa:	9b06      	ldr	r3, [sp, #24]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	dc18      	bgt.n	80065e2 <_dtoa_r+0x8fa>
 80065b0:	f1ba 0f00 	cmp.w	sl, #0
 80065b4:	d115      	bne.n	80065e2 <_dtoa_r+0x8fa>
 80065b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80065ba:	b993      	cbnz	r3, 80065e2 <_dtoa_r+0x8fa>
 80065bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80065c0:	0d1b      	lsrs	r3, r3, #20
 80065c2:	051b      	lsls	r3, r3, #20
 80065c4:	b183      	cbz	r3, 80065e8 <_dtoa_r+0x900>
 80065c6:	9b04      	ldr	r3, [sp, #16]
 80065c8:	3301      	adds	r3, #1
 80065ca:	9304      	str	r3, [sp, #16]
 80065cc:	9b05      	ldr	r3, [sp, #20]
 80065ce:	3301      	adds	r3, #1
 80065d0:	9305      	str	r3, [sp, #20]
 80065d2:	f04f 0801 	mov.w	r8, #1
 80065d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f47f af6a 	bne.w	80064b2 <_dtoa_r+0x7ca>
 80065de:	2001      	movs	r0, #1
 80065e0:	e76f      	b.n	80064c2 <_dtoa_r+0x7da>
 80065e2:	f04f 0800 	mov.w	r8, #0
 80065e6:	e7f6      	b.n	80065d6 <_dtoa_r+0x8ee>
 80065e8:	4698      	mov	r8, r3
 80065ea:	e7f4      	b.n	80065d6 <_dtoa_r+0x8ee>
 80065ec:	f43f af7d 	beq.w	80064ea <_dtoa_r+0x802>
 80065f0:	4618      	mov	r0, r3
 80065f2:	301c      	adds	r0, #28
 80065f4:	e772      	b.n	80064dc <_dtoa_r+0x7f4>
 80065f6:	9b03      	ldr	r3, [sp, #12]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	dc37      	bgt.n	800666c <_dtoa_r+0x984>
 80065fc:	9b06      	ldr	r3, [sp, #24]
 80065fe:	2b02      	cmp	r3, #2
 8006600:	dd34      	ble.n	800666c <_dtoa_r+0x984>
 8006602:	9b03      	ldr	r3, [sp, #12]
 8006604:	9302      	str	r3, [sp, #8]
 8006606:	9b02      	ldr	r3, [sp, #8]
 8006608:	b96b      	cbnz	r3, 8006626 <_dtoa_r+0x93e>
 800660a:	4631      	mov	r1, r6
 800660c:	2205      	movs	r2, #5
 800660e:	4620      	mov	r0, r4
 8006610:	f000 fac0 	bl	8006b94 <__multadd>
 8006614:	4601      	mov	r1, r0
 8006616:	4606      	mov	r6, r0
 8006618:	ee18 0a10 	vmov	r0, s16
 800661c:	f000 fcda 	bl	8006fd4 <__mcmp>
 8006620:	2800      	cmp	r0, #0
 8006622:	f73f adbb 	bgt.w	800619c <_dtoa_r+0x4b4>
 8006626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006628:	9d01      	ldr	r5, [sp, #4]
 800662a:	43db      	mvns	r3, r3
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	f04f 0800 	mov.w	r8, #0
 8006632:	4631      	mov	r1, r6
 8006634:	4620      	mov	r0, r4
 8006636:	f000 fa8b 	bl	8006b50 <_Bfree>
 800663a:	2f00      	cmp	r7, #0
 800663c:	f43f aea4 	beq.w	8006388 <_dtoa_r+0x6a0>
 8006640:	f1b8 0f00 	cmp.w	r8, #0
 8006644:	d005      	beq.n	8006652 <_dtoa_r+0x96a>
 8006646:	45b8      	cmp	r8, r7
 8006648:	d003      	beq.n	8006652 <_dtoa_r+0x96a>
 800664a:	4641      	mov	r1, r8
 800664c:	4620      	mov	r0, r4
 800664e:	f000 fa7f 	bl	8006b50 <_Bfree>
 8006652:	4639      	mov	r1, r7
 8006654:	4620      	mov	r0, r4
 8006656:	f000 fa7b 	bl	8006b50 <_Bfree>
 800665a:	e695      	b.n	8006388 <_dtoa_r+0x6a0>
 800665c:	2600      	movs	r6, #0
 800665e:	4637      	mov	r7, r6
 8006660:	e7e1      	b.n	8006626 <_dtoa_r+0x93e>
 8006662:	9700      	str	r7, [sp, #0]
 8006664:	4637      	mov	r7, r6
 8006666:	e599      	b.n	800619c <_dtoa_r+0x4b4>
 8006668:	40240000 	.word	0x40240000
 800666c:	9b08      	ldr	r3, [sp, #32]
 800666e:	2b00      	cmp	r3, #0
 8006670:	f000 80ca 	beq.w	8006808 <_dtoa_r+0xb20>
 8006674:	9b03      	ldr	r3, [sp, #12]
 8006676:	9302      	str	r3, [sp, #8]
 8006678:	2d00      	cmp	r5, #0
 800667a:	dd05      	ble.n	8006688 <_dtoa_r+0x9a0>
 800667c:	4639      	mov	r1, r7
 800667e:	462a      	mov	r2, r5
 8006680:	4620      	mov	r0, r4
 8006682:	f000 fc37 	bl	8006ef4 <__lshift>
 8006686:	4607      	mov	r7, r0
 8006688:	f1b8 0f00 	cmp.w	r8, #0
 800668c:	d05b      	beq.n	8006746 <_dtoa_r+0xa5e>
 800668e:	6879      	ldr	r1, [r7, #4]
 8006690:	4620      	mov	r0, r4
 8006692:	f000 fa1d 	bl	8006ad0 <_Balloc>
 8006696:	4605      	mov	r5, r0
 8006698:	b928      	cbnz	r0, 80066a6 <_dtoa_r+0x9be>
 800669a:	4b87      	ldr	r3, [pc, #540]	; (80068b8 <_dtoa_r+0xbd0>)
 800669c:	4602      	mov	r2, r0
 800669e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80066a2:	f7ff bb3b 	b.w	8005d1c <_dtoa_r+0x34>
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	3202      	adds	r2, #2
 80066aa:	0092      	lsls	r2, r2, #2
 80066ac:	f107 010c 	add.w	r1, r7, #12
 80066b0:	300c      	adds	r0, #12
 80066b2:	f7fe fdf3 	bl	800529c <memcpy>
 80066b6:	2201      	movs	r2, #1
 80066b8:	4629      	mov	r1, r5
 80066ba:	4620      	mov	r0, r4
 80066bc:	f000 fc1a 	bl	8006ef4 <__lshift>
 80066c0:	9b01      	ldr	r3, [sp, #4]
 80066c2:	f103 0901 	add.w	r9, r3, #1
 80066c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80066ca:	4413      	add	r3, r2
 80066cc:	9305      	str	r3, [sp, #20]
 80066ce:	f00a 0301 	and.w	r3, sl, #1
 80066d2:	46b8      	mov	r8, r7
 80066d4:	9304      	str	r3, [sp, #16]
 80066d6:	4607      	mov	r7, r0
 80066d8:	4631      	mov	r1, r6
 80066da:	ee18 0a10 	vmov	r0, s16
 80066de:	f7ff fa75 	bl	8005bcc <quorem>
 80066e2:	4641      	mov	r1, r8
 80066e4:	9002      	str	r0, [sp, #8]
 80066e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80066ea:	ee18 0a10 	vmov	r0, s16
 80066ee:	f000 fc71 	bl	8006fd4 <__mcmp>
 80066f2:	463a      	mov	r2, r7
 80066f4:	9003      	str	r0, [sp, #12]
 80066f6:	4631      	mov	r1, r6
 80066f8:	4620      	mov	r0, r4
 80066fa:	f000 fc87 	bl	800700c <__mdiff>
 80066fe:	68c2      	ldr	r2, [r0, #12]
 8006700:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006704:	4605      	mov	r5, r0
 8006706:	bb02      	cbnz	r2, 800674a <_dtoa_r+0xa62>
 8006708:	4601      	mov	r1, r0
 800670a:	ee18 0a10 	vmov	r0, s16
 800670e:	f000 fc61 	bl	8006fd4 <__mcmp>
 8006712:	4602      	mov	r2, r0
 8006714:	4629      	mov	r1, r5
 8006716:	4620      	mov	r0, r4
 8006718:	9207      	str	r2, [sp, #28]
 800671a:	f000 fa19 	bl	8006b50 <_Bfree>
 800671e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006722:	ea43 0102 	orr.w	r1, r3, r2
 8006726:	9b04      	ldr	r3, [sp, #16]
 8006728:	430b      	orrs	r3, r1
 800672a:	464d      	mov	r5, r9
 800672c:	d10f      	bne.n	800674e <_dtoa_r+0xa66>
 800672e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006732:	d02a      	beq.n	800678a <_dtoa_r+0xaa2>
 8006734:	9b03      	ldr	r3, [sp, #12]
 8006736:	2b00      	cmp	r3, #0
 8006738:	dd02      	ble.n	8006740 <_dtoa_r+0xa58>
 800673a:	9b02      	ldr	r3, [sp, #8]
 800673c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006740:	f88b a000 	strb.w	sl, [fp]
 8006744:	e775      	b.n	8006632 <_dtoa_r+0x94a>
 8006746:	4638      	mov	r0, r7
 8006748:	e7ba      	b.n	80066c0 <_dtoa_r+0x9d8>
 800674a:	2201      	movs	r2, #1
 800674c:	e7e2      	b.n	8006714 <_dtoa_r+0xa2c>
 800674e:	9b03      	ldr	r3, [sp, #12]
 8006750:	2b00      	cmp	r3, #0
 8006752:	db04      	blt.n	800675e <_dtoa_r+0xa76>
 8006754:	9906      	ldr	r1, [sp, #24]
 8006756:	430b      	orrs	r3, r1
 8006758:	9904      	ldr	r1, [sp, #16]
 800675a:	430b      	orrs	r3, r1
 800675c:	d122      	bne.n	80067a4 <_dtoa_r+0xabc>
 800675e:	2a00      	cmp	r2, #0
 8006760:	ddee      	ble.n	8006740 <_dtoa_r+0xa58>
 8006762:	ee18 1a10 	vmov	r1, s16
 8006766:	2201      	movs	r2, #1
 8006768:	4620      	mov	r0, r4
 800676a:	f000 fbc3 	bl	8006ef4 <__lshift>
 800676e:	4631      	mov	r1, r6
 8006770:	ee08 0a10 	vmov	s16, r0
 8006774:	f000 fc2e 	bl	8006fd4 <__mcmp>
 8006778:	2800      	cmp	r0, #0
 800677a:	dc03      	bgt.n	8006784 <_dtoa_r+0xa9c>
 800677c:	d1e0      	bne.n	8006740 <_dtoa_r+0xa58>
 800677e:	f01a 0f01 	tst.w	sl, #1
 8006782:	d0dd      	beq.n	8006740 <_dtoa_r+0xa58>
 8006784:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006788:	d1d7      	bne.n	800673a <_dtoa_r+0xa52>
 800678a:	2339      	movs	r3, #57	; 0x39
 800678c:	f88b 3000 	strb.w	r3, [fp]
 8006790:	462b      	mov	r3, r5
 8006792:	461d      	mov	r5, r3
 8006794:	3b01      	subs	r3, #1
 8006796:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800679a:	2a39      	cmp	r2, #57	; 0x39
 800679c:	d071      	beq.n	8006882 <_dtoa_r+0xb9a>
 800679e:	3201      	adds	r2, #1
 80067a0:	701a      	strb	r2, [r3, #0]
 80067a2:	e746      	b.n	8006632 <_dtoa_r+0x94a>
 80067a4:	2a00      	cmp	r2, #0
 80067a6:	dd07      	ble.n	80067b8 <_dtoa_r+0xad0>
 80067a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80067ac:	d0ed      	beq.n	800678a <_dtoa_r+0xaa2>
 80067ae:	f10a 0301 	add.w	r3, sl, #1
 80067b2:	f88b 3000 	strb.w	r3, [fp]
 80067b6:	e73c      	b.n	8006632 <_dtoa_r+0x94a>
 80067b8:	9b05      	ldr	r3, [sp, #20]
 80067ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 80067be:	4599      	cmp	r9, r3
 80067c0:	d047      	beq.n	8006852 <_dtoa_r+0xb6a>
 80067c2:	ee18 1a10 	vmov	r1, s16
 80067c6:	2300      	movs	r3, #0
 80067c8:	220a      	movs	r2, #10
 80067ca:	4620      	mov	r0, r4
 80067cc:	f000 f9e2 	bl	8006b94 <__multadd>
 80067d0:	45b8      	cmp	r8, r7
 80067d2:	ee08 0a10 	vmov	s16, r0
 80067d6:	f04f 0300 	mov.w	r3, #0
 80067da:	f04f 020a 	mov.w	r2, #10
 80067de:	4641      	mov	r1, r8
 80067e0:	4620      	mov	r0, r4
 80067e2:	d106      	bne.n	80067f2 <_dtoa_r+0xb0a>
 80067e4:	f000 f9d6 	bl	8006b94 <__multadd>
 80067e8:	4680      	mov	r8, r0
 80067ea:	4607      	mov	r7, r0
 80067ec:	f109 0901 	add.w	r9, r9, #1
 80067f0:	e772      	b.n	80066d8 <_dtoa_r+0x9f0>
 80067f2:	f000 f9cf 	bl	8006b94 <__multadd>
 80067f6:	4639      	mov	r1, r7
 80067f8:	4680      	mov	r8, r0
 80067fa:	2300      	movs	r3, #0
 80067fc:	220a      	movs	r2, #10
 80067fe:	4620      	mov	r0, r4
 8006800:	f000 f9c8 	bl	8006b94 <__multadd>
 8006804:	4607      	mov	r7, r0
 8006806:	e7f1      	b.n	80067ec <_dtoa_r+0xb04>
 8006808:	9b03      	ldr	r3, [sp, #12]
 800680a:	9302      	str	r3, [sp, #8]
 800680c:	9d01      	ldr	r5, [sp, #4]
 800680e:	ee18 0a10 	vmov	r0, s16
 8006812:	4631      	mov	r1, r6
 8006814:	f7ff f9da 	bl	8005bcc <quorem>
 8006818:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800681c:	9b01      	ldr	r3, [sp, #4]
 800681e:	f805 ab01 	strb.w	sl, [r5], #1
 8006822:	1aea      	subs	r2, r5, r3
 8006824:	9b02      	ldr	r3, [sp, #8]
 8006826:	4293      	cmp	r3, r2
 8006828:	dd09      	ble.n	800683e <_dtoa_r+0xb56>
 800682a:	ee18 1a10 	vmov	r1, s16
 800682e:	2300      	movs	r3, #0
 8006830:	220a      	movs	r2, #10
 8006832:	4620      	mov	r0, r4
 8006834:	f000 f9ae 	bl	8006b94 <__multadd>
 8006838:	ee08 0a10 	vmov	s16, r0
 800683c:	e7e7      	b.n	800680e <_dtoa_r+0xb26>
 800683e:	9b02      	ldr	r3, [sp, #8]
 8006840:	2b00      	cmp	r3, #0
 8006842:	bfc8      	it	gt
 8006844:	461d      	movgt	r5, r3
 8006846:	9b01      	ldr	r3, [sp, #4]
 8006848:	bfd8      	it	le
 800684a:	2501      	movle	r5, #1
 800684c:	441d      	add	r5, r3
 800684e:	f04f 0800 	mov.w	r8, #0
 8006852:	ee18 1a10 	vmov	r1, s16
 8006856:	2201      	movs	r2, #1
 8006858:	4620      	mov	r0, r4
 800685a:	f000 fb4b 	bl	8006ef4 <__lshift>
 800685e:	4631      	mov	r1, r6
 8006860:	ee08 0a10 	vmov	s16, r0
 8006864:	f000 fbb6 	bl	8006fd4 <__mcmp>
 8006868:	2800      	cmp	r0, #0
 800686a:	dc91      	bgt.n	8006790 <_dtoa_r+0xaa8>
 800686c:	d102      	bne.n	8006874 <_dtoa_r+0xb8c>
 800686e:	f01a 0f01 	tst.w	sl, #1
 8006872:	d18d      	bne.n	8006790 <_dtoa_r+0xaa8>
 8006874:	462b      	mov	r3, r5
 8006876:	461d      	mov	r5, r3
 8006878:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800687c:	2a30      	cmp	r2, #48	; 0x30
 800687e:	d0fa      	beq.n	8006876 <_dtoa_r+0xb8e>
 8006880:	e6d7      	b.n	8006632 <_dtoa_r+0x94a>
 8006882:	9a01      	ldr	r2, [sp, #4]
 8006884:	429a      	cmp	r2, r3
 8006886:	d184      	bne.n	8006792 <_dtoa_r+0xaaa>
 8006888:	9b00      	ldr	r3, [sp, #0]
 800688a:	3301      	adds	r3, #1
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	2331      	movs	r3, #49	; 0x31
 8006890:	7013      	strb	r3, [r2, #0]
 8006892:	e6ce      	b.n	8006632 <_dtoa_r+0x94a>
 8006894:	4b09      	ldr	r3, [pc, #36]	; (80068bc <_dtoa_r+0xbd4>)
 8006896:	f7ff ba95 	b.w	8005dc4 <_dtoa_r+0xdc>
 800689a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800689c:	2b00      	cmp	r3, #0
 800689e:	f47f aa6e 	bne.w	8005d7e <_dtoa_r+0x96>
 80068a2:	4b07      	ldr	r3, [pc, #28]	; (80068c0 <_dtoa_r+0xbd8>)
 80068a4:	f7ff ba8e 	b.w	8005dc4 <_dtoa_r+0xdc>
 80068a8:	9b02      	ldr	r3, [sp, #8]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	dcae      	bgt.n	800680c <_dtoa_r+0xb24>
 80068ae:	9b06      	ldr	r3, [sp, #24]
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	f73f aea8 	bgt.w	8006606 <_dtoa_r+0x91e>
 80068b6:	e7a9      	b.n	800680c <_dtoa_r+0xb24>
 80068b8:	08008ea3 	.word	0x08008ea3
 80068bc:	08008e00 	.word	0x08008e00
 80068c0:	08008e24 	.word	0x08008e24

080068c4 <std>:
 80068c4:	2300      	movs	r3, #0
 80068c6:	b510      	push	{r4, lr}
 80068c8:	4604      	mov	r4, r0
 80068ca:	e9c0 3300 	strd	r3, r3, [r0]
 80068ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068d2:	6083      	str	r3, [r0, #8]
 80068d4:	8181      	strh	r1, [r0, #12]
 80068d6:	6643      	str	r3, [r0, #100]	; 0x64
 80068d8:	81c2      	strh	r2, [r0, #14]
 80068da:	6183      	str	r3, [r0, #24]
 80068dc:	4619      	mov	r1, r3
 80068de:	2208      	movs	r2, #8
 80068e0:	305c      	adds	r0, #92	; 0x5c
 80068e2:	f7fe fce9 	bl	80052b8 <memset>
 80068e6:	4b05      	ldr	r3, [pc, #20]	; (80068fc <std+0x38>)
 80068e8:	6263      	str	r3, [r4, #36]	; 0x24
 80068ea:	4b05      	ldr	r3, [pc, #20]	; (8006900 <std+0x3c>)
 80068ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80068ee:	4b05      	ldr	r3, [pc, #20]	; (8006904 <std+0x40>)
 80068f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068f2:	4b05      	ldr	r3, [pc, #20]	; (8006908 <std+0x44>)
 80068f4:	6224      	str	r4, [r4, #32]
 80068f6:	6323      	str	r3, [r4, #48]	; 0x30
 80068f8:	bd10      	pop	{r4, pc}
 80068fa:	bf00      	nop
 80068fc:	08007699 	.word	0x08007699
 8006900:	080076bb 	.word	0x080076bb
 8006904:	080076f3 	.word	0x080076f3
 8006908:	08007717 	.word	0x08007717

0800690c <_cleanup_r>:
 800690c:	4901      	ldr	r1, [pc, #4]	; (8006914 <_cleanup_r+0x8>)
 800690e:	f000 b8af 	b.w	8006a70 <_fwalk_reent>
 8006912:	bf00      	nop
 8006914:	08007a2d 	.word	0x08007a2d

08006918 <__sfmoreglue>:
 8006918:	b570      	push	{r4, r5, r6, lr}
 800691a:	2268      	movs	r2, #104	; 0x68
 800691c:	1e4d      	subs	r5, r1, #1
 800691e:	4355      	muls	r5, r2
 8006920:	460e      	mov	r6, r1
 8006922:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006926:	f000 fcd9 	bl	80072dc <_malloc_r>
 800692a:	4604      	mov	r4, r0
 800692c:	b140      	cbz	r0, 8006940 <__sfmoreglue+0x28>
 800692e:	2100      	movs	r1, #0
 8006930:	e9c0 1600 	strd	r1, r6, [r0]
 8006934:	300c      	adds	r0, #12
 8006936:	60a0      	str	r0, [r4, #8]
 8006938:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800693c:	f7fe fcbc 	bl	80052b8 <memset>
 8006940:	4620      	mov	r0, r4
 8006942:	bd70      	pop	{r4, r5, r6, pc}

08006944 <__sfp_lock_acquire>:
 8006944:	4801      	ldr	r0, [pc, #4]	; (800694c <__sfp_lock_acquire+0x8>)
 8006946:	f000 b8b8 	b.w	8006aba <__retarget_lock_acquire_recursive>
 800694a:	bf00      	nop
 800694c:	20000291 	.word	0x20000291

08006950 <__sfp_lock_release>:
 8006950:	4801      	ldr	r0, [pc, #4]	; (8006958 <__sfp_lock_release+0x8>)
 8006952:	f000 b8b3 	b.w	8006abc <__retarget_lock_release_recursive>
 8006956:	bf00      	nop
 8006958:	20000291 	.word	0x20000291

0800695c <__sinit_lock_acquire>:
 800695c:	4801      	ldr	r0, [pc, #4]	; (8006964 <__sinit_lock_acquire+0x8>)
 800695e:	f000 b8ac 	b.w	8006aba <__retarget_lock_acquire_recursive>
 8006962:	bf00      	nop
 8006964:	20000292 	.word	0x20000292

08006968 <__sinit_lock_release>:
 8006968:	4801      	ldr	r0, [pc, #4]	; (8006970 <__sinit_lock_release+0x8>)
 800696a:	f000 b8a7 	b.w	8006abc <__retarget_lock_release_recursive>
 800696e:	bf00      	nop
 8006970:	20000292 	.word	0x20000292

08006974 <__sinit>:
 8006974:	b510      	push	{r4, lr}
 8006976:	4604      	mov	r4, r0
 8006978:	f7ff fff0 	bl	800695c <__sinit_lock_acquire>
 800697c:	69a3      	ldr	r3, [r4, #24]
 800697e:	b11b      	cbz	r3, 8006988 <__sinit+0x14>
 8006980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006984:	f7ff bff0 	b.w	8006968 <__sinit_lock_release>
 8006988:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800698c:	6523      	str	r3, [r4, #80]	; 0x50
 800698e:	4b13      	ldr	r3, [pc, #76]	; (80069dc <__sinit+0x68>)
 8006990:	4a13      	ldr	r2, [pc, #76]	; (80069e0 <__sinit+0x6c>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	62a2      	str	r2, [r4, #40]	; 0x28
 8006996:	42a3      	cmp	r3, r4
 8006998:	bf04      	itt	eq
 800699a:	2301      	moveq	r3, #1
 800699c:	61a3      	streq	r3, [r4, #24]
 800699e:	4620      	mov	r0, r4
 80069a0:	f000 f820 	bl	80069e4 <__sfp>
 80069a4:	6060      	str	r0, [r4, #4]
 80069a6:	4620      	mov	r0, r4
 80069a8:	f000 f81c 	bl	80069e4 <__sfp>
 80069ac:	60a0      	str	r0, [r4, #8]
 80069ae:	4620      	mov	r0, r4
 80069b0:	f000 f818 	bl	80069e4 <__sfp>
 80069b4:	2200      	movs	r2, #0
 80069b6:	60e0      	str	r0, [r4, #12]
 80069b8:	2104      	movs	r1, #4
 80069ba:	6860      	ldr	r0, [r4, #4]
 80069bc:	f7ff ff82 	bl	80068c4 <std>
 80069c0:	68a0      	ldr	r0, [r4, #8]
 80069c2:	2201      	movs	r2, #1
 80069c4:	2109      	movs	r1, #9
 80069c6:	f7ff ff7d 	bl	80068c4 <std>
 80069ca:	68e0      	ldr	r0, [r4, #12]
 80069cc:	2202      	movs	r2, #2
 80069ce:	2112      	movs	r1, #18
 80069d0:	f7ff ff78 	bl	80068c4 <std>
 80069d4:	2301      	movs	r3, #1
 80069d6:	61a3      	str	r3, [r4, #24]
 80069d8:	e7d2      	b.n	8006980 <__sinit+0xc>
 80069da:	bf00      	nop
 80069dc:	08008dec 	.word	0x08008dec
 80069e0:	0800690d 	.word	0x0800690d

080069e4 <__sfp>:
 80069e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e6:	4607      	mov	r7, r0
 80069e8:	f7ff ffac 	bl	8006944 <__sfp_lock_acquire>
 80069ec:	4b1e      	ldr	r3, [pc, #120]	; (8006a68 <__sfp+0x84>)
 80069ee:	681e      	ldr	r6, [r3, #0]
 80069f0:	69b3      	ldr	r3, [r6, #24]
 80069f2:	b913      	cbnz	r3, 80069fa <__sfp+0x16>
 80069f4:	4630      	mov	r0, r6
 80069f6:	f7ff ffbd 	bl	8006974 <__sinit>
 80069fa:	3648      	adds	r6, #72	; 0x48
 80069fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a00:	3b01      	subs	r3, #1
 8006a02:	d503      	bpl.n	8006a0c <__sfp+0x28>
 8006a04:	6833      	ldr	r3, [r6, #0]
 8006a06:	b30b      	cbz	r3, 8006a4c <__sfp+0x68>
 8006a08:	6836      	ldr	r6, [r6, #0]
 8006a0a:	e7f7      	b.n	80069fc <__sfp+0x18>
 8006a0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a10:	b9d5      	cbnz	r5, 8006a48 <__sfp+0x64>
 8006a12:	4b16      	ldr	r3, [pc, #88]	; (8006a6c <__sfp+0x88>)
 8006a14:	60e3      	str	r3, [r4, #12]
 8006a16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a1a:	6665      	str	r5, [r4, #100]	; 0x64
 8006a1c:	f000 f84c 	bl	8006ab8 <__retarget_lock_init_recursive>
 8006a20:	f7ff ff96 	bl	8006950 <__sfp_lock_release>
 8006a24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006a28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006a2c:	6025      	str	r5, [r4, #0]
 8006a2e:	61a5      	str	r5, [r4, #24]
 8006a30:	2208      	movs	r2, #8
 8006a32:	4629      	mov	r1, r5
 8006a34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a38:	f7fe fc3e 	bl	80052b8 <memset>
 8006a3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a44:	4620      	mov	r0, r4
 8006a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a48:	3468      	adds	r4, #104	; 0x68
 8006a4a:	e7d9      	b.n	8006a00 <__sfp+0x1c>
 8006a4c:	2104      	movs	r1, #4
 8006a4e:	4638      	mov	r0, r7
 8006a50:	f7ff ff62 	bl	8006918 <__sfmoreglue>
 8006a54:	4604      	mov	r4, r0
 8006a56:	6030      	str	r0, [r6, #0]
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	d1d5      	bne.n	8006a08 <__sfp+0x24>
 8006a5c:	f7ff ff78 	bl	8006950 <__sfp_lock_release>
 8006a60:	230c      	movs	r3, #12
 8006a62:	603b      	str	r3, [r7, #0]
 8006a64:	e7ee      	b.n	8006a44 <__sfp+0x60>
 8006a66:	bf00      	nop
 8006a68:	08008dec 	.word	0x08008dec
 8006a6c:	ffff0001 	.word	0xffff0001

08006a70 <_fwalk_reent>:
 8006a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a74:	4606      	mov	r6, r0
 8006a76:	4688      	mov	r8, r1
 8006a78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a7c:	2700      	movs	r7, #0
 8006a7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a82:	f1b9 0901 	subs.w	r9, r9, #1
 8006a86:	d505      	bpl.n	8006a94 <_fwalk_reent+0x24>
 8006a88:	6824      	ldr	r4, [r4, #0]
 8006a8a:	2c00      	cmp	r4, #0
 8006a8c:	d1f7      	bne.n	8006a7e <_fwalk_reent+0xe>
 8006a8e:	4638      	mov	r0, r7
 8006a90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a94:	89ab      	ldrh	r3, [r5, #12]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d907      	bls.n	8006aaa <_fwalk_reent+0x3a>
 8006a9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	d003      	beq.n	8006aaa <_fwalk_reent+0x3a>
 8006aa2:	4629      	mov	r1, r5
 8006aa4:	4630      	mov	r0, r6
 8006aa6:	47c0      	blx	r8
 8006aa8:	4307      	orrs	r7, r0
 8006aaa:	3568      	adds	r5, #104	; 0x68
 8006aac:	e7e9      	b.n	8006a82 <_fwalk_reent+0x12>
	...

08006ab0 <_localeconv_r>:
 8006ab0:	4800      	ldr	r0, [pc, #0]	; (8006ab4 <_localeconv_r+0x4>)
 8006ab2:	4770      	bx	lr
 8006ab4:	20000160 	.word	0x20000160

08006ab8 <__retarget_lock_init_recursive>:
 8006ab8:	4770      	bx	lr

08006aba <__retarget_lock_acquire_recursive>:
 8006aba:	4770      	bx	lr

08006abc <__retarget_lock_release_recursive>:
 8006abc:	4770      	bx	lr
	...

08006ac0 <malloc>:
 8006ac0:	4b02      	ldr	r3, [pc, #8]	; (8006acc <malloc+0xc>)
 8006ac2:	4601      	mov	r1, r0
 8006ac4:	6818      	ldr	r0, [r3, #0]
 8006ac6:	f000 bc09 	b.w	80072dc <_malloc_r>
 8006aca:	bf00      	nop
 8006acc:	2000000c 	.word	0x2000000c

08006ad0 <_Balloc>:
 8006ad0:	b570      	push	{r4, r5, r6, lr}
 8006ad2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ad4:	4604      	mov	r4, r0
 8006ad6:	460d      	mov	r5, r1
 8006ad8:	b976      	cbnz	r6, 8006af8 <_Balloc+0x28>
 8006ada:	2010      	movs	r0, #16
 8006adc:	f7ff fff0 	bl	8006ac0 <malloc>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	6260      	str	r0, [r4, #36]	; 0x24
 8006ae4:	b920      	cbnz	r0, 8006af0 <_Balloc+0x20>
 8006ae6:	4b18      	ldr	r3, [pc, #96]	; (8006b48 <_Balloc+0x78>)
 8006ae8:	4818      	ldr	r0, [pc, #96]	; (8006b4c <_Balloc+0x7c>)
 8006aea:	2166      	movs	r1, #102	; 0x66
 8006aec:	f000 feea 	bl	80078c4 <__assert_func>
 8006af0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006af4:	6006      	str	r6, [r0, #0]
 8006af6:	60c6      	str	r6, [r0, #12]
 8006af8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006afa:	68f3      	ldr	r3, [r6, #12]
 8006afc:	b183      	cbz	r3, 8006b20 <_Balloc+0x50>
 8006afe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b06:	b9b8      	cbnz	r0, 8006b38 <_Balloc+0x68>
 8006b08:	2101      	movs	r1, #1
 8006b0a:	fa01 f605 	lsl.w	r6, r1, r5
 8006b0e:	1d72      	adds	r2, r6, #5
 8006b10:	0092      	lsls	r2, r2, #2
 8006b12:	4620      	mov	r0, r4
 8006b14:	f000 fb60 	bl	80071d8 <_calloc_r>
 8006b18:	b160      	cbz	r0, 8006b34 <_Balloc+0x64>
 8006b1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b1e:	e00e      	b.n	8006b3e <_Balloc+0x6e>
 8006b20:	2221      	movs	r2, #33	; 0x21
 8006b22:	2104      	movs	r1, #4
 8006b24:	4620      	mov	r0, r4
 8006b26:	f000 fb57 	bl	80071d8 <_calloc_r>
 8006b2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b2c:	60f0      	str	r0, [r6, #12]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1e4      	bne.n	8006afe <_Balloc+0x2e>
 8006b34:	2000      	movs	r0, #0
 8006b36:	bd70      	pop	{r4, r5, r6, pc}
 8006b38:	6802      	ldr	r2, [r0, #0]
 8006b3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b3e:	2300      	movs	r3, #0
 8006b40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b44:	e7f7      	b.n	8006b36 <_Balloc+0x66>
 8006b46:	bf00      	nop
 8006b48:	08008e31 	.word	0x08008e31
 8006b4c:	08008f14 	.word	0x08008f14

08006b50 <_Bfree>:
 8006b50:	b570      	push	{r4, r5, r6, lr}
 8006b52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006b54:	4605      	mov	r5, r0
 8006b56:	460c      	mov	r4, r1
 8006b58:	b976      	cbnz	r6, 8006b78 <_Bfree+0x28>
 8006b5a:	2010      	movs	r0, #16
 8006b5c:	f7ff ffb0 	bl	8006ac0 <malloc>
 8006b60:	4602      	mov	r2, r0
 8006b62:	6268      	str	r0, [r5, #36]	; 0x24
 8006b64:	b920      	cbnz	r0, 8006b70 <_Bfree+0x20>
 8006b66:	4b09      	ldr	r3, [pc, #36]	; (8006b8c <_Bfree+0x3c>)
 8006b68:	4809      	ldr	r0, [pc, #36]	; (8006b90 <_Bfree+0x40>)
 8006b6a:	218a      	movs	r1, #138	; 0x8a
 8006b6c:	f000 feaa 	bl	80078c4 <__assert_func>
 8006b70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b74:	6006      	str	r6, [r0, #0]
 8006b76:	60c6      	str	r6, [r0, #12]
 8006b78:	b13c      	cbz	r4, 8006b8a <_Bfree+0x3a>
 8006b7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b7c:	6862      	ldr	r2, [r4, #4]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b84:	6021      	str	r1, [r4, #0]
 8006b86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b8a:	bd70      	pop	{r4, r5, r6, pc}
 8006b8c:	08008e31 	.word	0x08008e31
 8006b90:	08008f14 	.word	0x08008f14

08006b94 <__multadd>:
 8006b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b98:	690d      	ldr	r5, [r1, #16]
 8006b9a:	4607      	mov	r7, r0
 8006b9c:	460c      	mov	r4, r1
 8006b9e:	461e      	mov	r6, r3
 8006ba0:	f101 0c14 	add.w	ip, r1, #20
 8006ba4:	2000      	movs	r0, #0
 8006ba6:	f8dc 3000 	ldr.w	r3, [ip]
 8006baa:	b299      	uxth	r1, r3
 8006bac:	fb02 6101 	mla	r1, r2, r1, r6
 8006bb0:	0c1e      	lsrs	r6, r3, #16
 8006bb2:	0c0b      	lsrs	r3, r1, #16
 8006bb4:	fb02 3306 	mla	r3, r2, r6, r3
 8006bb8:	b289      	uxth	r1, r1
 8006bba:	3001      	adds	r0, #1
 8006bbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006bc0:	4285      	cmp	r5, r0
 8006bc2:	f84c 1b04 	str.w	r1, [ip], #4
 8006bc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006bca:	dcec      	bgt.n	8006ba6 <__multadd+0x12>
 8006bcc:	b30e      	cbz	r6, 8006c12 <__multadd+0x7e>
 8006bce:	68a3      	ldr	r3, [r4, #8]
 8006bd0:	42ab      	cmp	r3, r5
 8006bd2:	dc19      	bgt.n	8006c08 <__multadd+0x74>
 8006bd4:	6861      	ldr	r1, [r4, #4]
 8006bd6:	4638      	mov	r0, r7
 8006bd8:	3101      	adds	r1, #1
 8006bda:	f7ff ff79 	bl	8006ad0 <_Balloc>
 8006bde:	4680      	mov	r8, r0
 8006be0:	b928      	cbnz	r0, 8006bee <__multadd+0x5a>
 8006be2:	4602      	mov	r2, r0
 8006be4:	4b0c      	ldr	r3, [pc, #48]	; (8006c18 <__multadd+0x84>)
 8006be6:	480d      	ldr	r0, [pc, #52]	; (8006c1c <__multadd+0x88>)
 8006be8:	21b5      	movs	r1, #181	; 0xb5
 8006bea:	f000 fe6b 	bl	80078c4 <__assert_func>
 8006bee:	6922      	ldr	r2, [r4, #16]
 8006bf0:	3202      	adds	r2, #2
 8006bf2:	f104 010c 	add.w	r1, r4, #12
 8006bf6:	0092      	lsls	r2, r2, #2
 8006bf8:	300c      	adds	r0, #12
 8006bfa:	f7fe fb4f 	bl	800529c <memcpy>
 8006bfe:	4621      	mov	r1, r4
 8006c00:	4638      	mov	r0, r7
 8006c02:	f7ff ffa5 	bl	8006b50 <_Bfree>
 8006c06:	4644      	mov	r4, r8
 8006c08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c0c:	3501      	adds	r5, #1
 8006c0e:	615e      	str	r6, [r3, #20]
 8006c10:	6125      	str	r5, [r4, #16]
 8006c12:	4620      	mov	r0, r4
 8006c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c18:	08008ea3 	.word	0x08008ea3
 8006c1c:	08008f14 	.word	0x08008f14

08006c20 <__hi0bits>:
 8006c20:	0c03      	lsrs	r3, r0, #16
 8006c22:	041b      	lsls	r3, r3, #16
 8006c24:	b9d3      	cbnz	r3, 8006c5c <__hi0bits+0x3c>
 8006c26:	0400      	lsls	r0, r0, #16
 8006c28:	2310      	movs	r3, #16
 8006c2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006c2e:	bf04      	itt	eq
 8006c30:	0200      	lsleq	r0, r0, #8
 8006c32:	3308      	addeq	r3, #8
 8006c34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006c38:	bf04      	itt	eq
 8006c3a:	0100      	lsleq	r0, r0, #4
 8006c3c:	3304      	addeq	r3, #4
 8006c3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006c42:	bf04      	itt	eq
 8006c44:	0080      	lsleq	r0, r0, #2
 8006c46:	3302      	addeq	r3, #2
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	db05      	blt.n	8006c58 <__hi0bits+0x38>
 8006c4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006c50:	f103 0301 	add.w	r3, r3, #1
 8006c54:	bf08      	it	eq
 8006c56:	2320      	moveq	r3, #32
 8006c58:	4618      	mov	r0, r3
 8006c5a:	4770      	bx	lr
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	e7e4      	b.n	8006c2a <__hi0bits+0xa>

08006c60 <__lo0bits>:
 8006c60:	6803      	ldr	r3, [r0, #0]
 8006c62:	f013 0207 	ands.w	r2, r3, #7
 8006c66:	4601      	mov	r1, r0
 8006c68:	d00b      	beq.n	8006c82 <__lo0bits+0x22>
 8006c6a:	07da      	lsls	r2, r3, #31
 8006c6c:	d423      	bmi.n	8006cb6 <__lo0bits+0x56>
 8006c6e:	0798      	lsls	r0, r3, #30
 8006c70:	bf49      	itett	mi
 8006c72:	085b      	lsrmi	r3, r3, #1
 8006c74:	089b      	lsrpl	r3, r3, #2
 8006c76:	2001      	movmi	r0, #1
 8006c78:	600b      	strmi	r3, [r1, #0]
 8006c7a:	bf5c      	itt	pl
 8006c7c:	600b      	strpl	r3, [r1, #0]
 8006c7e:	2002      	movpl	r0, #2
 8006c80:	4770      	bx	lr
 8006c82:	b298      	uxth	r0, r3
 8006c84:	b9a8      	cbnz	r0, 8006cb2 <__lo0bits+0x52>
 8006c86:	0c1b      	lsrs	r3, r3, #16
 8006c88:	2010      	movs	r0, #16
 8006c8a:	b2da      	uxtb	r2, r3
 8006c8c:	b90a      	cbnz	r2, 8006c92 <__lo0bits+0x32>
 8006c8e:	3008      	adds	r0, #8
 8006c90:	0a1b      	lsrs	r3, r3, #8
 8006c92:	071a      	lsls	r2, r3, #28
 8006c94:	bf04      	itt	eq
 8006c96:	091b      	lsreq	r3, r3, #4
 8006c98:	3004      	addeq	r0, #4
 8006c9a:	079a      	lsls	r2, r3, #30
 8006c9c:	bf04      	itt	eq
 8006c9e:	089b      	lsreq	r3, r3, #2
 8006ca0:	3002      	addeq	r0, #2
 8006ca2:	07da      	lsls	r2, r3, #31
 8006ca4:	d403      	bmi.n	8006cae <__lo0bits+0x4e>
 8006ca6:	085b      	lsrs	r3, r3, #1
 8006ca8:	f100 0001 	add.w	r0, r0, #1
 8006cac:	d005      	beq.n	8006cba <__lo0bits+0x5a>
 8006cae:	600b      	str	r3, [r1, #0]
 8006cb0:	4770      	bx	lr
 8006cb2:	4610      	mov	r0, r2
 8006cb4:	e7e9      	b.n	8006c8a <__lo0bits+0x2a>
 8006cb6:	2000      	movs	r0, #0
 8006cb8:	4770      	bx	lr
 8006cba:	2020      	movs	r0, #32
 8006cbc:	4770      	bx	lr
	...

08006cc0 <__i2b>:
 8006cc0:	b510      	push	{r4, lr}
 8006cc2:	460c      	mov	r4, r1
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	f7ff ff03 	bl	8006ad0 <_Balloc>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	b928      	cbnz	r0, 8006cda <__i2b+0x1a>
 8006cce:	4b05      	ldr	r3, [pc, #20]	; (8006ce4 <__i2b+0x24>)
 8006cd0:	4805      	ldr	r0, [pc, #20]	; (8006ce8 <__i2b+0x28>)
 8006cd2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006cd6:	f000 fdf5 	bl	80078c4 <__assert_func>
 8006cda:	2301      	movs	r3, #1
 8006cdc:	6144      	str	r4, [r0, #20]
 8006cde:	6103      	str	r3, [r0, #16]
 8006ce0:	bd10      	pop	{r4, pc}
 8006ce2:	bf00      	nop
 8006ce4:	08008ea3 	.word	0x08008ea3
 8006ce8:	08008f14 	.word	0x08008f14

08006cec <__multiply>:
 8006cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf0:	4691      	mov	r9, r2
 8006cf2:	690a      	ldr	r2, [r1, #16]
 8006cf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	bfb8      	it	lt
 8006cfc:	460b      	movlt	r3, r1
 8006cfe:	460c      	mov	r4, r1
 8006d00:	bfbc      	itt	lt
 8006d02:	464c      	movlt	r4, r9
 8006d04:	4699      	movlt	r9, r3
 8006d06:	6927      	ldr	r7, [r4, #16]
 8006d08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006d0c:	68a3      	ldr	r3, [r4, #8]
 8006d0e:	6861      	ldr	r1, [r4, #4]
 8006d10:	eb07 060a 	add.w	r6, r7, sl
 8006d14:	42b3      	cmp	r3, r6
 8006d16:	b085      	sub	sp, #20
 8006d18:	bfb8      	it	lt
 8006d1a:	3101      	addlt	r1, #1
 8006d1c:	f7ff fed8 	bl	8006ad0 <_Balloc>
 8006d20:	b930      	cbnz	r0, 8006d30 <__multiply+0x44>
 8006d22:	4602      	mov	r2, r0
 8006d24:	4b44      	ldr	r3, [pc, #272]	; (8006e38 <__multiply+0x14c>)
 8006d26:	4845      	ldr	r0, [pc, #276]	; (8006e3c <__multiply+0x150>)
 8006d28:	f240 115d 	movw	r1, #349	; 0x15d
 8006d2c:	f000 fdca 	bl	80078c4 <__assert_func>
 8006d30:	f100 0514 	add.w	r5, r0, #20
 8006d34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006d38:	462b      	mov	r3, r5
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	4543      	cmp	r3, r8
 8006d3e:	d321      	bcc.n	8006d84 <__multiply+0x98>
 8006d40:	f104 0314 	add.w	r3, r4, #20
 8006d44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006d48:	f109 0314 	add.w	r3, r9, #20
 8006d4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006d50:	9202      	str	r2, [sp, #8]
 8006d52:	1b3a      	subs	r2, r7, r4
 8006d54:	3a15      	subs	r2, #21
 8006d56:	f022 0203 	bic.w	r2, r2, #3
 8006d5a:	3204      	adds	r2, #4
 8006d5c:	f104 0115 	add.w	r1, r4, #21
 8006d60:	428f      	cmp	r7, r1
 8006d62:	bf38      	it	cc
 8006d64:	2204      	movcc	r2, #4
 8006d66:	9201      	str	r2, [sp, #4]
 8006d68:	9a02      	ldr	r2, [sp, #8]
 8006d6a:	9303      	str	r3, [sp, #12]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d80c      	bhi.n	8006d8a <__multiply+0x9e>
 8006d70:	2e00      	cmp	r6, #0
 8006d72:	dd03      	ble.n	8006d7c <__multiply+0x90>
 8006d74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d05a      	beq.n	8006e32 <__multiply+0x146>
 8006d7c:	6106      	str	r6, [r0, #16]
 8006d7e:	b005      	add	sp, #20
 8006d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d84:	f843 2b04 	str.w	r2, [r3], #4
 8006d88:	e7d8      	b.n	8006d3c <__multiply+0x50>
 8006d8a:	f8b3 a000 	ldrh.w	sl, [r3]
 8006d8e:	f1ba 0f00 	cmp.w	sl, #0
 8006d92:	d024      	beq.n	8006dde <__multiply+0xf2>
 8006d94:	f104 0e14 	add.w	lr, r4, #20
 8006d98:	46a9      	mov	r9, r5
 8006d9a:	f04f 0c00 	mov.w	ip, #0
 8006d9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006da2:	f8d9 1000 	ldr.w	r1, [r9]
 8006da6:	fa1f fb82 	uxth.w	fp, r2
 8006daa:	b289      	uxth	r1, r1
 8006dac:	fb0a 110b 	mla	r1, sl, fp, r1
 8006db0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006db4:	f8d9 2000 	ldr.w	r2, [r9]
 8006db8:	4461      	add	r1, ip
 8006dba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006dbe:	fb0a c20b 	mla	r2, sl, fp, ip
 8006dc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006dc6:	b289      	uxth	r1, r1
 8006dc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006dcc:	4577      	cmp	r7, lr
 8006dce:	f849 1b04 	str.w	r1, [r9], #4
 8006dd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006dd6:	d8e2      	bhi.n	8006d9e <__multiply+0xb2>
 8006dd8:	9a01      	ldr	r2, [sp, #4]
 8006dda:	f845 c002 	str.w	ip, [r5, r2]
 8006dde:	9a03      	ldr	r2, [sp, #12]
 8006de0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006de4:	3304      	adds	r3, #4
 8006de6:	f1b9 0f00 	cmp.w	r9, #0
 8006dea:	d020      	beq.n	8006e2e <__multiply+0x142>
 8006dec:	6829      	ldr	r1, [r5, #0]
 8006dee:	f104 0c14 	add.w	ip, r4, #20
 8006df2:	46ae      	mov	lr, r5
 8006df4:	f04f 0a00 	mov.w	sl, #0
 8006df8:	f8bc b000 	ldrh.w	fp, [ip]
 8006dfc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006e00:	fb09 220b 	mla	r2, r9, fp, r2
 8006e04:	4492      	add	sl, r2
 8006e06:	b289      	uxth	r1, r1
 8006e08:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006e0c:	f84e 1b04 	str.w	r1, [lr], #4
 8006e10:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006e14:	f8be 1000 	ldrh.w	r1, [lr]
 8006e18:	0c12      	lsrs	r2, r2, #16
 8006e1a:	fb09 1102 	mla	r1, r9, r2, r1
 8006e1e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006e22:	4567      	cmp	r7, ip
 8006e24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006e28:	d8e6      	bhi.n	8006df8 <__multiply+0x10c>
 8006e2a:	9a01      	ldr	r2, [sp, #4]
 8006e2c:	50a9      	str	r1, [r5, r2]
 8006e2e:	3504      	adds	r5, #4
 8006e30:	e79a      	b.n	8006d68 <__multiply+0x7c>
 8006e32:	3e01      	subs	r6, #1
 8006e34:	e79c      	b.n	8006d70 <__multiply+0x84>
 8006e36:	bf00      	nop
 8006e38:	08008ea3 	.word	0x08008ea3
 8006e3c:	08008f14 	.word	0x08008f14

08006e40 <__pow5mult>:
 8006e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e44:	4615      	mov	r5, r2
 8006e46:	f012 0203 	ands.w	r2, r2, #3
 8006e4a:	4606      	mov	r6, r0
 8006e4c:	460f      	mov	r7, r1
 8006e4e:	d007      	beq.n	8006e60 <__pow5mult+0x20>
 8006e50:	4c25      	ldr	r4, [pc, #148]	; (8006ee8 <__pow5mult+0xa8>)
 8006e52:	3a01      	subs	r2, #1
 8006e54:	2300      	movs	r3, #0
 8006e56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006e5a:	f7ff fe9b 	bl	8006b94 <__multadd>
 8006e5e:	4607      	mov	r7, r0
 8006e60:	10ad      	asrs	r5, r5, #2
 8006e62:	d03d      	beq.n	8006ee0 <__pow5mult+0xa0>
 8006e64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006e66:	b97c      	cbnz	r4, 8006e88 <__pow5mult+0x48>
 8006e68:	2010      	movs	r0, #16
 8006e6a:	f7ff fe29 	bl	8006ac0 <malloc>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	6270      	str	r0, [r6, #36]	; 0x24
 8006e72:	b928      	cbnz	r0, 8006e80 <__pow5mult+0x40>
 8006e74:	4b1d      	ldr	r3, [pc, #116]	; (8006eec <__pow5mult+0xac>)
 8006e76:	481e      	ldr	r0, [pc, #120]	; (8006ef0 <__pow5mult+0xb0>)
 8006e78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006e7c:	f000 fd22 	bl	80078c4 <__assert_func>
 8006e80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e84:	6004      	str	r4, [r0, #0]
 8006e86:	60c4      	str	r4, [r0, #12]
 8006e88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006e8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e90:	b94c      	cbnz	r4, 8006ea6 <__pow5mult+0x66>
 8006e92:	f240 2171 	movw	r1, #625	; 0x271
 8006e96:	4630      	mov	r0, r6
 8006e98:	f7ff ff12 	bl	8006cc0 <__i2b>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	6003      	str	r3, [r0, #0]
 8006ea6:	f04f 0900 	mov.w	r9, #0
 8006eaa:	07eb      	lsls	r3, r5, #31
 8006eac:	d50a      	bpl.n	8006ec4 <__pow5mult+0x84>
 8006eae:	4639      	mov	r1, r7
 8006eb0:	4622      	mov	r2, r4
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	f7ff ff1a 	bl	8006cec <__multiply>
 8006eb8:	4639      	mov	r1, r7
 8006eba:	4680      	mov	r8, r0
 8006ebc:	4630      	mov	r0, r6
 8006ebe:	f7ff fe47 	bl	8006b50 <_Bfree>
 8006ec2:	4647      	mov	r7, r8
 8006ec4:	106d      	asrs	r5, r5, #1
 8006ec6:	d00b      	beq.n	8006ee0 <__pow5mult+0xa0>
 8006ec8:	6820      	ldr	r0, [r4, #0]
 8006eca:	b938      	cbnz	r0, 8006edc <__pow5mult+0x9c>
 8006ecc:	4622      	mov	r2, r4
 8006ece:	4621      	mov	r1, r4
 8006ed0:	4630      	mov	r0, r6
 8006ed2:	f7ff ff0b 	bl	8006cec <__multiply>
 8006ed6:	6020      	str	r0, [r4, #0]
 8006ed8:	f8c0 9000 	str.w	r9, [r0]
 8006edc:	4604      	mov	r4, r0
 8006ede:	e7e4      	b.n	8006eaa <__pow5mult+0x6a>
 8006ee0:	4638      	mov	r0, r7
 8006ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ee6:	bf00      	nop
 8006ee8:	08009060 	.word	0x08009060
 8006eec:	08008e31 	.word	0x08008e31
 8006ef0:	08008f14 	.word	0x08008f14

08006ef4 <__lshift>:
 8006ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ef8:	460c      	mov	r4, r1
 8006efa:	6849      	ldr	r1, [r1, #4]
 8006efc:	6923      	ldr	r3, [r4, #16]
 8006efe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f02:	68a3      	ldr	r3, [r4, #8]
 8006f04:	4607      	mov	r7, r0
 8006f06:	4691      	mov	r9, r2
 8006f08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f0c:	f108 0601 	add.w	r6, r8, #1
 8006f10:	42b3      	cmp	r3, r6
 8006f12:	db0b      	blt.n	8006f2c <__lshift+0x38>
 8006f14:	4638      	mov	r0, r7
 8006f16:	f7ff fddb 	bl	8006ad0 <_Balloc>
 8006f1a:	4605      	mov	r5, r0
 8006f1c:	b948      	cbnz	r0, 8006f32 <__lshift+0x3e>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	4b2a      	ldr	r3, [pc, #168]	; (8006fcc <__lshift+0xd8>)
 8006f22:	482b      	ldr	r0, [pc, #172]	; (8006fd0 <__lshift+0xdc>)
 8006f24:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006f28:	f000 fccc 	bl	80078c4 <__assert_func>
 8006f2c:	3101      	adds	r1, #1
 8006f2e:	005b      	lsls	r3, r3, #1
 8006f30:	e7ee      	b.n	8006f10 <__lshift+0x1c>
 8006f32:	2300      	movs	r3, #0
 8006f34:	f100 0114 	add.w	r1, r0, #20
 8006f38:	f100 0210 	add.w	r2, r0, #16
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	4553      	cmp	r3, sl
 8006f40:	db37      	blt.n	8006fb2 <__lshift+0xbe>
 8006f42:	6920      	ldr	r0, [r4, #16]
 8006f44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f48:	f104 0314 	add.w	r3, r4, #20
 8006f4c:	f019 091f 	ands.w	r9, r9, #31
 8006f50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006f58:	d02f      	beq.n	8006fba <__lshift+0xc6>
 8006f5a:	f1c9 0e20 	rsb	lr, r9, #32
 8006f5e:	468a      	mov	sl, r1
 8006f60:	f04f 0c00 	mov.w	ip, #0
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	fa02 f209 	lsl.w	r2, r2, r9
 8006f6a:	ea42 020c 	orr.w	r2, r2, ip
 8006f6e:	f84a 2b04 	str.w	r2, [sl], #4
 8006f72:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f76:	4298      	cmp	r0, r3
 8006f78:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006f7c:	d8f2      	bhi.n	8006f64 <__lshift+0x70>
 8006f7e:	1b03      	subs	r3, r0, r4
 8006f80:	3b15      	subs	r3, #21
 8006f82:	f023 0303 	bic.w	r3, r3, #3
 8006f86:	3304      	adds	r3, #4
 8006f88:	f104 0215 	add.w	r2, r4, #21
 8006f8c:	4290      	cmp	r0, r2
 8006f8e:	bf38      	it	cc
 8006f90:	2304      	movcc	r3, #4
 8006f92:	f841 c003 	str.w	ip, [r1, r3]
 8006f96:	f1bc 0f00 	cmp.w	ip, #0
 8006f9a:	d001      	beq.n	8006fa0 <__lshift+0xac>
 8006f9c:	f108 0602 	add.w	r6, r8, #2
 8006fa0:	3e01      	subs	r6, #1
 8006fa2:	4638      	mov	r0, r7
 8006fa4:	612e      	str	r6, [r5, #16]
 8006fa6:	4621      	mov	r1, r4
 8006fa8:	f7ff fdd2 	bl	8006b50 <_Bfree>
 8006fac:	4628      	mov	r0, r5
 8006fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fb2:	f842 0f04 	str.w	r0, [r2, #4]!
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	e7c1      	b.n	8006f3e <__lshift+0x4a>
 8006fba:	3904      	subs	r1, #4
 8006fbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fc0:	f841 2f04 	str.w	r2, [r1, #4]!
 8006fc4:	4298      	cmp	r0, r3
 8006fc6:	d8f9      	bhi.n	8006fbc <__lshift+0xc8>
 8006fc8:	e7ea      	b.n	8006fa0 <__lshift+0xac>
 8006fca:	bf00      	nop
 8006fcc:	08008ea3 	.word	0x08008ea3
 8006fd0:	08008f14 	.word	0x08008f14

08006fd4 <__mcmp>:
 8006fd4:	b530      	push	{r4, r5, lr}
 8006fd6:	6902      	ldr	r2, [r0, #16]
 8006fd8:	690c      	ldr	r4, [r1, #16]
 8006fda:	1b12      	subs	r2, r2, r4
 8006fdc:	d10e      	bne.n	8006ffc <__mcmp+0x28>
 8006fde:	f100 0314 	add.w	r3, r0, #20
 8006fe2:	3114      	adds	r1, #20
 8006fe4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006fe8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006fec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006ff0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006ff4:	42a5      	cmp	r5, r4
 8006ff6:	d003      	beq.n	8007000 <__mcmp+0x2c>
 8006ff8:	d305      	bcc.n	8007006 <__mcmp+0x32>
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	4610      	mov	r0, r2
 8006ffe:	bd30      	pop	{r4, r5, pc}
 8007000:	4283      	cmp	r3, r0
 8007002:	d3f3      	bcc.n	8006fec <__mcmp+0x18>
 8007004:	e7fa      	b.n	8006ffc <__mcmp+0x28>
 8007006:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800700a:	e7f7      	b.n	8006ffc <__mcmp+0x28>

0800700c <__mdiff>:
 800700c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007010:	460c      	mov	r4, r1
 8007012:	4606      	mov	r6, r0
 8007014:	4611      	mov	r1, r2
 8007016:	4620      	mov	r0, r4
 8007018:	4690      	mov	r8, r2
 800701a:	f7ff ffdb 	bl	8006fd4 <__mcmp>
 800701e:	1e05      	subs	r5, r0, #0
 8007020:	d110      	bne.n	8007044 <__mdiff+0x38>
 8007022:	4629      	mov	r1, r5
 8007024:	4630      	mov	r0, r6
 8007026:	f7ff fd53 	bl	8006ad0 <_Balloc>
 800702a:	b930      	cbnz	r0, 800703a <__mdiff+0x2e>
 800702c:	4b3a      	ldr	r3, [pc, #232]	; (8007118 <__mdiff+0x10c>)
 800702e:	4602      	mov	r2, r0
 8007030:	f240 2132 	movw	r1, #562	; 0x232
 8007034:	4839      	ldr	r0, [pc, #228]	; (800711c <__mdiff+0x110>)
 8007036:	f000 fc45 	bl	80078c4 <__assert_func>
 800703a:	2301      	movs	r3, #1
 800703c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007040:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007044:	bfa4      	itt	ge
 8007046:	4643      	movge	r3, r8
 8007048:	46a0      	movge	r8, r4
 800704a:	4630      	mov	r0, r6
 800704c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007050:	bfa6      	itte	ge
 8007052:	461c      	movge	r4, r3
 8007054:	2500      	movge	r5, #0
 8007056:	2501      	movlt	r5, #1
 8007058:	f7ff fd3a 	bl	8006ad0 <_Balloc>
 800705c:	b920      	cbnz	r0, 8007068 <__mdiff+0x5c>
 800705e:	4b2e      	ldr	r3, [pc, #184]	; (8007118 <__mdiff+0x10c>)
 8007060:	4602      	mov	r2, r0
 8007062:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007066:	e7e5      	b.n	8007034 <__mdiff+0x28>
 8007068:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800706c:	6926      	ldr	r6, [r4, #16]
 800706e:	60c5      	str	r5, [r0, #12]
 8007070:	f104 0914 	add.w	r9, r4, #20
 8007074:	f108 0514 	add.w	r5, r8, #20
 8007078:	f100 0e14 	add.w	lr, r0, #20
 800707c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007080:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007084:	f108 0210 	add.w	r2, r8, #16
 8007088:	46f2      	mov	sl, lr
 800708a:	2100      	movs	r1, #0
 800708c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007090:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007094:	fa1f f883 	uxth.w	r8, r3
 8007098:	fa11 f18b 	uxtah	r1, r1, fp
 800709c:	0c1b      	lsrs	r3, r3, #16
 800709e:	eba1 0808 	sub.w	r8, r1, r8
 80070a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80070a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80070aa:	fa1f f888 	uxth.w	r8, r8
 80070ae:	1419      	asrs	r1, r3, #16
 80070b0:	454e      	cmp	r6, r9
 80070b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80070b6:	f84a 3b04 	str.w	r3, [sl], #4
 80070ba:	d8e7      	bhi.n	800708c <__mdiff+0x80>
 80070bc:	1b33      	subs	r3, r6, r4
 80070be:	3b15      	subs	r3, #21
 80070c0:	f023 0303 	bic.w	r3, r3, #3
 80070c4:	3304      	adds	r3, #4
 80070c6:	3415      	adds	r4, #21
 80070c8:	42a6      	cmp	r6, r4
 80070ca:	bf38      	it	cc
 80070cc:	2304      	movcc	r3, #4
 80070ce:	441d      	add	r5, r3
 80070d0:	4473      	add	r3, lr
 80070d2:	469e      	mov	lr, r3
 80070d4:	462e      	mov	r6, r5
 80070d6:	4566      	cmp	r6, ip
 80070d8:	d30e      	bcc.n	80070f8 <__mdiff+0xec>
 80070da:	f10c 0203 	add.w	r2, ip, #3
 80070de:	1b52      	subs	r2, r2, r5
 80070e0:	f022 0203 	bic.w	r2, r2, #3
 80070e4:	3d03      	subs	r5, #3
 80070e6:	45ac      	cmp	ip, r5
 80070e8:	bf38      	it	cc
 80070ea:	2200      	movcc	r2, #0
 80070ec:	441a      	add	r2, r3
 80070ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80070f2:	b17b      	cbz	r3, 8007114 <__mdiff+0x108>
 80070f4:	6107      	str	r7, [r0, #16]
 80070f6:	e7a3      	b.n	8007040 <__mdiff+0x34>
 80070f8:	f856 8b04 	ldr.w	r8, [r6], #4
 80070fc:	fa11 f288 	uxtah	r2, r1, r8
 8007100:	1414      	asrs	r4, r2, #16
 8007102:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007106:	b292      	uxth	r2, r2
 8007108:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800710c:	f84e 2b04 	str.w	r2, [lr], #4
 8007110:	1421      	asrs	r1, r4, #16
 8007112:	e7e0      	b.n	80070d6 <__mdiff+0xca>
 8007114:	3f01      	subs	r7, #1
 8007116:	e7ea      	b.n	80070ee <__mdiff+0xe2>
 8007118:	08008ea3 	.word	0x08008ea3
 800711c:	08008f14 	.word	0x08008f14

08007120 <__d2b>:
 8007120:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007124:	4689      	mov	r9, r1
 8007126:	2101      	movs	r1, #1
 8007128:	ec57 6b10 	vmov	r6, r7, d0
 800712c:	4690      	mov	r8, r2
 800712e:	f7ff fccf 	bl	8006ad0 <_Balloc>
 8007132:	4604      	mov	r4, r0
 8007134:	b930      	cbnz	r0, 8007144 <__d2b+0x24>
 8007136:	4602      	mov	r2, r0
 8007138:	4b25      	ldr	r3, [pc, #148]	; (80071d0 <__d2b+0xb0>)
 800713a:	4826      	ldr	r0, [pc, #152]	; (80071d4 <__d2b+0xb4>)
 800713c:	f240 310a 	movw	r1, #778	; 0x30a
 8007140:	f000 fbc0 	bl	80078c4 <__assert_func>
 8007144:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007148:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800714c:	bb35      	cbnz	r5, 800719c <__d2b+0x7c>
 800714e:	2e00      	cmp	r6, #0
 8007150:	9301      	str	r3, [sp, #4]
 8007152:	d028      	beq.n	80071a6 <__d2b+0x86>
 8007154:	4668      	mov	r0, sp
 8007156:	9600      	str	r6, [sp, #0]
 8007158:	f7ff fd82 	bl	8006c60 <__lo0bits>
 800715c:	9900      	ldr	r1, [sp, #0]
 800715e:	b300      	cbz	r0, 80071a2 <__d2b+0x82>
 8007160:	9a01      	ldr	r2, [sp, #4]
 8007162:	f1c0 0320 	rsb	r3, r0, #32
 8007166:	fa02 f303 	lsl.w	r3, r2, r3
 800716a:	430b      	orrs	r3, r1
 800716c:	40c2      	lsrs	r2, r0
 800716e:	6163      	str	r3, [r4, #20]
 8007170:	9201      	str	r2, [sp, #4]
 8007172:	9b01      	ldr	r3, [sp, #4]
 8007174:	61a3      	str	r3, [r4, #24]
 8007176:	2b00      	cmp	r3, #0
 8007178:	bf14      	ite	ne
 800717a:	2202      	movne	r2, #2
 800717c:	2201      	moveq	r2, #1
 800717e:	6122      	str	r2, [r4, #16]
 8007180:	b1d5      	cbz	r5, 80071b8 <__d2b+0x98>
 8007182:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007186:	4405      	add	r5, r0
 8007188:	f8c9 5000 	str.w	r5, [r9]
 800718c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007190:	f8c8 0000 	str.w	r0, [r8]
 8007194:	4620      	mov	r0, r4
 8007196:	b003      	add	sp, #12
 8007198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800719c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071a0:	e7d5      	b.n	800714e <__d2b+0x2e>
 80071a2:	6161      	str	r1, [r4, #20]
 80071a4:	e7e5      	b.n	8007172 <__d2b+0x52>
 80071a6:	a801      	add	r0, sp, #4
 80071a8:	f7ff fd5a 	bl	8006c60 <__lo0bits>
 80071ac:	9b01      	ldr	r3, [sp, #4]
 80071ae:	6163      	str	r3, [r4, #20]
 80071b0:	2201      	movs	r2, #1
 80071b2:	6122      	str	r2, [r4, #16]
 80071b4:	3020      	adds	r0, #32
 80071b6:	e7e3      	b.n	8007180 <__d2b+0x60>
 80071b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80071bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80071c0:	f8c9 0000 	str.w	r0, [r9]
 80071c4:	6918      	ldr	r0, [r3, #16]
 80071c6:	f7ff fd2b 	bl	8006c20 <__hi0bits>
 80071ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80071ce:	e7df      	b.n	8007190 <__d2b+0x70>
 80071d0:	08008ea3 	.word	0x08008ea3
 80071d4:	08008f14 	.word	0x08008f14

080071d8 <_calloc_r>:
 80071d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071da:	fba1 2402 	umull	r2, r4, r1, r2
 80071de:	b94c      	cbnz	r4, 80071f4 <_calloc_r+0x1c>
 80071e0:	4611      	mov	r1, r2
 80071e2:	9201      	str	r2, [sp, #4]
 80071e4:	f000 f87a 	bl	80072dc <_malloc_r>
 80071e8:	9a01      	ldr	r2, [sp, #4]
 80071ea:	4605      	mov	r5, r0
 80071ec:	b930      	cbnz	r0, 80071fc <_calloc_r+0x24>
 80071ee:	4628      	mov	r0, r5
 80071f0:	b003      	add	sp, #12
 80071f2:	bd30      	pop	{r4, r5, pc}
 80071f4:	220c      	movs	r2, #12
 80071f6:	6002      	str	r2, [r0, #0]
 80071f8:	2500      	movs	r5, #0
 80071fa:	e7f8      	b.n	80071ee <_calloc_r+0x16>
 80071fc:	4621      	mov	r1, r4
 80071fe:	f7fe f85b 	bl	80052b8 <memset>
 8007202:	e7f4      	b.n	80071ee <_calloc_r+0x16>

08007204 <_free_r>:
 8007204:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007206:	2900      	cmp	r1, #0
 8007208:	d044      	beq.n	8007294 <_free_r+0x90>
 800720a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800720e:	9001      	str	r0, [sp, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	f1a1 0404 	sub.w	r4, r1, #4
 8007216:	bfb8      	it	lt
 8007218:	18e4      	addlt	r4, r4, r3
 800721a:	f000 fcdf 	bl	8007bdc <__malloc_lock>
 800721e:	4a1e      	ldr	r2, [pc, #120]	; (8007298 <_free_r+0x94>)
 8007220:	9801      	ldr	r0, [sp, #4]
 8007222:	6813      	ldr	r3, [r2, #0]
 8007224:	b933      	cbnz	r3, 8007234 <_free_r+0x30>
 8007226:	6063      	str	r3, [r4, #4]
 8007228:	6014      	str	r4, [r2, #0]
 800722a:	b003      	add	sp, #12
 800722c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007230:	f000 bcda 	b.w	8007be8 <__malloc_unlock>
 8007234:	42a3      	cmp	r3, r4
 8007236:	d908      	bls.n	800724a <_free_r+0x46>
 8007238:	6825      	ldr	r5, [r4, #0]
 800723a:	1961      	adds	r1, r4, r5
 800723c:	428b      	cmp	r3, r1
 800723e:	bf01      	itttt	eq
 8007240:	6819      	ldreq	r1, [r3, #0]
 8007242:	685b      	ldreq	r3, [r3, #4]
 8007244:	1949      	addeq	r1, r1, r5
 8007246:	6021      	streq	r1, [r4, #0]
 8007248:	e7ed      	b.n	8007226 <_free_r+0x22>
 800724a:	461a      	mov	r2, r3
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	b10b      	cbz	r3, 8007254 <_free_r+0x50>
 8007250:	42a3      	cmp	r3, r4
 8007252:	d9fa      	bls.n	800724a <_free_r+0x46>
 8007254:	6811      	ldr	r1, [r2, #0]
 8007256:	1855      	adds	r5, r2, r1
 8007258:	42a5      	cmp	r5, r4
 800725a:	d10b      	bne.n	8007274 <_free_r+0x70>
 800725c:	6824      	ldr	r4, [r4, #0]
 800725e:	4421      	add	r1, r4
 8007260:	1854      	adds	r4, r2, r1
 8007262:	42a3      	cmp	r3, r4
 8007264:	6011      	str	r1, [r2, #0]
 8007266:	d1e0      	bne.n	800722a <_free_r+0x26>
 8007268:	681c      	ldr	r4, [r3, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	6053      	str	r3, [r2, #4]
 800726e:	4421      	add	r1, r4
 8007270:	6011      	str	r1, [r2, #0]
 8007272:	e7da      	b.n	800722a <_free_r+0x26>
 8007274:	d902      	bls.n	800727c <_free_r+0x78>
 8007276:	230c      	movs	r3, #12
 8007278:	6003      	str	r3, [r0, #0]
 800727a:	e7d6      	b.n	800722a <_free_r+0x26>
 800727c:	6825      	ldr	r5, [r4, #0]
 800727e:	1961      	adds	r1, r4, r5
 8007280:	428b      	cmp	r3, r1
 8007282:	bf04      	itt	eq
 8007284:	6819      	ldreq	r1, [r3, #0]
 8007286:	685b      	ldreq	r3, [r3, #4]
 8007288:	6063      	str	r3, [r4, #4]
 800728a:	bf04      	itt	eq
 800728c:	1949      	addeq	r1, r1, r5
 800728e:	6021      	streq	r1, [r4, #0]
 8007290:	6054      	str	r4, [r2, #4]
 8007292:	e7ca      	b.n	800722a <_free_r+0x26>
 8007294:	b003      	add	sp, #12
 8007296:	bd30      	pop	{r4, r5, pc}
 8007298:	20000294 	.word	0x20000294

0800729c <sbrk_aligned>:
 800729c:	b570      	push	{r4, r5, r6, lr}
 800729e:	4e0e      	ldr	r6, [pc, #56]	; (80072d8 <sbrk_aligned+0x3c>)
 80072a0:	460c      	mov	r4, r1
 80072a2:	6831      	ldr	r1, [r6, #0]
 80072a4:	4605      	mov	r5, r0
 80072a6:	b911      	cbnz	r1, 80072ae <sbrk_aligned+0x12>
 80072a8:	f000 f9e6 	bl	8007678 <_sbrk_r>
 80072ac:	6030      	str	r0, [r6, #0]
 80072ae:	4621      	mov	r1, r4
 80072b0:	4628      	mov	r0, r5
 80072b2:	f000 f9e1 	bl	8007678 <_sbrk_r>
 80072b6:	1c43      	adds	r3, r0, #1
 80072b8:	d00a      	beq.n	80072d0 <sbrk_aligned+0x34>
 80072ba:	1cc4      	adds	r4, r0, #3
 80072bc:	f024 0403 	bic.w	r4, r4, #3
 80072c0:	42a0      	cmp	r0, r4
 80072c2:	d007      	beq.n	80072d4 <sbrk_aligned+0x38>
 80072c4:	1a21      	subs	r1, r4, r0
 80072c6:	4628      	mov	r0, r5
 80072c8:	f000 f9d6 	bl	8007678 <_sbrk_r>
 80072cc:	3001      	adds	r0, #1
 80072ce:	d101      	bne.n	80072d4 <sbrk_aligned+0x38>
 80072d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80072d4:	4620      	mov	r0, r4
 80072d6:	bd70      	pop	{r4, r5, r6, pc}
 80072d8:	20000298 	.word	0x20000298

080072dc <_malloc_r>:
 80072dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072e0:	1ccd      	adds	r5, r1, #3
 80072e2:	f025 0503 	bic.w	r5, r5, #3
 80072e6:	3508      	adds	r5, #8
 80072e8:	2d0c      	cmp	r5, #12
 80072ea:	bf38      	it	cc
 80072ec:	250c      	movcc	r5, #12
 80072ee:	2d00      	cmp	r5, #0
 80072f0:	4607      	mov	r7, r0
 80072f2:	db01      	blt.n	80072f8 <_malloc_r+0x1c>
 80072f4:	42a9      	cmp	r1, r5
 80072f6:	d905      	bls.n	8007304 <_malloc_r+0x28>
 80072f8:	230c      	movs	r3, #12
 80072fa:	603b      	str	r3, [r7, #0]
 80072fc:	2600      	movs	r6, #0
 80072fe:	4630      	mov	r0, r6
 8007300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007304:	4e2e      	ldr	r6, [pc, #184]	; (80073c0 <_malloc_r+0xe4>)
 8007306:	f000 fc69 	bl	8007bdc <__malloc_lock>
 800730a:	6833      	ldr	r3, [r6, #0]
 800730c:	461c      	mov	r4, r3
 800730e:	bb34      	cbnz	r4, 800735e <_malloc_r+0x82>
 8007310:	4629      	mov	r1, r5
 8007312:	4638      	mov	r0, r7
 8007314:	f7ff ffc2 	bl	800729c <sbrk_aligned>
 8007318:	1c43      	adds	r3, r0, #1
 800731a:	4604      	mov	r4, r0
 800731c:	d14d      	bne.n	80073ba <_malloc_r+0xde>
 800731e:	6834      	ldr	r4, [r6, #0]
 8007320:	4626      	mov	r6, r4
 8007322:	2e00      	cmp	r6, #0
 8007324:	d140      	bne.n	80073a8 <_malloc_r+0xcc>
 8007326:	6823      	ldr	r3, [r4, #0]
 8007328:	4631      	mov	r1, r6
 800732a:	4638      	mov	r0, r7
 800732c:	eb04 0803 	add.w	r8, r4, r3
 8007330:	f000 f9a2 	bl	8007678 <_sbrk_r>
 8007334:	4580      	cmp	r8, r0
 8007336:	d13a      	bne.n	80073ae <_malloc_r+0xd2>
 8007338:	6821      	ldr	r1, [r4, #0]
 800733a:	3503      	adds	r5, #3
 800733c:	1a6d      	subs	r5, r5, r1
 800733e:	f025 0503 	bic.w	r5, r5, #3
 8007342:	3508      	adds	r5, #8
 8007344:	2d0c      	cmp	r5, #12
 8007346:	bf38      	it	cc
 8007348:	250c      	movcc	r5, #12
 800734a:	4629      	mov	r1, r5
 800734c:	4638      	mov	r0, r7
 800734e:	f7ff ffa5 	bl	800729c <sbrk_aligned>
 8007352:	3001      	adds	r0, #1
 8007354:	d02b      	beq.n	80073ae <_malloc_r+0xd2>
 8007356:	6823      	ldr	r3, [r4, #0]
 8007358:	442b      	add	r3, r5
 800735a:	6023      	str	r3, [r4, #0]
 800735c:	e00e      	b.n	800737c <_malloc_r+0xa0>
 800735e:	6822      	ldr	r2, [r4, #0]
 8007360:	1b52      	subs	r2, r2, r5
 8007362:	d41e      	bmi.n	80073a2 <_malloc_r+0xc6>
 8007364:	2a0b      	cmp	r2, #11
 8007366:	d916      	bls.n	8007396 <_malloc_r+0xba>
 8007368:	1961      	adds	r1, r4, r5
 800736a:	42a3      	cmp	r3, r4
 800736c:	6025      	str	r5, [r4, #0]
 800736e:	bf18      	it	ne
 8007370:	6059      	strne	r1, [r3, #4]
 8007372:	6863      	ldr	r3, [r4, #4]
 8007374:	bf08      	it	eq
 8007376:	6031      	streq	r1, [r6, #0]
 8007378:	5162      	str	r2, [r4, r5]
 800737a:	604b      	str	r3, [r1, #4]
 800737c:	4638      	mov	r0, r7
 800737e:	f104 060b 	add.w	r6, r4, #11
 8007382:	f000 fc31 	bl	8007be8 <__malloc_unlock>
 8007386:	f026 0607 	bic.w	r6, r6, #7
 800738a:	1d23      	adds	r3, r4, #4
 800738c:	1af2      	subs	r2, r6, r3
 800738e:	d0b6      	beq.n	80072fe <_malloc_r+0x22>
 8007390:	1b9b      	subs	r3, r3, r6
 8007392:	50a3      	str	r3, [r4, r2]
 8007394:	e7b3      	b.n	80072fe <_malloc_r+0x22>
 8007396:	6862      	ldr	r2, [r4, #4]
 8007398:	42a3      	cmp	r3, r4
 800739a:	bf0c      	ite	eq
 800739c:	6032      	streq	r2, [r6, #0]
 800739e:	605a      	strne	r2, [r3, #4]
 80073a0:	e7ec      	b.n	800737c <_malloc_r+0xa0>
 80073a2:	4623      	mov	r3, r4
 80073a4:	6864      	ldr	r4, [r4, #4]
 80073a6:	e7b2      	b.n	800730e <_malloc_r+0x32>
 80073a8:	4634      	mov	r4, r6
 80073aa:	6876      	ldr	r6, [r6, #4]
 80073ac:	e7b9      	b.n	8007322 <_malloc_r+0x46>
 80073ae:	230c      	movs	r3, #12
 80073b0:	603b      	str	r3, [r7, #0]
 80073b2:	4638      	mov	r0, r7
 80073b4:	f000 fc18 	bl	8007be8 <__malloc_unlock>
 80073b8:	e7a1      	b.n	80072fe <_malloc_r+0x22>
 80073ba:	6025      	str	r5, [r4, #0]
 80073bc:	e7de      	b.n	800737c <_malloc_r+0xa0>
 80073be:	bf00      	nop
 80073c0:	20000294 	.word	0x20000294

080073c4 <__sfputc_r>:
 80073c4:	6893      	ldr	r3, [r2, #8]
 80073c6:	3b01      	subs	r3, #1
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	b410      	push	{r4}
 80073cc:	6093      	str	r3, [r2, #8]
 80073ce:	da08      	bge.n	80073e2 <__sfputc_r+0x1e>
 80073d0:	6994      	ldr	r4, [r2, #24]
 80073d2:	42a3      	cmp	r3, r4
 80073d4:	db01      	blt.n	80073da <__sfputc_r+0x16>
 80073d6:	290a      	cmp	r1, #10
 80073d8:	d103      	bne.n	80073e2 <__sfputc_r+0x1e>
 80073da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073de:	f000 b99f 	b.w	8007720 <__swbuf_r>
 80073e2:	6813      	ldr	r3, [r2, #0]
 80073e4:	1c58      	adds	r0, r3, #1
 80073e6:	6010      	str	r0, [r2, #0]
 80073e8:	7019      	strb	r1, [r3, #0]
 80073ea:	4608      	mov	r0, r1
 80073ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <__sfputs_r>:
 80073f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f4:	4606      	mov	r6, r0
 80073f6:	460f      	mov	r7, r1
 80073f8:	4614      	mov	r4, r2
 80073fa:	18d5      	adds	r5, r2, r3
 80073fc:	42ac      	cmp	r4, r5
 80073fe:	d101      	bne.n	8007404 <__sfputs_r+0x12>
 8007400:	2000      	movs	r0, #0
 8007402:	e007      	b.n	8007414 <__sfputs_r+0x22>
 8007404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007408:	463a      	mov	r2, r7
 800740a:	4630      	mov	r0, r6
 800740c:	f7ff ffda 	bl	80073c4 <__sfputc_r>
 8007410:	1c43      	adds	r3, r0, #1
 8007412:	d1f3      	bne.n	80073fc <__sfputs_r+0xa>
 8007414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007418 <_vfiprintf_r>:
 8007418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800741c:	460d      	mov	r5, r1
 800741e:	b09d      	sub	sp, #116	; 0x74
 8007420:	4614      	mov	r4, r2
 8007422:	4698      	mov	r8, r3
 8007424:	4606      	mov	r6, r0
 8007426:	b118      	cbz	r0, 8007430 <_vfiprintf_r+0x18>
 8007428:	6983      	ldr	r3, [r0, #24]
 800742a:	b90b      	cbnz	r3, 8007430 <_vfiprintf_r+0x18>
 800742c:	f7ff faa2 	bl	8006974 <__sinit>
 8007430:	4b89      	ldr	r3, [pc, #548]	; (8007658 <_vfiprintf_r+0x240>)
 8007432:	429d      	cmp	r5, r3
 8007434:	d11b      	bne.n	800746e <_vfiprintf_r+0x56>
 8007436:	6875      	ldr	r5, [r6, #4]
 8007438:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800743a:	07d9      	lsls	r1, r3, #31
 800743c:	d405      	bmi.n	800744a <_vfiprintf_r+0x32>
 800743e:	89ab      	ldrh	r3, [r5, #12]
 8007440:	059a      	lsls	r2, r3, #22
 8007442:	d402      	bmi.n	800744a <_vfiprintf_r+0x32>
 8007444:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007446:	f7ff fb38 	bl	8006aba <__retarget_lock_acquire_recursive>
 800744a:	89ab      	ldrh	r3, [r5, #12]
 800744c:	071b      	lsls	r3, r3, #28
 800744e:	d501      	bpl.n	8007454 <_vfiprintf_r+0x3c>
 8007450:	692b      	ldr	r3, [r5, #16]
 8007452:	b9eb      	cbnz	r3, 8007490 <_vfiprintf_r+0x78>
 8007454:	4629      	mov	r1, r5
 8007456:	4630      	mov	r0, r6
 8007458:	f000 f9c6 	bl	80077e8 <__swsetup_r>
 800745c:	b1c0      	cbz	r0, 8007490 <_vfiprintf_r+0x78>
 800745e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007460:	07dc      	lsls	r4, r3, #31
 8007462:	d50e      	bpl.n	8007482 <_vfiprintf_r+0x6a>
 8007464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007468:	b01d      	add	sp, #116	; 0x74
 800746a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800746e:	4b7b      	ldr	r3, [pc, #492]	; (800765c <_vfiprintf_r+0x244>)
 8007470:	429d      	cmp	r5, r3
 8007472:	d101      	bne.n	8007478 <_vfiprintf_r+0x60>
 8007474:	68b5      	ldr	r5, [r6, #8]
 8007476:	e7df      	b.n	8007438 <_vfiprintf_r+0x20>
 8007478:	4b79      	ldr	r3, [pc, #484]	; (8007660 <_vfiprintf_r+0x248>)
 800747a:	429d      	cmp	r5, r3
 800747c:	bf08      	it	eq
 800747e:	68f5      	ldreq	r5, [r6, #12]
 8007480:	e7da      	b.n	8007438 <_vfiprintf_r+0x20>
 8007482:	89ab      	ldrh	r3, [r5, #12]
 8007484:	0598      	lsls	r0, r3, #22
 8007486:	d4ed      	bmi.n	8007464 <_vfiprintf_r+0x4c>
 8007488:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800748a:	f7ff fb17 	bl	8006abc <__retarget_lock_release_recursive>
 800748e:	e7e9      	b.n	8007464 <_vfiprintf_r+0x4c>
 8007490:	2300      	movs	r3, #0
 8007492:	9309      	str	r3, [sp, #36]	; 0x24
 8007494:	2320      	movs	r3, #32
 8007496:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800749a:	f8cd 800c 	str.w	r8, [sp, #12]
 800749e:	2330      	movs	r3, #48	; 0x30
 80074a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007664 <_vfiprintf_r+0x24c>
 80074a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074a8:	f04f 0901 	mov.w	r9, #1
 80074ac:	4623      	mov	r3, r4
 80074ae:	469a      	mov	sl, r3
 80074b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074b4:	b10a      	cbz	r2, 80074ba <_vfiprintf_r+0xa2>
 80074b6:	2a25      	cmp	r2, #37	; 0x25
 80074b8:	d1f9      	bne.n	80074ae <_vfiprintf_r+0x96>
 80074ba:	ebba 0b04 	subs.w	fp, sl, r4
 80074be:	d00b      	beq.n	80074d8 <_vfiprintf_r+0xc0>
 80074c0:	465b      	mov	r3, fp
 80074c2:	4622      	mov	r2, r4
 80074c4:	4629      	mov	r1, r5
 80074c6:	4630      	mov	r0, r6
 80074c8:	f7ff ff93 	bl	80073f2 <__sfputs_r>
 80074cc:	3001      	adds	r0, #1
 80074ce:	f000 80aa 	beq.w	8007626 <_vfiprintf_r+0x20e>
 80074d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074d4:	445a      	add	r2, fp
 80074d6:	9209      	str	r2, [sp, #36]	; 0x24
 80074d8:	f89a 3000 	ldrb.w	r3, [sl]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f000 80a2 	beq.w	8007626 <_vfiprintf_r+0x20e>
 80074e2:	2300      	movs	r3, #0
 80074e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074ec:	f10a 0a01 	add.w	sl, sl, #1
 80074f0:	9304      	str	r3, [sp, #16]
 80074f2:	9307      	str	r3, [sp, #28]
 80074f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074f8:	931a      	str	r3, [sp, #104]	; 0x68
 80074fa:	4654      	mov	r4, sl
 80074fc:	2205      	movs	r2, #5
 80074fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007502:	4858      	ldr	r0, [pc, #352]	; (8007664 <_vfiprintf_r+0x24c>)
 8007504:	f7f8 fe84 	bl	8000210 <memchr>
 8007508:	9a04      	ldr	r2, [sp, #16]
 800750a:	b9d8      	cbnz	r0, 8007544 <_vfiprintf_r+0x12c>
 800750c:	06d1      	lsls	r1, r2, #27
 800750e:	bf44      	itt	mi
 8007510:	2320      	movmi	r3, #32
 8007512:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007516:	0713      	lsls	r3, r2, #28
 8007518:	bf44      	itt	mi
 800751a:	232b      	movmi	r3, #43	; 0x2b
 800751c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007520:	f89a 3000 	ldrb.w	r3, [sl]
 8007524:	2b2a      	cmp	r3, #42	; 0x2a
 8007526:	d015      	beq.n	8007554 <_vfiprintf_r+0x13c>
 8007528:	9a07      	ldr	r2, [sp, #28]
 800752a:	4654      	mov	r4, sl
 800752c:	2000      	movs	r0, #0
 800752e:	f04f 0c0a 	mov.w	ip, #10
 8007532:	4621      	mov	r1, r4
 8007534:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007538:	3b30      	subs	r3, #48	; 0x30
 800753a:	2b09      	cmp	r3, #9
 800753c:	d94e      	bls.n	80075dc <_vfiprintf_r+0x1c4>
 800753e:	b1b0      	cbz	r0, 800756e <_vfiprintf_r+0x156>
 8007540:	9207      	str	r2, [sp, #28]
 8007542:	e014      	b.n	800756e <_vfiprintf_r+0x156>
 8007544:	eba0 0308 	sub.w	r3, r0, r8
 8007548:	fa09 f303 	lsl.w	r3, r9, r3
 800754c:	4313      	orrs	r3, r2
 800754e:	9304      	str	r3, [sp, #16]
 8007550:	46a2      	mov	sl, r4
 8007552:	e7d2      	b.n	80074fa <_vfiprintf_r+0xe2>
 8007554:	9b03      	ldr	r3, [sp, #12]
 8007556:	1d19      	adds	r1, r3, #4
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	9103      	str	r1, [sp, #12]
 800755c:	2b00      	cmp	r3, #0
 800755e:	bfbb      	ittet	lt
 8007560:	425b      	neglt	r3, r3
 8007562:	f042 0202 	orrlt.w	r2, r2, #2
 8007566:	9307      	strge	r3, [sp, #28]
 8007568:	9307      	strlt	r3, [sp, #28]
 800756a:	bfb8      	it	lt
 800756c:	9204      	strlt	r2, [sp, #16]
 800756e:	7823      	ldrb	r3, [r4, #0]
 8007570:	2b2e      	cmp	r3, #46	; 0x2e
 8007572:	d10c      	bne.n	800758e <_vfiprintf_r+0x176>
 8007574:	7863      	ldrb	r3, [r4, #1]
 8007576:	2b2a      	cmp	r3, #42	; 0x2a
 8007578:	d135      	bne.n	80075e6 <_vfiprintf_r+0x1ce>
 800757a:	9b03      	ldr	r3, [sp, #12]
 800757c:	1d1a      	adds	r2, r3, #4
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	9203      	str	r2, [sp, #12]
 8007582:	2b00      	cmp	r3, #0
 8007584:	bfb8      	it	lt
 8007586:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800758a:	3402      	adds	r4, #2
 800758c:	9305      	str	r3, [sp, #20]
 800758e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007674 <_vfiprintf_r+0x25c>
 8007592:	7821      	ldrb	r1, [r4, #0]
 8007594:	2203      	movs	r2, #3
 8007596:	4650      	mov	r0, sl
 8007598:	f7f8 fe3a 	bl	8000210 <memchr>
 800759c:	b140      	cbz	r0, 80075b0 <_vfiprintf_r+0x198>
 800759e:	2340      	movs	r3, #64	; 0x40
 80075a0:	eba0 000a 	sub.w	r0, r0, sl
 80075a4:	fa03 f000 	lsl.w	r0, r3, r0
 80075a8:	9b04      	ldr	r3, [sp, #16]
 80075aa:	4303      	orrs	r3, r0
 80075ac:	3401      	adds	r4, #1
 80075ae:	9304      	str	r3, [sp, #16]
 80075b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075b4:	482c      	ldr	r0, [pc, #176]	; (8007668 <_vfiprintf_r+0x250>)
 80075b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075ba:	2206      	movs	r2, #6
 80075bc:	f7f8 fe28 	bl	8000210 <memchr>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	d03f      	beq.n	8007644 <_vfiprintf_r+0x22c>
 80075c4:	4b29      	ldr	r3, [pc, #164]	; (800766c <_vfiprintf_r+0x254>)
 80075c6:	bb1b      	cbnz	r3, 8007610 <_vfiprintf_r+0x1f8>
 80075c8:	9b03      	ldr	r3, [sp, #12]
 80075ca:	3307      	adds	r3, #7
 80075cc:	f023 0307 	bic.w	r3, r3, #7
 80075d0:	3308      	adds	r3, #8
 80075d2:	9303      	str	r3, [sp, #12]
 80075d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075d6:	443b      	add	r3, r7
 80075d8:	9309      	str	r3, [sp, #36]	; 0x24
 80075da:	e767      	b.n	80074ac <_vfiprintf_r+0x94>
 80075dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80075e0:	460c      	mov	r4, r1
 80075e2:	2001      	movs	r0, #1
 80075e4:	e7a5      	b.n	8007532 <_vfiprintf_r+0x11a>
 80075e6:	2300      	movs	r3, #0
 80075e8:	3401      	adds	r4, #1
 80075ea:	9305      	str	r3, [sp, #20]
 80075ec:	4619      	mov	r1, r3
 80075ee:	f04f 0c0a 	mov.w	ip, #10
 80075f2:	4620      	mov	r0, r4
 80075f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075f8:	3a30      	subs	r2, #48	; 0x30
 80075fa:	2a09      	cmp	r2, #9
 80075fc:	d903      	bls.n	8007606 <_vfiprintf_r+0x1ee>
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d0c5      	beq.n	800758e <_vfiprintf_r+0x176>
 8007602:	9105      	str	r1, [sp, #20]
 8007604:	e7c3      	b.n	800758e <_vfiprintf_r+0x176>
 8007606:	fb0c 2101 	mla	r1, ip, r1, r2
 800760a:	4604      	mov	r4, r0
 800760c:	2301      	movs	r3, #1
 800760e:	e7f0      	b.n	80075f2 <_vfiprintf_r+0x1da>
 8007610:	ab03      	add	r3, sp, #12
 8007612:	9300      	str	r3, [sp, #0]
 8007614:	462a      	mov	r2, r5
 8007616:	4b16      	ldr	r3, [pc, #88]	; (8007670 <_vfiprintf_r+0x258>)
 8007618:	a904      	add	r1, sp, #16
 800761a:	4630      	mov	r0, r6
 800761c:	f7fd fef4 	bl	8005408 <_printf_float>
 8007620:	4607      	mov	r7, r0
 8007622:	1c78      	adds	r0, r7, #1
 8007624:	d1d6      	bne.n	80075d4 <_vfiprintf_r+0x1bc>
 8007626:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007628:	07d9      	lsls	r1, r3, #31
 800762a:	d405      	bmi.n	8007638 <_vfiprintf_r+0x220>
 800762c:	89ab      	ldrh	r3, [r5, #12]
 800762e:	059a      	lsls	r2, r3, #22
 8007630:	d402      	bmi.n	8007638 <_vfiprintf_r+0x220>
 8007632:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007634:	f7ff fa42 	bl	8006abc <__retarget_lock_release_recursive>
 8007638:	89ab      	ldrh	r3, [r5, #12]
 800763a:	065b      	lsls	r3, r3, #25
 800763c:	f53f af12 	bmi.w	8007464 <_vfiprintf_r+0x4c>
 8007640:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007642:	e711      	b.n	8007468 <_vfiprintf_r+0x50>
 8007644:	ab03      	add	r3, sp, #12
 8007646:	9300      	str	r3, [sp, #0]
 8007648:	462a      	mov	r2, r5
 800764a:	4b09      	ldr	r3, [pc, #36]	; (8007670 <_vfiprintf_r+0x258>)
 800764c:	a904      	add	r1, sp, #16
 800764e:	4630      	mov	r0, r6
 8007650:	f7fe f97e 	bl	8005950 <_printf_i>
 8007654:	e7e4      	b.n	8007620 <_vfiprintf_r+0x208>
 8007656:	bf00      	nop
 8007658:	08008ed4 	.word	0x08008ed4
 800765c:	08008ef4 	.word	0x08008ef4
 8007660:	08008eb4 	.word	0x08008eb4
 8007664:	0800906c 	.word	0x0800906c
 8007668:	08009076 	.word	0x08009076
 800766c:	08005409 	.word	0x08005409
 8007670:	080073f3 	.word	0x080073f3
 8007674:	08009072 	.word	0x08009072

08007678 <_sbrk_r>:
 8007678:	b538      	push	{r3, r4, r5, lr}
 800767a:	4d06      	ldr	r5, [pc, #24]	; (8007694 <_sbrk_r+0x1c>)
 800767c:	2300      	movs	r3, #0
 800767e:	4604      	mov	r4, r0
 8007680:	4608      	mov	r0, r1
 8007682:	602b      	str	r3, [r5, #0]
 8007684:	f7fa f9e2 	bl	8001a4c <_sbrk>
 8007688:	1c43      	adds	r3, r0, #1
 800768a:	d102      	bne.n	8007692 <_sbrk_r+0x1a>
 800768c:	682b      	ldr	r3, [r5, #0]
 800768e:	b103      	cbz	r3, 8007692 <_sbrk_r+0x1a>
 8007690:	6023      	str	r3, [r4, #0]
 8007692:	bd38      	pop	{r3, r4, r5, pc}
 8007694:	2000029c 	.word	0x2000029c

08007698 <__sread>:
 8007698:	b510      	push	{r4, lr}
 800769a:	460c      	mov	r4, r1
 800769c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076a0:	f000 faa8 	bl	8007bf4 <_read_r>
 80076a4:	2800      	cmp	r0, #0
 80076a6:	bfab      	itete	ge
 80076a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80076aa:	89a3      	ldrhlt	r3, [r4, #12]
 80076ac:	181b      	addge	r3, r3, r0
 80076ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80076b2:	bfac      	ite	ge
 80076b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80076b6:	81a3      	strhlt	r3, [r4, #12]
 80076b8:	bd10      	pop	{r4, pc}

080076ba <__swrite>:
 80076ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076be:	461f      	mov	r7, r3
 80076c0:	898b      	ldrh	r3, [r1, #12]
 80076c2:	05db      	lsls	r3, r3, #23
 80076c4:	4605      	mov	r5, r0
 80076c6:	460c      	mov	r4, r1
 80076c8:	4616      	mov	r6, r2
 80076ca:	d505      	bpl.n	80076d8 <__swrite+0x1e>
 80076cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076d0:	2302      	movs	r3, #2
 80076d2:	2200      	movs	r2, #0
 80076d4:	f000 f9f8 	bl	8007ac8 <_lseek_r>
 80076d8:	89a3      	ldrh	r3, [r4, #12]
 80076da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076e2:	81a3      	strh	r3, [r4, #12]
 80076e4:	4632      	mov	r2, r6
 80076e6:	463b      	mov	r3, r7
 80076e8:	4628      	mov	r0, r5
 80076ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076ee:	f000 b869 	b.w	80077c4 <_write_r>

080076f2 <__sseek>:
 80076f2:	b510      	push	{r4, lr}
 80076f4:	460c      	mov	r4, r1
 80076f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076fa:	f000 f9e5 	bl	8007ac8 <_lseek_r>
 80076fe:	1c43      	adds	r3, r0, #1
 8007700:	89a3      	ldrh	r3, [r4, #12]
 8007702:	bf15      	itete	ne
 8007704:	6560      	strne	r0, [r4, #84]	; 0x54
 8007706:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800770a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800770e:	81a3      	strheq	r3, [r4, #12]
 8007710:	bf18      	it	ne
 8007712:	81a3      	strhne	r3, [r4, #12]
 8007714:	bd10      	pop	{r4, pc}

08007716 <__sclose>:
 8007716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800771a:	f000 b8f1 	b.w	8007900 <_close_r>
	...

08007720 <__swbuf_r>:
 8007720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007722:	460e      	mov	r6, r1
 8007724:	4614      	mov	r4, r2
 8007726:	4605      	mov	r5, r0
 8007728:	b118      	cbz	r0, 8007732 <__swbuf_r+0x12>
 800772a:	6983      	ldr	r3, [r0, #24]
 800772c:	b90b      	cbnz	r3, 8007732 <__swbuf_r+0x12>
 800772e:	f7ff f921 	bl	8006974 <__sinit>
 8007732:	4b21      	ldr	r3, [pc, #132]	; (80077b8 <__swbuf_r+0x98>)
 8007734:	429c      	cmp	r4, r3
 8007736:	d12b      	bne.n	8007790 <__swbuf_r+0x70>
 8007738:	686c      	ldr	r4, [r5, #4]
 800773a:	69a3      	ldr	r3, [r4, #24]
 800773c:	60a3      	str	r3, [r4, #8]
 800773e:	89a3      	ldrh	r3, [r4, #12]
 8007740:	071a      	lsls	r2, r3, #28
 8007742:	d52f      	bpl.n	80077a4 <__swbuf_r+0x84>
 8007744:	6923      	ldr	r3, [r4, #16]
 8007746:	b36b      	cbz	r3, 80077a4 <__swbuf_r+0x84>
 8007748:	6923      	ldr	r3, [r4, #16]
 800774a:	6820      	ldr	r0, [r4, #0]
 800774c:	1ac0      	subs	r0, r0, r3
 800774e:	6963      	ldr	r3, [r4, #20]
 8007750:	b2f6      	uxtb	r6, r6
 8007752:	4283      	cmp	r3, r0
 8007754:	4637      	mov	r7, r6
 8007756:	dc04      	bgt.n	8007762 <__swbuf_r+0x42>
 8007758:	4621      	mov	r1, r4
 800775a:	4628      	mov	r0, r5
 800775c:	f000 f966 	bl	8007a2c <_fflush_r>
 8007760:	bb30      	cbnz	r0, 80077b0 <__swbuf_r+0x90>
 8007762:	68a3      	ldr	r3, [r4, #8]
 8007764:	3b01      	subs	r3, #1
 8007766:	60a3      	str	r3, [r4, #8]
 8007768:	6823      	ldr	r3, [r4, #0]
 800776a:	1c5a      	adds	r2, r3, #1
 800776c:	6022      	str	r2, [r4, #0]
 800776e:	701e      	strb	r6, [r3, #0]
 8007770:	6963      	ldr	r3, [r4, #20]
 8007772:	3001      	adds	r0, #1
 8007774:	4283      	cmp	r3, r0
 8007776:	d004      	beq.n	8007782 <__swbuf_r+0x62>
 8007778:	89a3      	ldrh	r3, [r4, #12]
 800777a:	07db      	lsls	r3, r3, #31
 800777c:	d506      	bpl.n	800778c <__swbuf_r+0x6c>
 800777e:	2e0a      	cmp	r6, #10
 8007780:	d104      	bne.n	800778c <__swbuf_r+0x6c>
 8007782:	4621      	mov	r1, r4
 8007784:	4628      	mov	r0, r5
 8007786:	f000 f951 	bl	8007a2c <_fflush_r>
 800778a:	b988      	cbnz	r0, 80077b0 <__swbuf_r+0x90>
 800778c:	4638      	mov	r0, r7
 800778e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007790:	4b0a      	ldr	r3, [pc, #40]	; (80077bc <__swbuf_r+0x9c>)
 8007792:	429c      	cmp	r4, r3
 8007794:	d101      	bne.n	800779a <__swbuf_r+0x7a>
 8007796:	68ac      	ldr	r4, [r5, #8]
 8007798:	e7cf      	b.n	800773a <__swbuf_r+0x1a>
 800779a:	4b09      	ldr	r3, [pc, #36]	; (80077c0 <__swbuf_r+0xa0>)
 800779c:	429c      	cmp	r4, r3
 800779e:	bf08      	it	eq
 80077a0:	68ec      	ldreq	r4, [r5, #12]
 80077a2:	e7ca      	b.n	800773a <__swbuf_r+0x1a>
 80077a4:	4621      	mov	r1, r4
 80077a6:	4628      	mov	r0, r5
 80077a8:	f000 f81e 	bl	80077e8 <__swsetup_r>
 80077ac:	2800      	cmp	r0, #0
 80077ae:	d0cb      	beq.n	8007748 <__swbuf_r+0x28>
 80077b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80077b4:	e7ea      	b.n	800778c <__swbuf_r+0x6c>
 80077b6:	bf00      	nop
 80077b8:	08008ed4 	.word	0x08008ed4
 80077bc:	08008ef4 	.word	0x08008ef4
 80077c0:	08008eb4 	.word	0x08008eb4

080077c4 <_write_r>:
 80077c4:	b538      	push	{r3, r4, r5, lr}
 80077c6:	4d07      	ldr	r5, [pc, #28]	; (80077e4 <_write_r+0x20>)
 80077c8:	4604      	mov	r4, r0
 80077ca:	4608      	mov	r0, r1
 80077cc:	4611      	mov	r1, r2
 80077ce:	2200      	movs	r2, #0
 80077d0:	602a      	str	r2, [r5, #0]
 80077d2:	461a      	mov	r2, r3
 80077d4:	f7fa f8e9 	bl	80019aa <_write>
 80077d8:	1c43      	adds	r3, r0, #1
 80077da:	d102      	bne.n	80077e2 <_write_r+0x1e>
 80077dc:	682b      	ldr	r3, [r5, #0]
 80077de:	b103      	cbz	r3, 80077e2 <_write_r+0x1e>
 80077e0:	6023      	str	r3, [r4, #0]
 80077e2:	bd38      	pop	{r3, r4, r5, pc}
 80077e4:	2000029c 	.word	0x2000029c

080077e8 <__swsetup_r>:
 80077e8:	4b32      	ldr	r3, [pc, #200]	; (80078b4 <__swsetup_r+0xcc>)
 80077ea:	b570      	push	{r4, r5, r6, lr}
 80077ec:	681d      	ldr	r5, [r3, #0]
 80077ee:	4606      	mov	r6, r0
 80077f0:	460c      	mov	r4, r1
 80077f2:	b125      	cbz	r5, 80077fe <__swsetup_r+0x16>
 80077f4:	69ab      	ldr	r3, [r5, #24]
 80077f6:	b913      	cbnz	r3, 80077fe <__swsetup_r+0x16>
 80077f8:	4628      	mov	r0, r5
 80077fa:	f7ff f8bb 	bl	8006974 <__sinit>
 80077fe:	4b2e      	ldr	r3, [pc, #184]	; (80078b8 <__swsetup_r+0xd0>)
 8007800:	429c      	cmp	r4, r3
 8007802:	d10f      	bne.n	8007824 <__swsetup_r+0x3c>
 8007804:	686c      	ldr	r4, [r5, #4]
 8007806:	89a3      	ldrh	r3, [r4, #12]
 8007808:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800780c:	0719      	lsls	r1, r3, #28
 800780e:	d42c      	bmi.n	800786a <__swsetup_r+0x82>
 8007810:	06dd      	lsls	r5, r3, #27
 8007812:	d411      	bmi.n	8007838 <__swsetup_r+0x50>
 8007814:	2309      	movs	r3, #9
 8007816:	6033      	str	r3, [r6, #0]
 8007818:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800781c:	81a3      	strh	r3, [r4, #12]
 800781e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007822:	e03e      	b.n	80078a2 <__swsetup_r+0xba>
 8007824:	4b25      	ldr	r3, [pc, #148]	; (80078bc <__swsetup_r+0xd4>)
 8007826:	429c      	cmp	r4, r3
 8007828:	d101      	bne.n	800782e <__swsetup_r+0x46>
 800782a:	68ac      	ldr	r4, [r5, #8]
 800782c:	e7eb      	b.n	8007806 <__swsetup_r+0x1e>
 800782e:	4b24      	ldr	r3, [pc, #144]	; (80078c0 <__swsetup_r+0xd8>)
 8007830:	429c      	cmp	r4, r3
 8007832:	bf08      	it	eq
 8007834:	68ec      	ldreq	r4, [r5, #12]
 8007836:	e7e6      	b.n	8007806 <__swsetup_r+0x1e>
 8007838:	0758      	lsls	r0, r3, #29
 800783a:	d512      	bpl.n	8007862 <__swsetup_r+0x7a>
 800783c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800783e:	b141      	cbz	r1, 8007852 <__swsetup_r+0x6a>
 8007840:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007844:	4299      	cmp	r1, r3
 8007846:	d002      	beq.n	800784e <__swsetup_r+0x66>
 8007848:	4630      	mov	r0, r6
 800784a:	f7ff fcdb 	bl	8007204 <_free_r>
 800784e:	2300      	movs	r3, #0
 8007850:	6363      	str	r3, [r4, #52]	; 0x34
 8007852:	89a3      	ldrh	r3, [r4, #12]
 8007854:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007858:	81a3      	strh	r3, [r4, #12]
 800785a:	2300      	movs	r3, #0
 800785c:	6063      	str	r3, [r4, #4]
 800785e:	6923      	ldr	r3, [r4, #16]
 8007860:	6023      	str	r3, [r4, #0]
 8007862:	89a3      	ldrh	r3, [r4, #12]
 8007864:	f043 0308 	orr.w	r3, r3, #8
 8007868:	81a3      	strh	r3, [r4, #12]
 800786a:	6923      	ldr	r3, [r4, #16]
 800786c:	b94b      	cbnz	r3, 8007882 <__swsetup_r+0x9a>
 800786e:	89a3      	ldrh	r3, [r4, #12]
 8007870:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007878:	d003      	beq.n	8007882 <__swsetup_r+0x9a>
 800787a:	4621      	mov	r1, r4
 800787c:	4630      	mov	r0, r6
 800787e:	f000 f95b 	bl	8007b38 <__smakebuf_r>
 8007882:	89a0      	ldrh	r0, [r4, #12]
 8007884:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007888:	f010 0301 	ands.w	r3, r0, #1
 800788c:	d00a      	beq.n	80078a4 <__swsetup_r+0xbc>
 800788e:	2300      	movs	r3, #0
 8007890:	60a3      	str	r3, [r4, #8]
 8007892:	6963      	ldr	r3, [r4, #20]
 8007894:	425b      	negs	r3, r3
 8007896:	61a3      	str	r3, [r4, #24]
 8007898:	6923      	ldr	r3, [r4, #16]
 800789a:	b943      	cbnz	r3, 80078ae <__swsetup_r+0xc6>
 800789c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80078a0:	d1ba      	bne.n	8007818 <__swsetup_r+0x30>
 80078a2:	bd70      	pop	{r4, r5, r6, pc}
 80078a4:	0781      	lsls	r1, r0, #30
 80078a6:	bf58      	it	pl
 80078a8:	6963      	ldrpl	r3, [r4, #20]
 80078aa:	60a3      	str	r3, [r4, #8]
 80078ac:	e7f4      	b.n	8007898 <__swsetup_r+0xb0>
 80078ae:	2000      	movs	r0, #0
 80078b0:	e7f7      	b.n	80078a2 <__swsetup_r+0xba>
 80078b2:	bf00      	nop
 80078b4:	2000000c 	.word	0x2000000c
 80078b8:	08008ed4 	.word	0x08008ed4
 80078bc:	08008ef4 	.word	0x08008ef4
 80078c0:	08008eb4 	.word	0x08008eb4

080078c4 <__assert_func>:
 80078c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078c6:	4614      	mov	r4, r2
 80078c8:	461a      	mov	r2, r3
 80078ca:	4b09      	ldr	r3, [pc, #36]	; (80078f0 <__assert_func+0x2c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4605      	mov	r5, r0
 80078d0:	68d8      	ldr	r0, [r3, #12]
 80078d2:	b14c      	cbz	r4, 80078e8 <__assert_func+0x24>
 80078d4:	4b07      	ldr	r3, [pc, #28]	; (80078f4 <__assert_func+0x30>)
 80078d6:	9100      	str	r1, [sp, #0]
 80078d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80078dc:	4906      	ldr	r1, [pc, #24]	; (80078f8 <__assert_func+0x34>)
 80078de:	462b      	mov	r3, r5
 80078e0:	f000 f8e0 	bl	8007aa4 <fiprintf>
 80078e4:	f000 f9a5 	bl	8007c32 <abort>
 80078e8:	4b04      	ldr	r3, [pc, #16]	; (80078fc <__assert_func+0x38>)
 80078ea:	461c      	mov	r4, r3
 80078ec:	e7f3      	b.n	80078d6 <__assert_func+0x12>
 80078ee:	bf00      	nop
 80078f0:	2000000c 	.word	0x2000000c
 80078f4:	0800907d 	.word	0x0800907d
 80078f8:	0800908a 	.word	0x0800908a
 80078fc:	080090b8 	.word	0x080090b8

08007900 <_close_r>:
 8007900:	b538      	push	{r3, r4, r5, lr}
 8007902:	4d06      	ldr	r5, [pc, #24]	; (800791c <_close_r+0x1c>)
 8007904:	2300      	movs	r3, #0
 8007906:	4604      	mov	r4, r0
 8007908:	4608      	mov	r0, r1
 800790a:	602b      	str	r3, [r5, #0]
 800790c:	f7fa f869 	bl	80019e2 <_close>
 8007910:	1c43      	adds	r3, r0, #1
 8007912:	d102      	bne.n	800791a <_close_r+0x1a>
 8007914:	682b      	ldr	r3, [r5, #0]
 8007916:	b103      	cbz	r3, 800791a <_close_r+0x1a>
 8007918:	6023      	str	r3, [r4, #0]
 800791a:	bd38      	pop	{r3, r4, r5, pc}
 800791c:	2000029c 	.word	0x2000029c

08007920 <__sflush_r>:
 8007920:	898a      	ldrh	r2, [r1, #12]
 8007922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007926:	4605      	mov	r5, r0
 8007928:	0710      	lsls	r0, r2, #28
 800792a:	460c      	mov	r4, r1
 800792c:	d458      	bmi.n	80079e0 <__sflush_r+0xc0>
 800792e:	684b      	ldr	r3, [r1, #4]
 8007930:	2b00      	cmp	r3, #0
 8007932:	dc05      	bgt.n	8007940 <__sflush_r+0x20>
 8007934:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007936:	2b00      	cmp	r3, #0
 8007938:	dc02      	bgt.n	8007940 <__sflush_r+0x20>
 800793a:	2000      	movs	r0, #0
 800793c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007940:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007942:	2e00      	cmp	r6, #0
 8007944:	d0f9      	beq.n	800793a <__sflush_r+0x1a>
 8007946:	2300      	movs	r3, #0
 8007948:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800794c:	682f      	ldr	r7, [r5, #0]
 800794e:	602b      	str	r3, [r5, #0]
 8007950:	d032      	beq.n	80079b8 <__sflush_r+0x98>
 8007952:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007954:	89a3      	ldrh	r3, [r4, #12]
 8007956:	075a      	lsls	r2, r3, #29
 8007958:	d505      	bpl.n	8007966 <__sflush_r+0x46>
 800795a:	6863      	ldr	r3, [r4, #4]
 800795c:	1ac0      	subs	r0, r0, r3
 800795e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007960:	b10b      	cbz	r3, 8007966 <__sflush_r+0x46>
 8007962:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007964:	1ac0      	subs	r0, r0, r3
 8007966:	2300      	movs	r3, #0
 8007968:	4602      	mov	r2, r0
 800796a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800796c:	6a21      	ldr	r1, [r4, #32]
 800796e:	4628      	mov	r0, r5
 8007970:	47b0      	blx	r6
 8007972:	1c43      	adds	r3, r0, #1
 8007974:	89a3      	ldrh	r3, [r4, #12]
 8007976:	d106      	bne.n	8007986 <__sflush_r+0x66>
 8007978:	6829      	ldr	r1, [r5, #0]
 800797a:	291d      	cmp	r1, #29
 800797c:	d82c      	bhi.n	80079d8 <__sflush_r+0xb8>
 800797e:	4a2a      	ldr	r2, [pc, #168]	; (8007a28 <__sflush_r+0x108>)
 8007980:	40ca      	lsrs	r2, r1
 8007982:	07d6      	lsls	r6, r2, #31
 8007984:	d528      	bpl.n	80079d8 <__sflush_r+0xb8>
 8007986:	2200      	movs	r2, #0
 8007988:	6062      	str	r2, [r4, #4]
 800798a:	04d9      	lsls	r1, r3, #19
 800798c:	6922      	ldr	r2, [r4, #16]
 800798e:	6022      	str	r2, [r4, #0]
 8007990:	d504      	bpl.n	800799c <__sflush_r+0x7c>
 8007992:	1c42      	adds	r2, r0, #1
 8007994:	d101      	bne.n	800799a <__sflush_r+0x7a>
 8007996:	682b      	ldr	r3, [r5, #0]
 8007998:	b903      	cbnz	r3, 800799c <__sflush_r+0x7c>
 800799a:	6560      	str	r0, [r4, #84]	; 0x54
 800799c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800799e:	602f      	str	r7, [r5, #0]
 80079a0:	2900      	cmp	r1, #0
 80079a2:	d0ca      	beq.n	800793a <__sflush_r+0x1a>
 80079a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079a8:	4299      	cmp	r1, r3
 80079aa:	d002      	beq.n	80079b2 <__sflush_r+0x92>
 80079ac:	4628      	mov	r0, r5
 80079ae:	f7ff fc29 	bl	8007204 <_free_r>
 80079b2:	2000      	movs	r0, #0
 80079b4:	6360      	str	r0, [r4, #52]	; 0x34
 80079b6:	e7c1      	b.n	800793c <__sflush_r+0x1c>
 80079b8:	6a21      	ldr	r1, [r4, #32]
 80079ba:	2301      	movs	r3, #1
 80079bc:	4628      	mov	r0, r5
 80079be:	47b0      	blx	r6
 80079c0:	1c41      	adds	r1, r0, #1
 80079c2:	d1c7      	bne.n	8007954 <__sflush_r+0x34>
 80079c4:	682b      	ldr	r3, [r5, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d0c4      	beq.n	8007954 <__sflush_r+0x34>
 80079ca:	2b1d      	cmp	r3, #29
 80079cc:	d001      	beq.n	80079d2 <__sflush_r+0xb2>
 80079ce:	2b16      	cmp	r3, #22
 80079d0:	d101      	bne.n	80079d6 <__sflush_r+0xb6>
 80079d2:	602f      	str	r7, [r5, #0]
 80079d4:	e7b1      	b.n	800793a <__sflush_r+0x1a>
 80079d6:	89a3      	ldrh	r3, [r4, #12]
 80079d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079dc:	81a3      	strh	r3, [r4, #12]
 80079de:	e7ad      	b.n	800793c <__sflush_r+0x1c>
 80079e0:	690f      	ldr	r7, [r1, #16]
 80079e2:	2f00      	cmp	r7, #0
 80079e4:	d0a9      	beq.n	800793a <__sflush_r+0x1a>
 80079e6:	0793      	lsls	r3, r2, #30
 80079e8:	680e      	ldr	r6, [r1, #0]
 80079ea:	bf08      	it	eq
 80079ec:	694b      	ldreq	r3, [r1, #20]
 80079ee:	600f      	str	r7, [r1, #0]
 80079f0:	bf18      	it	ne
 80079f2:	2300      	movne	r3, #0
 80079f4:	eba6 0807 	sub.w	r8, r6, r7
 80079f8:	608b      	str	r3, [r1, #8]
 80079fa:	f1b8 0f00 	cmp.w	r8, #0
 80079fe:	dd9c      	ble.n	800793a <__sflush_r+0x1a>
 8007a00:	6a21      	ldr	r1, [r4, #32]
 8007a02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a04:	4643      	mov	r3, r8
 8007a06:	463a      	mov	r2, r7
 8007a08:	4628      	mov	r0, r5
 8007a0a:	47b0      	blx	r6
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	dc06      	bgt.n	8007a1e <__sflush_r+0xfe>
 8007a10:	89a3      	ldrh	r3, [r4, #12]
 8007a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a16:	81a3      	strh	r3, [r4, #12]
 8007a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a1c:	e78e      	b.n	800793c <__sflush_r+0x1c>
 8007a1e:	4407      	add	r7, r0
 8007a20:	eba8 0800 	sub.w	r8, r8, r0
 8007a24:	e7e9      	b.n	80079fa <__sflush_r+0xda>
 8007a26:	bf00      	nop
 8007a28:	20400001 	.word	0x20400001

08007a2c <_fflush_r>:
 8007a2c:	b538      	push	{r3, r4, r5, lr}
 8007a2e:	690b      	ldr	r3, [r1, #16]
 8007a30:	4605      	mov	r5, r0
 8007a32:	460c      	mov	r4, r1
 8007a34:	b913      	cbnz	r3, 8007a3c <_fflush_r+0x10>
 8007a36:	2500      	movs	r5, #0
 8007a38:	4628      	mov	r0, r5
 8007a3a:	bd38      	pop	{r3, r4, r5, pc}
 8007a3c:	b118      	cbz	r0, 8007a46 <_fflush_r+0x1a>
 8007a3e:	6983      	ldr	r3, [r0, #24]
 8007a40:	b90b      	cbnz	r3, 8007a46 <_fflush_r+0x1a>
 8007a42:	f7fe ff97 	bl	8006974 <__sinit>
 8007a46:	4b14      	ldr	r3, [pc, #80]	; (8007a98 <_fflush_r+0x6c>)
 8007a48:	429c      	cmp	r4, r3
 8007a4a:	d11b      	bne.n	8007a84 <_fflush_r+0x58>
 8007a4c:	686c      	ldr	r4, [r5, #4]
 8007a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d0ef      	beq.n	8007a36 <_fflush_r+0xa>
 8007a56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a58:	07d0      	lsls	r0, r2, #31
 8007a5a:	d404      	bmi.n	8007a66 <_fflush_r+0x3a>
 8007a5c:	0599      	lsls	r1, r3, #22
 8007a5e:	d402      	bmi.n	8007a66 <_fflush_r+0x3a>
 8007a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a62:	f7ff f82a 	bl	8006aba <__retarget_lock_acquire_recursive>
 8007a66:	4628      	mov	r0, r5
 8007a68:	4621      	mov	r1, r4
 8007a6a:	f7ff ff59 	bl	8007920 <__sflush_r>
 8007a6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a70:	07da      	lsls	r2, r3, #31
 8007a72:	4605      	mov	r5, r0
 8007a74:	d4e0      	bmi.n	8007a38 <_fflush_r+0xc>
 8007a76:	89a3      	ldrh	r3, [r4, #12]
 8007a78:	059b      	lsls	r3, r3, #22
 8007a7a:	d4dd      	bmi.n	8007a38 <_fflush_r+0xc>
 8007a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a7e:	f7ff f81d 	bl	8006abc <__retarget_lock_release_recursive>
 8007a82:	e7d9      	b.n	8007a38 <_fflush_r+0xc>
 8007a84:	4b05      	ldr	r3, [pc, #20]	; (8007a9c <_fflush_r+0x70>)
 8007a86:	429c      	cmp	r4, r3
 8007a88:	d101      	bne.n	8007a8e <_fflush_r+0x62>
 8007a8a:	68ac      	ldr	r4, [r5, #8]
 8007a8c:	e7df      	b.n	8007a4e <_fflush_r+0x22>
 8007a8e:	4b04      	ldr	r3, [pc, #16]	; (8007aa0 <_fflush_r+0x74>)
 8007a90:	429c      	cmp	r4, r3
 8007a92:	bf08      	it	eq
 8007a94:	68ec      	ldreq	r4, [r5, #12]
 8007a96:	e7da      	b.n	8007a4e <_fflush_r+0x22>
 8007a98:	08008ed4 	.word	0x08008ed4
 8007a9c:	08008ef4 	.word	0x08008ef4
 8007aa0:	08008eb4 	.word	0x08008eb4

08007aa4 <fiprintf>:
 8007aa4:	b40e      	push	{r1, r2, r3}
 8007aa6:	b503      	push	{r0, r1, lr}
 8007aa8:	4601      	mov	r1, r0
 8007aaa:	ab03      	add	r3, sp, #12
 8007aac:	4805      	ldr	r0, [pc, #20]	; (8007ac4 <fiprintf+0x20>)
 8007aae:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ab2:	6800      	ldr	r0, [r0, #0]
 8007ab4:	9301      	str	r3, [sp, #4]
 8007ab6:	f7ff fcaf 	bl	8007418 <_vfiprintf_r>
 8007aba:	b002      	add	sp, #8
 8007abc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ac0:	b003      	add	sp, #12
 8007ac2:	4770      	bx	lr
 8007ac4:	2000000c 	.word	0x2000000c

08007ac8 <_lseek_r>:
 8007ac8:	b538      	push	{r3, r4, r5, lr}
 8007aca:	4d07      	ldr	r5, [pc, #28]	; (8007ae8 <_lseek_r+0x20>)
 8007acc:	4604      	mov	r4, r0
 8007ace:	4608      	mov	r0, r1
 8007ad0:	4611      	mov	r1, r2
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	602a      	str	r2, [r5, #0]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	f7f9 ffaa 	bl	8001a30 <_lseek>
 8007adc:	1c43      	adds	r3, r0, #1
 8007ade:	d102      	bne.n	8007ae6 <_lseek_r+0x1e>
 8007ae0:	682b      	ldr	r3, [r5, #0]
 8007ae2:	b103      	cbz	r3, 8007ae6 <_lseek_r+0x1e>
 8007ae4:	6023      	str	r3, [r4, #0]
 8007ae6:	bd38      	pop	{r3, r4, r5, pc}
 8007ae8:	2000029c 	.word	0x2000029c

08007aec <__swhatbuf_r>:
 8007aec:	b570      	push	{r4, r5, r6, lr}
 8007aee:	460e      	mov	r6, r1
 8007af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007af4:	2900      	cmp	r1, #0
 8007af6:	b096      	sub	sp, #88	; 0x58
 8007af8:	4614      	mov	r4, r2
 8007afa:	461d      	mov	r5, r3
 8007afc:	da08      	bge.n	8007b10 <__swhatbuf_r+0x24>
 8007afe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	602a      	str	r2, [r5, #0]
 8007b06:	061a      	lsls	r2, r3, #24
 8007b08:	d410      	bmi.n	8007b2c <__swhatbuf_r+0x40>
 8007b0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b0e:	e00e      	b.n	8007b2e <__swhatbuf_r+0x42>
 8007b10:	466a      	mov	r2, sp
 8007b12:	f000 f895 	bl	8007c40 <_fstat_r>
 8007b16:	2800      	cmp	r0, #0
 8007b18:	dbf1      	blt.n	8007afe <__swhatbuf_r+0x12>
 8007b1a:	9a01      	ldr	r2, [sp, #4]
 8007b1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007b24:	425a      	negs	r2, r3
 8007b26:	415a      	adcs	r2, r3
 8007b28:	602a      	str	r2, [r5, #0]
 8007b2a:	e7ee      	b.n	8007b0a <__swhatbuf_r+0x1e>
 8007b2c:	2340      	movs	r3, #64	; 0x40
 8007b2e:	2000      	movs	r0, #0
 8007b30:	6023      	str	r3, [r4, #0]
 8007b32:	b016      	add	sp, #88	; 0x58
 8007b34:	bd70      	pop	{r4, r5, r6, pc}
	...

08007b38 <__smakebuf_r>:
 8007b38:	898b      	ldrh	r3, [r1, #12]
 8007b3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b3c:	079d      	lsls	r5, r3, #30
 8007b3e:	4606      	mov	r6, r0
 8007b40:	460c      	mov	r4, r1
 8007b42:	d507      	bpl.n	8007b54 <__smakebuf_r+0x1c>
 8007b44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	6123      	str	r3, [r4, #16]
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	6163      	str	r3, [r4, #20]
 8007b50:	b002      	add	sp, #8
 8007b52:	bd70      	pop	{r4, r5, r6, pc}
 8007b54:	ab01      	add	r3, sp, #4
 8007b56:	466a      	mov	r2, sp
 8007b58:	f7ff ffc8 	bl	8007aec <__swhatbuf_r>
 8007b5c:	9900      	ldr	r1, [sp, #0]
 8007b5e:	4605      	mov	r5, r0
 8007b60:	4630      	mov	r0, r6
 8007b62:	f7ff fbbb 	bl	80072dc <_malloc_r>
 8007b66:	b948      	cbnz	r0, 8007b7c <__smakebuf_r+0x44>
 8007b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b6c:	059a      	lsls	r2, r3, #22
 8007b6e:	d4ef      	bmi.n	8007b50 <__smakebuf_r+0x18>
 8007b70:	f023 0303 	bic.w	r3, r3, #3
 8007b74:	f043 0302 	orr.w	r3, r3, #2
 8007b78:	81a3      	strh	r3, [r4, #12]
 8007b7a:	e7e3      	b.n	8007b44 <__smakebuf_r+0xc>
 8007b7c:	4b0d      	ldr	r3, [pc, #52]	; (8007bb4 <__smakebuf_r+0x7c>)
 8007b7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b80:	89a3      	ldrh	r3, [r4, #12]
 8007b82:	6020      	str	r0, [r4, #0]
 8007b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b88:	81a3      	strh	r3, [r4, #12]
 8007b8a:	9b00      	ldr	r3, [sp, #0]
 8007b8c:	6163      	str	r3, [r4, #20]
 8007b8e:	9b01      	ldr	r3, [sp, #4]
 8007b90:	6120      	str	r0, [r4, #16]
 8007b92:	b15b      	cbz	r3, 8007bac <__smakebuf_r+0x74>
 8007b94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b98:	4630      	mov	r0, r6
 8007b9a:	f000 f863 	bl	8007c64 <_isatty_r>
 8007b9e:	b128      	cbz	r0, 8007bac <__smakebuf_r+0x74>
 8007ba0:	89a3      	ldrh	r3, [r4, #12]
 8007ba2:	f023 0303 	bic.w	r3, r3, #3
 8007ba6:	f043 0301 	orr.w	r3, r3, #1
 8007baa:	81a3      	strh	r3, [r4, #12]
 8007bac:	89a0      	ldrh	r0, [r4, #12]
 8007bae:	4305      	orrs	r5, r0
 8007bb0:	81a5      	strh	r5, [r4, #12]
 8007bb2:	e7cd      	b.n	8007b50 <__smakebuf_r+0x18>
 8007bb4:	0800690d 	.word	0x0800690d

08007bb8 <__ascii_mbtowc>:
 8007bb8:	b082      	sub	sp, #8
 8007bba:	b901      	cbnz	r1, 8007bbe <__ascii_mbtowc+0x6>
 8007bbc:	a901      	add	r1, sp, #4
 8007bbe:	b142      	cbz	r2, 8007bd2 <__ascii_mbtowc+0x1a>
 8007bc0:	b14b      	cbz	r3, 8007bd6 <__ascii_mbtowc+0x1e>
 8007bc2:	7813      	ldrb	r3, [r2, #0]
 8007bc4:	600b      	str	r3, [r1, #0]
 8007bc6:	7812      	ldrb	r2, [r2, #0]
 8007bc8:	1e10      	subs	r0, r2, #0
 8007bca:	bf18      	it	ne
 8007bcc:	2001      	movne	r0, #1
 8007bce:	b002      	add	sp, #8
 8007bd0:	4770      	bx	lr
 8007bd2:	4610      	mov	r0, r2
 8007bd4:	e7fb      	b.n	8007bce <__ascii_mbtowc+0x16>
 8007bd6:	f06f 0001 	mvn.w	r0, #1
 8007bda:	e7f8      	b.n	8007bce <__ascii_mbtowc+0x16>

08007bdc <__malloc_lock>:
 8007bdc:	4801      	ldr	r0, [pc, #4]	; (8007be4 <__malloc_lock+0x8>)
 8007bde:	f7fe bf6c 	b.w	8006aba <__retarget_lock_acquire_recursive>
 8007be2:	bf00      	nop
 8007be4:	20000290 	.word	0x20000290

08007be8 <__malloc_unlock>:
 8007be8:	4801      	ldr	r0, [pc, #4]	; (8007bf0 <__malloc_unlock+0x8>)
 8007bea:	f7fe bf67 	b.w	8006abc <__retarget_lock_release_recursive>
 8007bee:	bf00      	nop
 8007bf0:	20000290 	.word	0x20000290

08007bf4 <_read_r>:
 8007bf4:	b538      	push	{r3, r4, r5, lr}
 8007bf6:	4d07      	ldr	r5, [pc, #28]	; (8007c14 <_read_r+0x20>)
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	4608      	mov	r0, r1
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	2200      	movs	r2, #0
 8007c00:	602a      	str	r2, [r5, #0]
 8007c02:	461a      	mov	r2, r3
 8007c04:	f7f9 feb4 	bl	8001970 <_read>
 8007c08:	1c43      	adds	r3, r0, #1
 8007c0a:	d102      	bne.n	8007c12 <_read_r+0x1e>
 8007c0c:	682b      	ldr	r3, [r5, #0]
 8007c0e:	b103      	cbz	r3, 8007c12 <_read_r+0x1e>
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	bd38      	pop	{r3, r4, r5, pc}
 8007c14:	2000029c 	.word	0x2000029c

08007c18 <__ascii_wctomb>:
 8007c18:	b149      	cbz	r1, 8007c2e <__ascii_wctomb+0x16>
 8007c1a:	2aff      	cmp	r2, #255	; 0xff
 8007c1c:	bf85      	ittet	hi
 8007c1e:	238a      	movhi	r3, #138	; 0x8a
 8007c20:	6003      	strhi	r3, [r0, #0]
 8007c22:	700a      	strbls	r2, [r1, #0]
 8007c24:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007c28:	bf98      	it	ls
 8007c2a:	2001      	movls	r0, #1
 8007c2c:	4770      	bx	lr
 8007c2e:	4608      	mov	r0, r1
 8007c30:	4770      	bx	lr

08007c32 <abort>:
 8007c32:	b508      	push	{r3, lr}
 8007c34:	2006      	movs	r0, #6
 8007c36:	f000 f84d 	bl	8007cd4 <raise>
 8007c3a:	2001      	movs	r0, #1
 8007c3c:	f7f9 fe8e 	bl	800195c <_exit>

08007c40 <_fstat_r>:
 8007c40:	b538      	push	{r3, r4, r5, lr}
 8007c42:	4d07      	ldr	r5, [pc, #28]	; (8007c60 <_fstat_r+0x20>)
 8007c44:	2300      	movs	r3, #0
 8007c46:	4604      	mov	r4, r0
 8007c48:	4608      	mov	r0, r1
 8007c4a:	4611      	mov	r1, r2
 8007c4c:	602b      	str	r3, [r5, #0]
 8007c4e:	f7f9 fed4 	bl	80019fa <_fstat>
 8007c52:	1c43      	adds	r3, r0, #1
 8007c54:	d102      	bne.n	8007c5c <_fstat_r+0x1c>
 8007c56:	682b      	ldr	r3, [r5, #0]
 8007c58:	b103      	cbz	r3, 8007c5c <_fstat_r+0x1c>
 8007c5a:	6023      	str	r3, [r4, #0]
 8007c5c:	bd38      	pop	{r3, r4, r5, pc}
 8007c5e:	bf00      	nop
 8007c60:	2000029c 	.word	0x2000029c

08007c64 <_isatty_r>:
 8007c64:	b538      	push	{r3, r4, r5, lr}
 8007c66:	4d06      	ldr	r5, [pc, #24]	; (8007c80 <_isatty_r+0x1c>)
 8007c68:	2300      	movs	r3, #0
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	4608      	mov	r0, r1
 8007c6e:	602b      	str	r3, [r5, #0]
 8007c70:	f7f9 fed3 	bl	8001a1a <_isatty>
 8007c74:	1c43      	adds	r3, r0, #1
 8007c76:	d102      	bne.n	8007c7e <_isatty_r+0x1a>
 8007c78:	682b      	ldr	r3, [r5, #0]
 8007c7a:	b103      	cbz	r3, 8007c7e <_isatty_r+0x1a>
 8007c7c:	6023      	str	r3, [r4, #0]
 8007c7e:	bd38      	pop	{r3, r4, r5, pc}
 8007c80:	2000029c 	.word	0x2000029c

08007c84 <_raise_r>:
 8007c84:	291f      	cmp	r1, #31
 8007c86:	b538      	push	{r3, r4, r5, lr}
 8007c88:	4604      	mov	r4, r0
 8007c8a:	460d      	mov	r5, r1
 8007c8c:	d904      	bls.n	8007c98 <_raise_r+0x14>
 8007c8e:	2316      	movs	r3, #22
 8007c90:	6003      	str	r3, [r0, #0]
 8007c92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c96:	bd38      	pop	{r3, r4, r5, pc}
 8007c98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007c9a:	b112      	cbz	r2, 8007ca2 <_raise_r+0x1e>
 8007c9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ca0:	b94b      	cbnz	r3, 8007cb6 <_raise_r+0x32>
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f000 f830 	bl	8007d08 <_getpid_r>
 8007ca8:	462a      	mov	r2, r5
 8007caa:	4601      	mov	r1, r0
 8007cac:	4620      	mov	r0, r4
 8007cae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cb2:	f000 b817 	b.w	8007ce4 <_kill_r>
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d00a      	beq.n	8007cd0 <_raise_r+0x4c>
 8007cba:	1c59      	adds	r1, r3, #1
 8007cbc:	d103      	bne.n	8007cc6 <_raise_r+0x42>
 8007cbe:	2316      	movs	r3, #22
 8007cc0:	6003      	str	r3, [r0, #0]
 8007cc2:	2001      	movs	r0, #1
 8007cc4:	e7e7      	b.n	8007c96 <_raise_r+0x12>
 8007cc6:	2400      	movs	r4, #0
 8007cc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007ccc:	4628      	mov	r0, r5
 8007cce:	4798      	blx	r3
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	e7e0      	b.n	8007c96 <_raise_r+0x12>

08007cd4 <raise>:
 8007cd4:	4b02      	ldr	r3, [pc, #8]	; (8007ce0 <raise+0xc>)
 8007cd6:	4601      	mov	r1, r0
 8007cd8:	6818      	ldr	r0, [r3, #0]
 8007cda:	f7ff bfd3 	b.w	8007c84 <_raise_r>
 8007cde:	bf00      	nop
 8007ce0:	2000000c 	.word	0x2000000c

08007ce4 <_kill_r>:
 8007ce4:	b538      	push	{r3, r4, r5, lr}
 8007ce6:	4d07      	ldr	r5, [pc, #28]	; (8007d04 <_kill_r+0x20>)
 8007ce8:	2300      	movs	r3, #0
 8007cea:	4604      	mov	r4, r0
 8007cec:	4608      	mov	r0, r1
 8007cee:	4611      	mov	r1, r2
 8007cf0:	602b      	str	r3, [r5, #0]
 8007cf2:	f7f9 fe23 	bl	800193c <_kill>
 8007cf6:	1c43      	adds	r3, r0, #1
 8007cf8:	d102      	bne.n	8007d00 <_kill_r+0x1c>
 8007cfa:	682b      	ldr	r3, [r5, #0]
 8007cfc:	b103      	cbz	r3, 8007d00 <_kill_r+0x1c>
 8007cfe:	6023      	str	r3, [r4, #0]
 8007d00:	bd38      	pop	{r3, r4, r5, pc}
 8007d02:	bf00      	nop
 8007d04:	2000029c 	.word	0x2000029c

08007d08 <_getpid_r>:
 8007d08:	f7f9 be10 	b.w	800192c <_getpid>

08007d0c <pow>:
 8007d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0e:	ed2d 8b02 	vpush	{d8}
 8007d12:	eeb0 8a40 	vmov.f32	s16, s0
 8007d16:	eef0 8a60 	vmov.f32	s17, s1
 8007d1a:	ec55 4b11 	vmov	r4, r5, d1
 8007d1e:	f000 f893 	bl	8007e48 <__ieee754_pow>
 8007d22:	4622      	mov	r2, r4
 8007d24:	462b      	mov	r3, r5
 8007d26:	4620      	mov	r0, r4
 8007d28:	4629      	mov	r1, r5
 8007d2a:	ec57 6b10 	vmov	r6, r7, d0
 8007d2e:	f7f8 ff15 	bl	8000b5c <__aeabi_dcmpun>
 8007d32:	2800      	cmp	r0, #0
 8007d34:	d13b      	bne.n	8007dae <pow+0xa2>
 8007d36:	ec51 0b18 	vmov	r0, r1, d8
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	f7f8 fedb 	bl	8000af8 <__aeabi_dcmpeq>
 8007d42:	b1b8      	cbz	r0, 8007d74 <pow+0x68>
 8007d44:	2200      	movs	r2, #0
 8007d46:	2300      	movs	r3, #0
 8007d48:	4620      	mov	r0, r4
 8007d4a:	4629      	mov	r1, r5
 8007d4c:	f7f8 fed4 	bl	8000af8 <__aeabi_dcmpeq>
 8007d50:	2800      	cmp	r0, #0
 8007d52:	d146      	bne.n	8007de2 <pow+0xd6>
 8007d54:	ec45 4b10 	vmov	d0, r4, r5
 8007d58:	f000 fe8f 	bl	8008a7a <finite>
 8007d5c:	b338      	cbz	r0, 8007dae <pow+0xa2>
 8007d5e:	2200      	movs	r2, #0
 8007d60:	2300      	movs	r3, #0
 8007d62:	4620      	mov	r0, r4
 8007d64:	4629      	mov	r1, r5
 8007d66:	f7f8 fed1 	bl	8000b0c <__aeabi_dcmplt>
 8007d6a:	b300      	cbz	r0, 8007dae <pow+0xa2>
 8007d6c:	f7fd fa6c 	bl	8005248 <__errno>
 8007d70:	2322      	movs	r3, #34	; 0x22
 8007d72:	e01b      	b.n	8007dac <pow+0xa0>
 8007d74:	ec47 6b10 	vmov	d0, r6, r7
 8007d78:	f000 fe7f 	bl	8008a7a <finite>
 8007d7c:	b9e0      	cbnz	r0, 8007db8 <pow+0xac>
 8007d7e:	eeb0 0a48 	vmov.f32	s0, s16
 8007d82:	eef0 0a68 	vmov.f32	s1, s17
 8007d86:	f000 fe78 	bl	8008a7a <finite>
 8007d8a:	b1a8      	cbz	r0, 8007db8 <pow+0xac>
 8007d8c:	ec45 4b10 	vmov	d0, r4, r5
 8007d90:	f000 fe73 	bl	8008a7a <finite>
 8007d94:	b180      	cbz	r0, 8007db8 <pow+0xac>
 8007d96:	4632      	mov	r2, r6
 8007d98:	463b      	mov	r3, r7
 8007d9a:	4630      	mov	r0, r6
 8007d9c:	4639      	mov	r1, r7
 8007d9e:	f7f8 fedd 	bl	8000b5c <__aeabi_dcmpun>
 8007da2:	2800      	cmp	r0, #0
 8007da4:	d0e2      	beq.n	8007d6c <pow+0x60>
 8007da6:	f7fd fa4f 	bl	8005248 <__errno>
 8007daa:	2321      	movs	r3, #33	; 0x21
 8007dac:	6003      	str	r3, [r0, #0]
 8007dae:	ecbd 8b02 	vpop	{d8}
 8007db2:	ec47 6b10 	vmov	d0, r6, r7
 8007db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007db8:	2200      	movs	r2, #0
 8007dba:	2300      	movs	r3, #0
 8007dbc:	4630      	mov	r0, r6
 8007dbe:	4639      	mov	r1, r7
 8007dc0:	f7f8 fe9a 	bl	8000af8 <__aeabi_dcmpeq>
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	d0f2      	beq.n	8007dae <pow+0xa2>
 8007dc8:	eeb0 0a48 	vmov.f32	s0, s16
 8007dcc:	eef0 0a68 	vmov.f32	s1, s17
 8007dd0:	f000 fe53 	bl	8008a7a <finite>
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	d0ea      	beq.n	8007dae <pow+0xa2>
 8007dd8:	ec45 4b10 	vmov	d0, r4, r5
 8007ddc:	f000 fe4d 	bl	8008a7a <finite>
 8007de0:	e7c3      	b.n	8007d6a <pow+0x5e>
 8007de2:	4f01      	ldr	r7, [pc, #4]	; (8007de8 <pow+0xdc>)
 8007de4:	2600      	movs	r6, #0
 8007de6:	e7e2      	b.n	8007dae <pow+0xa2>
 8007de8:	3ff00000 	.word	0x3ff00000

08007dec <sqrt>:
 8007dec:	b538      	push	{r3, r4, r5, lr}
 8007dee:	ed2d 8b02 	vpush	{d8}
 8007df2:	ec55 4b10 	vmov	r4, r5, d0
 8007df6:	f000 fd55 	bl	80088a4 <__ieee754_sqrt>
 8007dfa:	4622      	mov	r2, r4
 8007dfc:	462b      	mov	r3, r5
 8007dfe:	4620      	mov	r0, r4
 8007e00:	4629      	mov	r1, r5
 8007e02:	eeb0 8a40 	vmov.f32	s16, s0
 8007e06:	eef0 8a60 	vmov.f32	s17, s1
 8007e0a:	f7f8 fea7 	bl	8000b5c <__aeabi_dcmpun>
 8007e0e:	b990      	cbnz	r0, 8007e36 <sqrt+0x4a>
 8007e10:	2200      	movs	r2, #0
 8007e12:	2300      	movs	r3, #0
 8007e14:	4620      	mov	r0, r4
 8007e16:	4629      	mov	r1, r5
 8007e18:	f7f8 fe78 	bl	8000b0c <__aeabi_dcmplt>
 8007e1c:	b158      	cbz	r0, 8007e36 <sqrt+0x4a>
 8007e1e:	f7fd fa13 	bl	8005248 <__errno>
 8007e22:	2321      	movs	r3, #33	; 0x21
 8007e24:	6003      	str	r3, [r0, #0]
 8007e26:	2200      	movs	r2, #0
 8007e28:	2300      	movs	r3, #0
 8007e2a:	4610      	mov	r0, r2
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	f7f8 fd25 	bl	800087c <__aeabi_ddiv>
 8007e32:	ec41 0b18 	vmov	d8, r0, r1
 8007e36:	eeb0 0a48 	vmov.f32	s0, s16
 8007e3a:	eef0 0a68 	vmov.f32	s1, s17
 8007e3e:	ecbd 8b02 	vpop	{d8}
 8007e42:	bd38      	pop	{r3, r4, r5, pc}
 8007e44:	0000      	movs	r0, r0
	...

08007e48 <__ieee754_pow>:
 8007e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e4c:	ed2d 8b06 	vpush	{d8-d10}
 8007e50:	b089      	sub	sp, #36	; 0x24
 8007e52:	ed8d 1b00 	vstr	d1, [sp]
 8007e56:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007e5a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007e5e:	ea58 0102 	orrs.w	r1, r8, r2
 8007e62:	ec57 6b10 	vmov	r6, r7, d0
 8007e66:	d115      	bne.n	8007e94 <__ieee754_pow+0x4c>
 8007e68:	19b3      	adds	r3, r6, r6
 8007e6a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8007e6e:	4152      	adcs	r2, r2
 8007e70:	4299      	cmp	r1, r3
 8007e72:	4b89      	ldr	r3, [pc, #548]	; (8008098 <__ieee754_pow+0x250>)
 8007e74:	4193      	sbcs	r3, r2
 8007e76:	f080 84d2 	bcs.w	800881e <__ieee754_pow+0x9d6>
 8007e7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e7e:	4630      	mov	r0, r6
 8007e80:	4639      	mov	r1, r7
 8007e82:	f7f8 fa1b 	bl	80002bc <__adddf3>
 8007e86:	ec41 0b10 	vmov	d0, r0, r1
 8007e8a:	b009      	add	sp, #36	; 0x24
 8007e8c:	ecbd 8b06 	vpop	{d8-d10}
 8007e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e94:	4b81      	ldr	r3, [pc, #516]	; (800809c <__ieee754_pow+0x254>)
 8007e96:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007e9a:	429c      	cmp	r4, r3
 8007e9c:	ee10 aa10 	vmov	sl, s0
 8007ea0:	463d      	mov	r5, r7
 8007ea2:	dc06      	bgt.n	8007eb2 <__ieee754_pow+0x6a>
 8007ea4:	d101      	bne.n	8007eaa <__ieee754_pow+0x62>
 8007ea6:	2e00      	cmp	r6, #0
 8007ea8:	d1e7      	bne.n	8007e7a <__ieee754_pow+0x32>
 8007eaa:	4598      	cmp	r8, r3
 8007eac:	dc01      	bgt.n	8007eb2 <__ieee754_pow+0x6a>
 8007eae:	d10f      	bne.n	8007ed0 <__ieee754_pow+0x88>
 8007eb0:	b172      	cbz	r2, 8007ed0 <__ieee754_pow+0x88>
 8007eb2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007eb6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007eba:	ea55 050a 	orrs.w	r5, r5, sl
 8007ebe:	d1dc      	bne.n	8007e7a <__ieee754_pow+0x32>
 8007ec0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007ec4:	18db      	adds	r3, r3, r3
 8007ec6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007eca:	4152      	adcs	r2, r2
 8007ecc:	429d      	cmp	r5, r3
 8007ece:	e7d0      	b.n	8007e72 <__ieee754_pow+0x2a>
 8007ed0:	2d00      	cmp	r5, #0
 8007ed2:	da3b      	bge.n	8007f4c <__ieee754_pow+0x104>
 8007ed4:	4b72      	ldr	r3, [pc, #456]	; (80080a0 <__ieee754_pow+0x258>)
 8007ed6:	4598      	cmp	r8, r3
 8007ed8:	dc51      	bgt.n	8007f7e <__ieee754_pow+0x136>
 8007eda:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007ede:	4598      	cmp	r8, r3
 8007ee0:	f340 84ac 	ble.w	800883c <__ieee754_pow+0x9f4>
 8007ee4:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007ee8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007eec:	2b14      	cmp	r3, #20
 8007eee:	dd0f      	ble.n	8007f10 <__ieee754_pow+0xc8>
 8007ef0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007ef4:	fa22 f103 	lsr.w	r1, r2, r3
 8007ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8007efc:	4293      	cmp	r3, r2
 8007efe:	f040 849d 	bne.w	800883c <__ieee754_pow+0x9f4>
 8007f02:	f001 0101 	and.w	r1, r1, #1
 8007f06:	f1c1 0302 	rsb	r3, r1, #2
 8007f0a:	9304      	str	r3, [sp, #16]
 8007f0c:	b182      	cbz	r2, 8007f30 <__ieee754_pow+0xe8>
 8007f0e:	e05f      	b.n	8007fd0 <__ieee754_pow+0x188>
 8007f10:	2a00      	cmp	r2, #0
 8007f12:	d15b      	bne.n	8007fcc <__ieee754_pow+0x184>
 8007f14:	f1c3 0314 	rsb	r3, r3, #20
 8007f18:	fa48 f103 	asr.w	r1, r8, r3
 8007f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8007f20:	4543      	cmp	r3, r8
 8007f22:	f040 8488 	bne.w	8008836 <__ieee754_pow+0x9ee>
 8007f26:	f001 0101 	and.w	r1, r1, #1
 8007f2a:	f1c1 0302 	rsb	r3, r1, #2
 8007f2e:	9304      	str	r3, [sp, #16]
 8007f30:	4b5c      	ldr	r3, [pc, #368]	; (80080a4 <__ieee754_pow+0x25c>)
 8007f32:	4598      	cmp	r8, r3
 8007f34:	d132      	bne.n	8007f9c <__ieee754_pow+0x154>
 8007f36:	f1b9 0f00 	cmp.w	r9, #0
 8007f3a:	f280 8478 	bge.w	800882e <__ieee754_pow+0x9e6>
 8007f3e:	4959      	ldr	r1, [pc, #356]	; (80080a4 <__ieee754_pow+0x25c>)
 8007f40:	4632      	mov	r2, r6
 8007f42:	463b      	mov	r3, r7
 8007f44:	2000      	movs	r0, #0
 8007f46:	f7f8 fc99 	bl	800087c <__aeabi_ddiv>
 8007f4a:	e79c      	b.n	8007e86 <__ieee754_pow+0x3e>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	9304      	str	r3, [sp, #16]
 8007f50:	2a00      	cmp	r2, #0
 8007f52:	d13d      	bne.n	8007fd0 <__ieee754_pow+0x188>
 8007f54:	4b51      	ldr	r3, [pc, #324]	; (800809c <__ieee754_pow+0x254>)
 8007f56:	4598      	cmp	r8, r3
 8007f58:	d1ea      	bne.n	8007f30 <__ieee754_pow+0xe8>
 8007f5a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007f5e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007f62:	ea53 030a 	orrs.w	r3, r3, sl
 8007f66:	f000 845a 	beq.w	800881e <__ieee754_pow+0x9d6>
 8007f6a:	4b4f      	ldr	r3, [pc, #316]	; (80080a8 <__ieee754_pow+0x260>)
 8007f6c:	429c      	cmp	r4, r3
 8007f6e:	dd08      	ble.n	8007f82 <__ieee754_pow+0x13a>
 8007f70:	f1b9 0f00 	cmp.w	r9, #0
 8007f74:	f2c0 8457 	blt.w	8008826 <__ieee754_pow+0x9de>
 8007f78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f7c:	e783      	b.n	8007e86 <__ieee754_pow+0x3e>
 8007f7e:	2302      	movs	r3, #2
 8007f80:	e7e5      	b.n	8007f4e <__ieee754_pow+0x106>
 8007f82:	f1b9 0f00 	cmp.w	r9, #0
 8007f86:	f04f 0000 	mov.w	r0, #0
 8007f8a:	f04f 0100 	mov.w	r1, #0
 8007f8e:	f6bf af7a 	bge.w	8007e86 <__ieee754_pow+0x3e>
 8007f92:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007f96:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007f9a:	e774      	b.n	8007e86 <__ieee754_pow+0x3e>
 8007f9c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007fa0:	d106      	bne.n	8007fb0 <__ieee754_pow+0x168>
 8007fa2:	4632      	mov	r2, r6
 8007fa4:	463b      	mov	r3, r7
 8007fa6:	4630      	mov	r0, r6
 8007fa8:	4639      	mov	r1, r7
 8007faa:	f7f8 fb3d 	bl	8000628 <__aeabi_dmul>
 8007fae:	e76a      	b.n	8007e86 <__ieee754_pow+0x3e>
 8007fb0:	4b3e      	ldr	r3, [pc, #248]	; (80080ac <__ieee754_pow+0x264>)
 8007fb2:	4599      	cmp	r9, r3
 8007fb4:	d10c      	bne.n	8007fd0 <__ieee754_pow+0x188>
 8007fb6:	2d00      	cmp	r5, #0
 8007fb8:	db0a      	blt.n	8007fd0 <__ieee754_pow+0x188>
 8007fba:	ec47 6b10 	vmov	d0, r6, r7
 8007fbe:	b009      	add	sp, #36	; 0x24
 8007fc0:	ecbd 8b06 	vpop	{d8-d10}
 8007fc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc8:	f000 bc6c 	b.w	80088a4 <__ieee754_sqrt>
 8007fcc:	2300      	movs	r3, #0
 8007fce:	9304      	str	r3, [sp, #16]
 8007fd0:	ec47 6b10 	vmov	d0, r6, r7
 8007fd4:	f000 fd48 	bl	8008a68 <fabs>
 8007fd8:	ec51 0b10 	vmov	r0, r1, d0
 8007fdc:	f1ba 0f00 	cmp.w	sl, #0
 8007fe0:	d129      	bne.n	8008036 <__ieee754_pow+0x1ee>
 8007fe2:	b124      	cbz	r4, 8007fee <__ieee754_pow+0x1a6>
 8007fe4:	4b2f      	ldr	r3, [pc, #188]	; (80080a4 <__ieee754_pow+0x25c>)
 8007fe6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d123      	bne.n	8008036 <__ieee754_pow+0x1ee>
 8007fee:	f1b9 0f00 	cmp.w	r9, #0
 8007ff2:	da05      	bge.n	8008000 <__ieee754_pow+0x1b8>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	2000      	movs	r0, #0
 8007ffa:	492a      	ldr	r1, [pc, #168]	; (80080a4 <__ieee754_pow+0x25c>)
 8007ffc:	f7f8 fc3e 	bl	800087c <__aeabi_ddiv>
 8008000:	2d00      	cmp	r5, #0
 8008002:	f6bf af40 	bge.w	8007e86 <__ieee754_pow+0x3e>
 8008006:	9b04      	ldr	r3, [sp, #16]
 8008008:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800800c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008010:	4323      	orrs	r3, r4
 8008012:	d108      	bne.n	8008026 <__ieee754_pow+0x1de>
 8008014:	4602      	mov	r2, r0
 8008016:	460b      	mov	r3, r1
 8008018:	4610      	mov	r0, r2
 800801a:	4619      	mov	r1, r3
 800801c:	f7f8 f94c 	bl	80002b8 <__aeabi_dsub>
 8008020:	4602      	mov	r2, r0
 8008022:	460b      	mov	r3, r1
 8008024:	e78f      	b.n	8007f46 <__ieee754_pow+0xfe>
 8008026:	9b04      	ldr	r3, [sp, #16]
 8008028:	2b01      	cmp	r3, #1
 800802a:	f47f af2c 	bne.w	8007e86 <__ieee754_pow+0x3e>
 800802e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008032:	4619      	mov	r1, r3
 8008034:	e727      	b.n	8007e86 <__ieee754_pow+0x3e>
 8008036:	0feb      	lsrs	r3, r5, #31
 8008038:	3b01      	subs	r3, #1
 800803a:	9306      	str	r3, [sp, #24]
 800803c:	9a06      	ldr	r2, [sp, #24]
 800803e:	9b04      	ldr	r3, [sp, #16]
 8008040:	4313      	orrs	r3, r2
 8008042:	d102      	bne.n	800804a <__ieee754_pow+0x202>
 8008044:	4632      	mov	r2, r6
 8008046:	463b      	mov	r3, r7
 8008048:	e7e6      	b.n	8008018 <__ieee754_pow+0x1d0>
 800804a:	4b19      	ldr	r3, [pc, #100]	; (80080b0 <__ieee754_pow+0x268>)
 800804c:	4598      	cmp	r8, r3
 800804e:	f340 80fb 	ble.w	8008248 <__ieee754_pow+0x400>
 8008052:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008056:	4598      	cmp	r8, r3
 8008058:	4b13      	ldr	r3, [pc, #76]	; (80080a8 <__ieee754_pow+0x260>)
 800805a:	dd0c      	ble.n	8008076 <__ieee754_pow+0x22e>
 800805c:	429c      	cmp	r4, r3
 800805e:	dc0f      	bgt.n	8008080 <__ieee754_pow+0x238>
 8008060:	f1b9 0f00 	cmp.w	r9, #0
 8008064:	da0f      	bge.n	8008086 <__ieee754_pow+0x23e>
 8008066:	2000      	movs	r0, #0
 8008068:	b009      	add	sp, #36	; 0x24
 800806a:	ecbd 8b06 	vpop	{d8-d10}
 800806e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008072:	f000 bcf0 	b.w	8008a56 <__math_oflow>
 8008076:	429c      	cmp	r4, r3
 8008078:	dbf2      	blt.n	8008060 <__ieee754_pow+0x218>
 800807a:	4b0a      	ldr	r3, [pc, #40]	; (80080a4 <__ieee754_pow+0x25c>)
 800807c:	429c      	cmp	r4, r3
 800807e:	dd19      	ble.n	80080b4 <__ieee754_pow+0x26c>
 8008080:	f1b9 0f00 	cmp.w	r9, #0
 8008084:	dcef      	bgt.n	8008066 <__ieee754_pow+0x21e>
 8008086:	2000      	movs	r0, #0
 8008088:	b009      	add	sp, #36	; 0x24
 800808a:	ecbd 8b06 	vpop	{d8-d10}
 800808e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008092:	f000 bcd7 	b.w	8008a44 <__math_uflow>
 8008096:	bf00      	nop
 8008098:	fff00000 	.word	0xfff00000
 800809c:	7ff00000 	.word	0x7ff00000
 80080a0:	433fffff 	.word	0x433fffff
 80080a4:	3ff00000 	.word	0x3ff00000
 80080a8:	3fefffff 	.word	0x3fefffff
 80080ac:	3fe00000 	.word	0x3fe00000
 80080b0:	41e00000 	.word	0x41e00000
 80080b4:	4b60      	ldr	r3, [pc, #384]	; (8008238 <__ieee754_pow+0x3f0>)
 80080b6:	2200      	movs	r2, #0
 80080b8:	f7f8 f8fe 	bl	80002b8 <__aeabi_dsub>
 80080bc:	a354      	add	r3, pc, #336	; (adr r3, 8008210 <__ieee754_pow+0x3c8>)
 80080be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c2:	4604      	mov	r4, r0
 80080c4:	460d      	mov	r5, r1
 80080c6:	f7f8 faaf 	bl	8000628 <__aeabi_dmul>
 80080ca:	a353      	add	r3, pc, #332	; (adr r3, 8008218 <__ieee754_pow+0x3d0>)
 80080cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d0:	4606      	mov	r6, r0
 80080d2:	460f      	mov	r7, r1
 80080d4:	4620      	mov	r0, r4
 80080d6:	4629      	mov	r1, r5
 80080d8:	f7f8 faa6 	bl	8000628 <__aeabi_dmul>
 80080dc:	4b57      	ldr	r3, [pc, #348]	; (800823c <__ieee754_pow+0x3f4>)
 80080de:	4682      	mov	sl, r0
 80080e0:	468b      	mov	fp, r1
 80080e2:	2200      	movs	r2, #0
 80080e4:	4620      	mov	r0, r4
 80080e6:	4629      	mov	r1, r5
 80080e8:	f7f8 fa9e 	bl	8000628 <__aeabi_dmul>
 80080ec:	4602      	mov	r2, r0
 80080ee:	460b      	mov	r3, r1
 80080f0:	a14b      	add	r1, pc, #300	; (adr r1, 8008220 <__ieee754_pow+0x3d8>)
 80080f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080f6:	f7f8 f8df 	bl	80002b8 <__aeabi_dsub>
 80080fa:	4622      	mov	r2, r4
 80080fc:	462b      	mov	r3, r5
 80080fe:	f7f8 fa93 	bl	8000628 <__aeabi_dmul>
 8008102:	4602      	mov	r2, r0
 8008104:	460b      	mov	r3, r1
 8008106:	2000      	movs	r0, #0
 8008108:	494d      	ldr	r1, [pc, #308]	; (8008240 <__ieee754_pow+0x3f8>)
 800810a:	f7f8 f8d5 	bl	80002b8 <__aeabi_dsub>
 800810e:	4622      	mov	r2, r4
 8008110:	4680      	mov	r8, r0
 8008112:	4689      	mov	r9, r1
 8008114:	462b      	mov	r3, r5
 8008116:	4620      	mov	r0, r4
 8008118:	4629      	mov	r1, r5
 800811a:	f7f8 fa85 	bl	8000628 <__aeabi_dmul>
 800811e:	4602      	mov	r2, r0
 8008120:	460b      	mov	r3, r1
 8008122:	4640      	mov	r0, r8
 8008124:	4649      	mov	r1, r9
 8008126:	f7f8 fa7f 	bl	8000628 <__aeabi_dmul>
 800812a:	a33f      	add	r3, pc, #252	; (adr r3, 8008228 <__ieee754_pow+0x3e0>)
 800812c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008130:	f7f8 fa7a 	bl	8000628 <__aeabi_dmul>
 8008134:	4602      	mov	r2, r0
 8008136:	460b      	mov	r3, r1
 8008138:	4650      	mov	r0, sl
 800813a:	4659      	mov	r1, fp
 800813c:	f7f8 f8bc 	bl	80002b8 <__aeabi_dsub>
 8008140:	4602      	mov	r2, r0
 8008142:	460b      	mov	r3, r1
 8008144:	4680      	mov	r8, r0
 8008146:	4689      	mov	r9, r1
 8008148:	4630      	mov	r0, r6
 800814a:	4639      	mov	r1, r7
 800814c:	f7f8 f8b6 	bl	80002bc <__adddf3>
 8008150:	2000      	movs	r0, #0
 8008152:	4632      	mov	r2, r6
 8008154:	463b      	mov	r3, r7
 8008156:	4604      	mov	r4, r0
 8008158:	460d      	mov	r5, r1
 800815a:	f7f8 f8ad 	bl	80002b8 <__aeabi_dsub>
 800815e:	4602      	mov	r2, r0
 8008160:	460b      	mov	r3, r1
 8008162:	4640      	mov	r0, r8
 8008164:	4649      	mov	r1, r9
 8008166:	f7f8 f8a7 	bl	80002b8 <__aeabi_dsub>
 800816a:	9b04      	ldr	r3, [sp, #16]
 800816c:	9a06      	ldr	r2, [sp, #24]
 800816e:	3b01      	subs	r3, #1
 8008170:	4313      	orrs	r3, r2
 8008172:	4682      	mov	sl, r0
 8008174:	468b      	mov	fp, r1
 8008176:	f040 81e7 	bne.w	8008548 <__ieee754_pow+0x700>
 800817a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008230 <__ieee754_pow+0x3e8>
 800817e:	eeb0 8a47 	vmov.f32	s16, s14
 8008182:	eef0 8a67 	vmov.f32	s17, s15
 8008186:	e9dd 6700 	ldrd	r6, r7, [sp]
 800818a:	2600      	movs	r6, #0
 800818c:	4632      	mov	r2, r6
 800818e:	463b      	mov	r3, r7
 8008190:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008194:	f7f8 f890 	bl	80002b8 <__aeabi_dsub>
 8008198:	4622      	mov	r2, r4
 800819a:	462b      	mov	r3, r5
 800819c:	f7f8 fa44 	bl	8000628 <__aeabi_dmul>
 80081a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081a4:	4680      	mov	r8, r0
 80081a6:	4689      	mov	r9, r1
 80081a8:	4650      	mov	r0, sl
 80081aa:	4659      	mov	r1, fp
 80081ac:	f7f8 fa3c 	bl	8000628 <__aeabi_dmul>
 80081b0:	4602      	mov	r2, r0
 80081b2:	460b      	mov	r3, r1
 80081b4:	4640      	mov	r0, r8
 80081b6:	4649      	mov	r1, r9
 80081b8:	f7f8 f880 	bl	80002bc <__adddf3>
 80081bc:	4632      	mov	r2, r6
 80081be:	463b      	mov	r3, r7
 80081c0:	4680      	mov	r8, r0
 80081c2:	4689      	mov	r9, r1
 80081c4:	4620      	mov	r0, r4
 80081c6:	4629      	mov	r1, r5
 80081c8:	f7f8 fa2e 	bl	8000628 <__aeabi_dmul>
 80081cc:	460b      	mov	r3, r1
 80081ce:	4604      	mov	r4, r0
 80081d0:	460d      	mov	r5, r1
 80081d2:	4602      	mov	r2, r0
 80081d4:	4649      	mov	r1, r9
 80081d6:	4640      	mov	r0, r8
 80081d8:	f7f8 f870 	bl	80002bc <__adddf3>
 80081dc:	4b19      	ldr	r3, [pc, #100]	; (8008244 <__ieee754_pow+0x3fc>)
 80081de:	4299      	cmp	r1, r3
 80081e0:	ec45 4b19 	vmov	d9, r4, r5
 80081e4:	4606      	mov	r6, r0
 80081e6:	460f      	mov	r7, r1
 80081e8:	468b      	mov	fp, r1
 80081ea:	f340 82f1 	ble.w	80087d0 <__ieee754_pow+0x988>
 80081ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80081f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80081f6:	4303      	orrs	r3, r0
 80081f8:	f000 81e4 	beq.w	80085c4 <__ieee754_pow+0x77c>
 80081fc:	ec51 0b18 	vmov	r0, r1, d8
 8008200:	2200      	movs	r2, #0
 8008202:	2300      	movs	r3, #0
 8008204:	f7f8 fc82 	bl	8000b0c <__aeabi_dcmplt>
 8008208:	3800      	subs	r0, #0
 800820a:	bf18      	it	ne
 800820c:	2001      	movne	r0, #1
 800820e:	e72b      	b.n	8008068 <__ieee754_pow+0x220>
 8008210:	60000000 	.word	0x60000000
 8008214:	3ff71547 	.word	0x3ff71547
 8008218:	f85ddf44 	.word	0xf85ddf44
 800821c:	3e54ae0b 	.word	0x3e54ae0b
 8008220:	55555555 	.word	0x55555555
 8008224:	3fd55555 	.word	0x3fd55555
 8008228:	652b82fe 	.word	0x652b82fe
 800822c:	3ff71547 	.word	0x3ff71547
 8008230:	00000000 	.word	0x00000000
 8008234:	bff00000 	.word	0xbff00000
 8008238:	3ff00000 	.word	0x3ff00000
 800823c:	3fd00000 	.word	0x3fd00000
 8008240:	3fe00000 	.word	0x3fe00000
 8008244:	408fffff 	.word	0x408fffff
 8008248:	4bd5      	ldr	r3, [pc, #852]	; (80085a0 <__ieee754_pow+0x758>)
 800824a:	402b      	ands	r3, r5
 800824c:	2200      	movs	r2, #0
 800824e:	b92b      	cbnz	r3, 800825c <__ieee754_pow+0x414>
 8008250:	4bd4      	ldr	r3, [pc, #848]	; (80085a4 <__ieee754_pow+0x75c>)
 8008252:	f7f8 f9e9 	bl	8000628 <__aeabi_dmul>
 8008256:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800825a:	460c      	mov	r4, r1
 800825c:	1523      	asrs	r3, r4, #20
 800825e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008262:	4413      	add	r3, r2
 8008264:	9305      	str	r3, [sp, #20]
 8008266:	4bd0      	ldr	r3, [pc, #832]	; (80085a8 <__ieee754_pow+0x760>)
 8008268:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800826c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008270:	429c      	cmp	r4, r3
 8008272:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008276:	dd08      	ble.n	800828a <__ieee754_pow+0x442>
 8008278:	4bcc      	ldr	r3, [pc, #816]	; (80085ac <__ieee754_pow+0x764>)
 800827a:	429c      	cmp	r4, r3
 800827c:	f340 8162 	ble.w	8008544 <__ieee754_pow+0x6fc>
 8008280:	9b05      	ldr	r3, [sp, #20]
 8008282:	3301      	adds	r3, #1
 8008284:	9305      	str	r3, [sp, #20]
 8008286:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800828a:	2400      	movs	r4, #0
 800828c:	00e3      	lsls	r3, r4, #3
 800828e:	9307      	str	r3, [sp, #28]
 8008290:	4bc7      	ldr	r3, [pc, #796]	; (80085b0 <__ieee754_pow+0x768>)
 8008292:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008296:	ed93 7b00 	vldr	d7, [r3]
 800829a:	4629      	mov	r1, r5
 800829c:	ec53 2b17 	vmov	r2, r3, d7
 80082a0:	eeb0 9a47 	vmov.f32	s18, s14
 80082a4:	eef0 9a67 	vmov.f32	s19, s15
 80082a8:	4682      	mov	sl, r0
 80082aa:	f7f8 f805 	bl	80002b8 <__aeabi_dsub>
 80082ae:	4652      	mov	r2, sl
 80082b0:	4606      	mov	r6, r0
 80082b2:	460f      	mov	r7, r1
 80082b4:	462b      	mov	r3, r5
 80082b6:	ec51 0b19 	vmov	r0, r1, d9
 80082ba:	f7f7 ffff 	bl	80002bc <__adddf3>
 80082be:	4602      	mov	r2, r0
 80082c0:	460b      	mov	r3, r1
 80082c2:	2000      	movs	r0, #0
 80082c4:	49bb      	ldr	r1, [pc, #748]	; (80085b4 <__ieee754_pow+0x76c>)
 80082c6:	f7f8 fad9 	bl	800087c <__aeabi_ddiv>
 80082ca:	ec41 0b1a 	vmov	d10, r0, r1
 80082ce:	4602      	mov	r2, r0
 80082d0:	460b      	mov	r3, r1
 80082d2:	4630      	mov	r0, r6
 80082d4:	4639      	mov	r1, r7
 80082d6:	f7f8 f9a7 	bl	8000628 <__aeabi_dmul>
 80082da:	2300      	movs	r3, #0
 80082dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082e0:	9302      	str	r3, [sp, #8]
 80082e2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80082e6:	46ab      	mov	fp, r5
 80082e8:	106d      	asrs	r5, r5, #1
 80082ea:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80082ee:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80082f2:	ec41 0b18 	vmov	d8, r0, r1
 80082f6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80082fa:	2200      	movs	r2, #0
 80082fc:	4640      	mov	r0, r8
 80082fe:	4649      	mov	r1, r9
 8008300:	4614      	mov	r4, r2
 8008302:	461d      	mov	r5, r3
 8008304:	f7f8 f990 	bl	8000628 <__aeabi_dmul>
 8008308:	4602      	mov	r2, r0
 800830a:	460b      	mov	r3, r1
 800830c:	4630      	mov	r0, r6
 800830e:	4639      	mov	r1, r7
 8008310:	f7f7 ffd2 	bl	80002b8 <__aeabi_dsub>
 8008314:	ec53 2b19 	vmov	r2, r3, d9
 8008318:	4606      	mov	r6, r0
 800831a:	460f      	mov	r7, r1
 800831c:	4620      	mov	r0, r4
 800831e:	4629      	mov	r1, r5
 8008320:	f7f7 ffca 	bl	80002b8 <__aeabi_dsub>
 8008324:	4602      	mov	r2, r0
 8008326:	460b      	mov	r3, r1
 8008328:	4650      	mov	r0, sl
 800832a:	4659      	mov	r1, fp
 800832c:	f7f7 ffc4 	bl	80002b8 <__aeabi_dsub>
 8008330:	4642      	mov	r2, r8
 8008332:	464b      	mov	r3, r9
 8008334:	f7f8 f978 	bl	8000628 <__aeabi_dmul>
 8008338:	4602      	mov	r2, r0
 800833a:	460b      	mov	r3, r1
 800833c:	4630      	mov	r0, r6
 800833e:	4639      	mov	r1, r7
 8008340:	f7f7 ffba 	bl	80002b8 <__aeabi_dsub>
 8008344:	ec53 2b1a 	vmov	r2, r3, d10
 8008348:	f7f8 f96e 	bl	8000628 <__aeabi_dmul>
 800834c:	ec53 2b18 	vmov	r2, r3, d8
 8008350:	ec41 0b19 	vmov	d9, r0, r1
 8008354:	ec51 0b18 	vmov	r0, r1, d8
 8008358:	f7f8 f966 	bl	8000628 <__aeabi_dmul>
 800835c:	a37c      	add	r3, pc, #496	; (adr r3, 8008550 <__ieee754_pow+0x708>)
 800835e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008362:	4604      	mov	r4, r0
 8008364:	460d      	mov	r5, r1
 8008366:	f7f8 f95f 	bl	8000628 <__aeabi_dmul>
 800836a:	a37b      	add	r3, pc, #492	; (adr r3, 8008558 <__ieee754_pow+0x710>)
 800836c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008370:	f7f7 ffa4 	bl	80002bc <__adddf3>
 8008374:	4622      	mov	r2, r4
 8008376:	462b      	mov	r3, r5
 8008378:	f7f8 f956 	bl	8000628 <__aeabi_dmul>
 800837c:	a378      	add	r3, pc, #480	; (adr r3, 8008560 <__ieee754_pow+0x718>)
 800837e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008382:	f7f7 ff9b 	bl	80002bc <__adddf3>
 8008386:	4622      	mov	r2, r4
 8008388:	462b      	mov	r3, r5
 800838a:	f7f8 f94d 	bl	8000628 <__aeabi_dmul>
 800838e:	a376      	add	r3, pc, #472	; (adr r3, 8008568 <__ieee754_pow+0x720>)
 8008390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008394:	f7f7 ff92 	bl	80002bc <__adddf3>
 8008398:	4622      	mov	r2, r4
 800839a:	462b      	mov	r3, r5
 800839c:	f7f8 f944 	bl	8000628 <__aeabi_dmul>
 80083a0:	a373      	add	r3, pc, #460	; (adr r3, 8008570 <__ieee754_pow+0x728>)
 80083a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a6:	f7f7 ff89 	bl	80002bc <__adddf3>
 80083aa:	4622      	mov	r2, r4
 80083ac:	462b      	mov	r3, r5
 80083ae:	f7f8 f93b 	bl	8000628 <__aeabi_dmul>
 80083b2:	a371      	add	r3, pc, #452	; (adr r3, 8008578 <__ieee754_pow+0x730>)
 80083b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b8:	f7f7 ff80 	bl	80002bc <__adddf3>
 80083bc:	4622      	mov	r2, r4
 80083be:	4606      	mov	r6, r0
 80083c0:	460f      	mov	r7, r1
 80083c2:	462b      	mov	r3, r5
 80083c4:	4620      	mov	r0, r4
 80083c6:	4629      	mov	r1, r5
 80083c8:	f7f8 f92e 	bl	8000628 <__aeabi_dmul>
 80083cc:	4602      	mov	r2, r0
 80083ce:	460b      	mov	r3, r1
 80083d0:	4630      	mov	r0, r6
 80083d2:	4639      	mov	r1, r7
 80083d4:	f7f8 f928 	bl	8000628 <__aeabi_dmul>
 80083d8:	4642      	mov	r2, r8
 80083da:	4604      	mov	r4, r0
 80083dc:	460d      	mov	r5, r1
 80083de:	464b      	mov	r3, r9
 80083e0:	ec51 0b18 	vmov	r0, r1, d8
 80083e4:	f7f7 ff6a 	bl	80002bc <__adddf3>
 80083e8:	ec53 2b19 	vmov	r2, r3, d9
 80083ec:	f7f8 f91c 	bl	8000628 <__aeabi_dmul>
 80083f0:	4622      	mov	r2, r4
 80083f2:	462b      	mov	r3, r5
 80083f4:	f7f7 ff62 	bl	80002bc <__adddf3>
 80083f8:	4642      	mov	r2, r8
 80083fa:	4682      	mov	sl, r0
 80083fc:	468b      	mov	fp, r1
 80083fe:	464b      	mov	r3, r9
 8008400:	4640      	mov	r0, r8
 8008402:	4649      	mov	r1, r9
 8008404:	f7f8 f910 	bl	8000628 <__aeabi_dmul>
 8008408:	4b6b      	ldr	r3, [pc, #428]	; (80085b8 <__ieee754_pow+0x770>)
 800840a:	2200      	movs	r2, #0
 800840c:	4606      	mov	r6, r0
 800840e:	460f      	mov	r7, r1
 8008410:	f7f7 ff54 	bl	80002bc <__adddf3>
 8008414:	4652      	mov	r2, sl
 8008416:	465b      	mov	r3, fp
 8008418:	f7f7 ff50 	bl	80002bc <__adddf3>
 800841c:	2000      	movs	r0, #0
 800841e:	4604      	mov	r4, r0
 8008420:	460d      	mov	r5, r1
 8008422:	4602      	mov	r2, r0
 8008424:	460b      	mov	r3, r1
 8008426:	4640      	mov	r0, r8
 8008428:	4649      	mov	r1, r9
 800842a:	f7f8 f8fd 	bl	8000628 <__aeabi_dmul>
 800842e:	4b62      	ldr	r3, [pc, #392]	; (80085b8 <__ieee754_pow+0x770>)
 8008430:	4680      	mov	r8, r0
 8008432:	4689      	mov	r9, r1
 8008434:	2200      	movs	r2, #0
 8008436:	4620      	mov	r0, r4
 8008438:	4629      	mov	r1, r5
 800843a:	f7f7 ff3d 	bl	80002b8 <__aeabi_dsub>
 800843e:	4632      	mov	r2, r6
 8008440:	463b      	mov	r3, r7
 8008442:	f7f7 ff39 	bl	80002b8 <__aeabi_dsub>
 8008446:	4602      	mov	r2, r0
 8008448:	460b      	mov	r3, r1
 800844a:	4650      	mov	r0, sl
 800844c:	4659      	mov	r1, fp
 800844e:	f7f7 ff33 	bl	80002b8 <__aeabi_dsub>
 8008452:	ec53 2b18 	vmov	r2, r3, d8
 8008456:	f7f8 f8e7 	bl	8000628 <__aeabi_dmul>
 800845a:	4622      	mov	r2, r4
 800845c:	4606      	mov	r6, r0
 800845e:	460f      	mov	r7, r1
 8008460:	462b      	mov	r3, r5
 8008462:	ec51 0b19 	vmov	r0, r1, d9
 8008466:	f7f8 f8df 	bl	8000628 <__aeabi_dmul>
 800846a:	4602      	mov	r2, r0
 800846c:	460b      	mov	r3, r1
 800846e:	4630      	mov	r0, r6
 8008470:	4639      	mov	r1, r7
 8008472:	f7f7 ff23 	bl	80002bc <__adddf3>
 8008476:	4606      	mov	r6, r0
 8008478:	460f      	mov	r7, r1
 800847a:	4602      	mov	r2, r0
 800847c:	460b      	mov	r3, r1
 800847e:	4640      	mov	r0, r8
 8008480:	4649      	mov	r1, r9
 8008482:	f7f7 ff1b 	bl	80002bc <__adddf3>
 8008486:	a33e      	add	r3, pc, #248	; (adr r3, 8008580 <__ieee754_pow+0x738>)
 8008488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848c:	2000      	movs	r0, #0
 800848e:	4604      	mov	r4, r0
 8008490:	460d      	mov	r5, r1
 8008492:	f7f8 f8c9 	bl	8000628 <__aeabi_dmul>
 8008496:	4642      	mov	r2, r8
 8008498:	ec41 0b18 	vmov	d8, r0, r1
 800849c:	464b      	mov	r3, r9
 800849e:	4620      	mov	r0, r4
 80084a0:	4629      	mov	r1, r5
 80084a2:	f7f7 ff09 	bl	80002b8 <__aeabi_dsub>
 80084a6:	4602      	mov	r2, r0
 80084a8:	460b      	mov	r3, r1
 80084aa:	4630      	mov	r0, r6
 80084ac:	4639      	mov	r1, r7
 80084ae:	f7f7 ff03 	bl	80002b8 <__aeabi_dsub>
 80084b2:	a335      	add	r3, pc, #212	; (adr r3, 8008588 <__ieee754_pow+0x740>)
 80084b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b8:	f7f8 f8b6 	bl	8000628 <__aeabi_dmul>
 80084bc:	a334      	add	r3, pc, #208	; (adr r3, 8008590 <__ieee754_pow+0x748>)
 80084be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c2:	4606      	mov	r6, r0
 80084c4:	460f      	mov	r7, r1
 80084c6:	4620      	mov	r0, r4
 80084c8:	4629      	mov	r1, r5
 80084ca:	f7f8 f8ad 	bl	8000628 <__aeabi_dmul>
 80084ce:	4602      	mov	r2, r0
 80084d0:	460b      	mov	r3, r1
 80084d2:	4630      	mov	r0, r6
 80084d4:	4639      	mov	r1, r7
 80084d6:	f7f7 fef1 	bl	80002bc <__adddf3>
 80084da:	9a07      	ldr	r2, [sp, #28]
 80084dc:	4b37      	ldr	r3, [pc, #220]	; (80085bc <__ieee754_pow+0x774>)
 80084de:	4413      	add	r3, r2
 80084e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e4:	f7f7 feea 	bl	80002bc <__adddf3>
 80084e8:	4682      	mov	sl, r0
 80084ea:	9805      	ldr	r0, [sp, #20]
 80084ec:	468b      	mov	fp, r1
 80084ee:	f7f8 f831 	bl	8000554 <__aeabi_i2d>
 80084f2:	9a07      	ldr	r2, [sp, #28]
 80084f4:	4b32      	ldr	r3, [pc, #200]	; (80085c0 <__ieee754_pow+0x778>)
 80084f6:	4413      	add	r3, r2
 80084f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80084fc:	4606      	mov	r6, r0
 80084fe:	460f      	mov	r7, r1
 8008500:	4652      	mov	r2, sl
 8008502:	465b      	mov	r3, fp
 8008504:	ec51 0b18 	vmov	r0, r1, d8
 8008508:	f7f7 fed8 	bl	80002bc <__adddf3>
 800850c:	4642      	mov	r2, r8
 800850e:	464b      	mov	r3, r9
 8008510:	f7f7 fed4 	bl	80002bc <__adddf3>
 8008514:	4632      	mov	r2, r6
 8008516:	463b      	mov	r3, r7
 8008518:	f7f7 fed0 	bl	80002bc <__adddf3>
 800851c:	2000      	movs	r0, #0
 800851e:	4632      	mov	r2, r6
 8008520:	463b      	mov	r3, r7
 8008522:	4604      	mov	r4, r0
 8008524:	460d      	mov	r5, r1
 8008526:	f7f7 fec7 	bl	80002b8 <__aeabi_dsub>
 800852a:	4642      	mov	r2, r8
 800852c:	464b      	mov	r3, r9
 800852e:	f7f7 fec3 	bl	80002b8 <__aeabi_dsub>
 8008532:	ec53 2b18 	vmov	r2, r3, d8
 8008536:	f7f7 febf 	bl	80002b8 <__aeabi_dsub>
 800853a:	4602      	mov	r2, r0
 800853c:	460b      	mov	r3, r1
 800853e:	4650      	mov	r0, sl
 8008540:	4659      	mov	r1, fp
 8008542:	e610      	b.n	8008166 <__ieee754_pow+0x31e>
 8008544:	2401      	movs	r4, #1
 8008546:	e6a1      	b.n	800828c <__ieee754_pow+0x444>
 8008548:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008598 <__ieee754_pow+0x750>
 800854c:	e617      	b.n	800817e <__ieee754_pow+0x336>
 800854e:	bf00      	nop
 8008550:	4a454eef 	.word	0x4a454eef
 8008554:	3fca7e28 	.word	0x3fca7e28
 8008558:	93c9db65 	.word	0x93c9db65
 800855c:	3fcd864a 	.word	0x3fcd864a
 8008560:	a91d4101 	.word	0xa91d4101
 8008564:	3fd17460 	.word	0x3fd17460
 8008568:	518f264d 	.word	0x518f264d
 800856c:	3fd55555 	.word	0x3fd55555
 8008570:	db6fabff 	.word	0xdb6fabff
 8008574:	3fdb6db6 	.word	0x3fdb6db6
 8008578:	33333303 	.word	0x33333303
 800857c:	3fe33333 	.word	0x3fe33333
 8008580:	e0000000 	.word	0xe0000000
 8008584:	3feec709 	.word	0x3feec709
 8008588:	dc3a03fd 	.word	0xdc3a03fd
 800858c:	3feec709 	.word	0x3feec709
 8008590:	145b01f5 	.word	0x145b01f5
 8008594:	be3e2fe0 	.word	0xbe3e2fe0
 8008598:	00000000 	.word	0x00000000
 800859c:	3ff00000 	.word	0x3ff00000
 80085a0:	7ff00000 	.word	0x7ff00000
 80085a4:	43400000 	.word	0x43400000
 80085a8:	0003988e 	.word	0x0003988e
 80085ac:	000bb679 	.word	0x000bb679
 80085b0:	080091c8 	.word	0x080091c8
 80085b4:	3ff00000 	.word	0x3ff00000
 80085b8:	40080000 	.word	0x40080000
 80085bc:	080091e8 	.word	0x080091e8
 80085c0:	080091d8 	.word	0x080091d8
 80085c4:	a3b5      	add	r3, pc, #724	; (adr r3, 800889c <__ieee754_pow+0xa54>)
 80085c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ca:	4640      	mov	r0, r8
 80085cc:	4649      	mov	r1, r9
 80085ce:	f7f7 fe75 	bl	80002bc <__adddf3>
 80085d2:	4622      	mov	r2, r4
 80085d4:	ec41 0b1a 	vmov	d10, r0, r1
 80085d8:	462b      	mov	r3, r5
 80085da:	4630      	mov	r0, r6
 80085dc:	4639      	mov	r1, r7
 80085de:	f7f7 fe6b 	bl	80002b8 <__aeabi_dsub>
 80085e2:	4602      	mov	r2, r0
 80085e4:	460b      	mov	r3, r1
 80085e6:	ec51 0b1a 	vmov	r0, r1, d10
 80085ea:	f7f8 faad 	bl	8000b48 <__aeabi_dcmpgt>
 80085ee:	2800      	cmp	r0, #0
 80085f0:	f47f ae04 	bne.w	80081fc <__ieee754_pow+0x3b4>
 80085f4:	4aa4      	ldr	r2, [pc, #656]	; (8008888 <__ieee754_pow+0xa40>)
 80085f6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80085fa:	4293      	cmp	r3, r2
 80085fc:	f340 8108 	ble.w	8008810 <__ieee754_pow+0x9c8>
 8008600:	151b      	asrs	r3, r3, #20
 8008602:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008606:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800860a:	fa4a f303 	asr.w	r3, sl, r3
 800860e:	445b      	add	r3, fp
 8008610:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008614:	4e9d      	ldr	r6, [pc, #628]	; (800888c <__ieee754_pow+0xa44>)
 8008616:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800861a:	4116      	asrs	r6, r2
 800861c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008620:	2000      	movs	r0, #0
 8008622:	ea23 0106 	bic.w	r1, r3, r6
 8008626:	f1c2 0214 	rsb	r2, r2, #20
 800862a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800862e:	fa4a fa02 	asr.w	sl, sl, r2
 8008632:	f1bb 0f00 	cmp.w	fp, #0
 8008636:	4602      	mov	r2, r0
 8008638:	460b      	mov	r3, r1
 800863a:	4620      	mov	r0, r4
 800863c:	4629      	mov	r1, r5
 800863e:	bfb8      	it	lt
 8008640:	f1ca 0a00 	rsblt	sl, sl, #0
 8008644:	f7f7 fe38 	bl	80002b8 <__aeabi_dsub>
 8008648:	ec41 0b19 	vmov	d9, r0, r1
 800864c:	4642      	mov	r2, r8
 800864e:	464b      	mov	r3, r9
 8008650:	ec51 0b19 	vmov	r0, r1, d9
 8008654:	f7f7 fe32 	bl	80002bc <__adddf3>
 8008658:	a37b      	add	r3, pc, #492	; (adr r3, 8008848 <__ieee754_pow+0xa00>)
 800865a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865e:	2000      	movs	r0, #0
 8008660:	4604      	mov	r4, r0
 8008662:	460d      	mov	r5, r1
 8008664:	f7f7 ffe0 	bl	8000628 <__aeabi_dmul>
 8008668:	ec53 2b19 	vmov	r2, r3, d9
 800866c:	4606      	mov	r6, r0
 800866e:	460f      	mov	r7, r1
 8008670:	4620      	mov	r0, r4
 8008672:	4629      	mov	r1, r5
 8008674:	f7f7 fe20 	bl	80002b8 <__aeabi_dsub>
 8008678:	4602      	mov	r2, r0
 800867a:	460b      	mov	r3, r1
 800867c:	4640      	mov	r0, r8
 800867e:	4649      	mov	r1, r9
 8008680:	f7f7 fe1a 	bl	80002b8 <__aeabi_dsub>
 8008684:	a372      	add	r3, pc, #456	; (adr r3, 8008850 <__ieee754_pow+0xa08>)
 8008686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868a:	f7f7 ffcd 	bl	8000628 <__aeabi_dmul>
 800868e:	a372      	add	r3, pc, #456	; (adr r3, 8008858 <__ieee754_pow+0xa10>)
 8008690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008694:	4680      	mov	r8, r0
 8008696:	4689      	mov	r9, r1
 8008698:	4620      	mov	r0, r4
 800869a:	4629      	mov	r1, r5
 800869c:	f7f7 ffc4 	bl	8000628 <__aeabi_dmul>
 80086a0:	4602      	mov	r2, r0
 80086a2:	460b      	mov	r3, r1
 80086a4:	4640      	mov	r0, r8
 80086a6:	4649      	mov	r1, r9
 80086a8:	f7f7 fe08 	bl	80002bc <__adddf3>
 80086ac:	4604      	mov	r4, r0
 80086ae:	460d      	mov	r5, r1
 80086b0:	4602      	mov	r2, r0
 80086b2:	460b      	mov	r3, r1
 80086b4:	4630      	mov	r0, r6
 80086b6:	4639      	mov	r1, r7
 80086b8:	f7f7 fe00 	bl	80002bc <__adddf3>
 80086bc:	4632      	mov	r2, r6
 80086be:	463b      	mov	r3, r7
 80086c0:	4680      	mov	r8, r0
 80086c2:	4689      	mov	r9, r1
 80086c4:	f7f7 fdf8 	bl	80002b8 <__aeabi_dsub>
 80086c8:	4602      	mov	r2, r0
 80086ca:	460b      	mov	r3, r1
 80086cc:	4620      	mov	r0, r4
 80086ce:	4629      	mov	r1, r5
 80086d0:	f7f7 fdf2 	bl	80002b8 <__aeabi_dsub>
 80086d4:	4642      	mov	r2, r8
 80086d6:	4606      	mov	r6, r0
 80086d8:	460f      	mov	r7, r1
 80086da:	464b      	mov	r3, r9
 80086dc:	4640      	mov	r0, r8
 80086de:	4649      	mov	r1, r9
 80086e0:	f7f7 ffa2 	bl	8000628 <__aeabi_dmul>
 80086e4:	a35e      	add	r3, pc, #376	; (adr r3, 8008860 <__ieee754_pow+0xa18>)
 80086e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ea:	4604      	mov	r4, r0
 80086ec:	460d      	mov	r5, r1
 80086ee:	f7f7 ff9b 	bl	8000628 <__aeabi_dmul>
 80086f2:	a35d      	add	r3, pc, #372	; (adr r3, 8008868 <__ieee754_pow+0xa20>)
 80086f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f8:	f7f7 fdde 	bl	80002b8 <__aeabi_dsub>
 80086fc:	4622      	mov	r2, r4
 80086fe:	462b      	mov	r3, r5
 8008700:	f7f7 ff92 	bl	8000628 <__aeabi_dmul>
 8008704:	a35a      	add	r3, pc, #360	; (adr r3, 8008870 <__ieee754_pow+0xa28>)
 8008706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870a:	f7f7 fdd7 	bl	80002bc <__adddf3>
 800870e:	4622      	mov	r2, r4
 8008710:	462b      	mov	r3, r5
 8008712:	f7f7 ff89 	bl	8000628 <__aeabi_dmul>
 8008716:	a358      	add	r3, pc, #352	; (adr r3, 8008878 <__ieee754_pow+0xa30>)
 8008718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871c:	f7f7 fdcc 	bl	80002b8 <__aeabi_dsub>
 8008720:	4622      	mov	r2, r4
 8008722:	462b      	mov	r3, r5
 8008724:	f7f7 ff80 	bl	8000628 <__aeabi_dmul>
 8008728:	a355      	add	r3, pc, #340	; (adr r3, 8008880 <__ieee754_pow+0xa38>)
 800872a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872e:	f7f7 fdc5 	bl	80002bc <__adddf3>
 8008732:	4622      	mov	r2, r4
 8008734:	462b      	mov	r3, r5
 8008736:	f7f7 ff77 	bl	8000628 <__aeabi_dmul>
 800873a:	4602      	mov	r2, r0
 800873c:	460b      	mov	r3, r1
 800873e:	4640      	mov	r0, r8
 8008740:	4649      	mov	r1, r9
 8008742:	f7f7 fdb9 	bl	80002b8 <__aeabi_dsub>
 8008746:	4604      	mov	r4, r0
 8008748:	460d      	mov	r5, r1
 800874a:	4602      	mov	r2, r0
 800874c:	460b      	mov	r3, r1
 800874e:	4640      	mov	r0, r8
 8008750:	4649      	mov	r1, r9
 8008752:	f7f7 ff69 	bl	8000628 <__aeabi_dmul>
 8008756:	2200      	movs	r2, #0
 8008758:	ec41 0b19 	vmov	d9, r0, r1
 800875c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008760:	4620      	mov	r0, r4
 8008762:	4629      	mov	r1, r5
 8008764:	f7f7 fda8 	bl	80002b8 <__aeabi_dsub>
 8008768:	4602      	mov	r2, r0
 800876a:	460b      	mov	r3, r1
 800876c:	ec51 0b19 	vmov	r0, r1, d9
 8008770:	f7f8 f884 	bl	800087c <__aeabi_ddiv>
 8008774:	4632      	mov	r2, r6
 8008776:	4604      	mov	r4, r0
 8008778:	460d      	mov	r5, r1
 800877a:	463b      	mov	r3, r7
 800877c:	4640      	mov	r0, r8
 800877e:	4649      	mov	r1, r9
 8008780:	f7f7 ff52 	bl	8000628 <__aeabi_dmul>
 8008784:	4632      	mov	r2, r6
 8008786:	463b      	mov	r3, r7
 8008788:	f7f7 fd98 	bl	80002bc <__adddf3>
 800878c:	4602      	mov	r2, r0
 800878e:	460b      	mov	r3, r1
 8008790:	4620      	mov	r0, r4
 8008792:	4629      	mov	r1, r5
 8008794:	f7f7 fd90 	bl	80002b8 <__aeabi_dsub>
 8008798:	4642      	mov	r2, r8
 800879a:	464b      	mov	r3, r9
 800879c:	f7f7 fd8c 	bl	80002b8 <__aeabi_dsub>
 80087a0:	460b      	mov	r3, r1
 80087a2:	4602      	mov	r2, r0
 80087a4:	493a      	ldr	r1, [pc, #232]	; (8008890 <__ieee754_pow+0xa48>)
 80087a6:	2000      	movs	r0, #0
 80087a8:	f7f7 fd86 	bl	80002b8 <__aeabi_dsub>
 80087ac:	ec41 0b10 	vmov	d0, r0, r1
 80087b0:	ee10 3a90 	vmov	r3, s1
 80087b4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80087b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087bc:	da2b      	bge.n	8008816 <__ieee754_pow+0x9ce>
 80087be:	4650      	mov	r0, sl
 80087c0:	f000 f966 	bl	8008a90 <scalbn>
 80087c4:	ec51 0b10 	vmov	r0, r1, d0
 80087c8:	ec53 2b18 	vmov	r2, r3, d8
 80087cc:	f7ff bbed 	b.w	8007faa <__ieee754_pow+0x162>
 80087d0:	4b30      	ldr	r3, [pc, #192]	; (8008894 <__ieee754_pow+0xa4c>)
 80087d2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80087d6:	429e      	cmp	r6, r3
 80087d8:	f77f af0c 	ble.w	80085f4 <__ieee754_pow+0x7ac>
 80087dc:	4b2e      	ldr	r3, [pc, #184]	; (8008898 <__ieee754_pow+0xa50>)
 80087de:	440b      	add	r3, r1
 80087e0:	4303      	orrs	r3, r0
 80087e2:	d009      	beq.n	80087f8 <__ieee754_pow+0x9b0>
 80087e4:	ec51 0b18 	vmov	r0, r1, d8
 80087e8:	2200      	movs	r2, #0
 80087ea:	2300      	movs	r3, #0
 80087ec:	f7f8 f98e 	bl	8000b0c <__aeabi_dcmplt>
 80087f0:	3800      	subs	r0, #0
 80087f2:	bf18      	it	ne
 80087f4:	2001      	movne	r0, #1
 80087f6:	e447      	b.n	8008088 <__ieee754_pow+0x240>
 80087f8:	4622      	mov	r2, r4
 80087fa:	462b      	mov	r3, r5
 80087fc:	f7f7 fd5c 	bl	80002b8 <__aeabi_dsub>
 8008800:	4642      	mov	r2, r8
 8008802:	464b      	mov	r3, r9
 8008804:	f7f8 f996 	bl	8000b34 <__aeabi_dcmpge>
 8008808:	2800      	cmp	r0, #0
 800880a:	f43f aef3 	beq.w	80085f4 <__ieee754_pow+0x7ac>
 800880e:	e7e9      	b.n	80087e4 <__ieee754_pow+0x99c>
 8008810:	f04f 0a00 	mov.w	sl, #0
 8008814:	e71a      	b.n	800864c <__ieee754_pow+0x804>
 8008816:	ec51 0b10 	vmov	r0, r1, d0
 800881a:	4619      	mov	r1, r3
 800881c:	e7d4      	b.n	80087c8 <__ieee754_pow+0x980>
 800881e:	491c      	ldr	r1, [pc, #112]	; (8008890 <__ieee754_pow+0xa48>)
 8008820:	2000      	movs	r0, #0
 8008822:	f7ff bb30 	b.w	8007e86 <__ieee754_pow+0x3e>
 8008826:	2000      	movs	r0, #0
 8008828:	2100      	movs	r1, #0
 800882a:	f7ff bb2c 	b.w	8007e86 <__ieee754_pow+0x3e>
 800882e:	4630      	mov	r0, r6
 8008830:	4639      	mov	r1, r7
 8008832:	f7ff bb28 	b.w	8007e86 <__ieee754_pow+0x3e>
 8008836:	9204      	str	r2, [sp, #16]
 8008838:	f7ff bb7a 	b.w	8007f30 <__ieee754_pow+0xe8>
 800883c:	2300      	movs	r3, #0
 800883e:	f7ff bb64 	b.w	8007f0a <__ieee754_pow+0xc2>
 8008842:	bf00      	nop
 8008844:	f3af 8000 	nop.w
 8008848:	00000000 	.word	0x00000000
 800884c:	3fe62e43 	.word	0x3fe62e43
 8008850:	fefa39ef 	.word	0xfefa39ef
 8008854:	3fe62e42 	.word	0x3fe62e42
 8008858:	0ca86c39 	.word	0x0ca86c39
 800885c:	be205c61 	.word	0xbe205c61
 8008860:	72bea4d0 	.word	0x72bea4d0
 8008864:	3e663769 	.word	0x3e663769
 8008868:	c5d26bf1 	.word	0xc5d26bf1
 800886c:	3ebbbd41 	.word	0x3ebbbd41
 8008870:	af25de2c 	.word	0xaf25de2c
 8008874:	3f11566a 	.word	0x3f11566a
 8008878:	16bebd93 	.word	0x16bebd93
 800887c:	3f66c16c 	.word	0x3f66c16c
 8008880:	5555553e 	.word	0x5555553e
 8008884:	3fc55555 	.word	0x3fc55555
 8008888:	3fe00000 	.word	0x3fe00000
 800888c:	000fffff 	.word	0x000fffff
 8008890:	3ff00000 	.word	0x3ff00000
 8008894:	4090cbff 	.word	0x4090cbff
 8008898:	3f6f3400 	.word	0x3f6f3400
 800889c:	652b82fe 	.word	0x652b82fe
 80088a0:	3c971547 	.word	0x3c971547

080088a4 <__ieee754_sqrt>:
 80088a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088a8:	ec55 4b10 	vmov	r4, r5, d0
 80088ac:	4e55      	ldr	r6, [pc, #340]	; (8008a04 <__ieee754_sqrt+0x160>)
 80088ae:	43ae      	bics	r6, r5
 80088b0:	ee10 0a10 	vmov	r0, s0
 80088b4:	ee10 3a10 	vmov	r3, s0
 80088b8:	462a      	mov	r2, r5
 80088ba:	4629      	mov	r1, r5
 80088bc:	d110      	bne.n	80088e0 <__ieee754_sqrt+0x3c>
 80088be:	ee10 2a10 	vmov	r2, s0
 80088c2:	462b      	mov	r3, r5
 80088c4:	f7f7 feb0 	bl	8000628 <__aeabi_dmul>
 80088c8:	4602      	mov	r2, r0
 80088ca:	460b      	mov	r3, r1
 80088cc:	4620      	mov	r0, r4
 80088ce:	4629      	mov	r1, r5
 80088d0:	f7f7 fcf4 	bl	80002bc <__adddf3>
 80088d4:	4604      	mov	r4, r0
 80088d6:	460d      	mov	r5, r1
 80088d8:	ec45 4b10 	vmov	d0, r4, r5
 80088dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088e0:	2d00      	cmp	r5, #0
 80088e2:	dc10      	bgt.n	8008906 <__ieee754_sqrt+0x62>
 80088e4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80088e8:	4330      	orrs	r0, r6
 80088ea:	d0f5      	beq.n	80088d8 <__ieee754_sqrt+0x34>
 80088ec:	b15d      	cbz	r5, 8008906 <__ieee754_sqrt+0x62>
 80088ee:	ee10 2a10 	vmov	r2, s0
 80088f2:	462b      	mov	r3, r5
 80088f4:	ee10 0a10 	vmov	r0, s0
 80088f8:	f7f7 fcde 	bl	80002b8 <__aeabi_dsub>
 80088fc:	4602      	mov	r2, r0
 80088fe:	460b      	mov	r3, r1
 8008900:	f7f7 ffbc 	bl	800087c <__aeabi_ddiv>
 8008904:	e7e6      	b.n	80088d4 <__ieee754_sqrt+0x30>
 8008906:	1512      	asrs	r2, r2, #20
 8008908:	d074      	beq.n	80089f4 <__ieee754_sqrt+0x150>
 800890a:	07d4      	lsls	r4, r2, #31
 800890c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008910:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008918:	bf5e      	ittt	pl
 800891a:	0fda      	lsrpl	r2, r3, #31
 800891c:	005b      	lslpl	r3, r3, #1
 800891e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008922:	2400      	movs	r4, #0
 8008924:	0fda      	lsrs	r2, r3, #31
 8008926:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800892a:	107f      	asrs	r7, r7, #1
 800892c:	005b      	lsls	r3, r3, #1
 800892e:	2516      	movs	r5, #22
 8008930:	4620      	mov	r0, r4
 8008932:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008936:	1886      	adds	r6, r0, r2
 8008938:	428e      	cmp	r6, r1
 800893a:	bfde      	ittt	le
 800893c:	1b89      	suble	r1, r1, r6
 800893e:	18b0      	addle	r0, r6, r2
 8008940:	18a4      	addle	r4, r4, r2
 8008942:	0049      	lsls	r1, r1, #1
 8008944:	3d01      	subs	r5, #1
 8008946:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800894a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800894e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008952:	d1f0      	bne.n	8008936 <__ieee754_sqrt+0x92>
 8008954:	462a      	mov	r2, r5
 8008956:	f04f 0e20 	mov.w	lr, #32
 800895a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800895e:	4281      	cmp	r1, r0
 8008960:	eb06 0c05 	add.w	ip, r6, r5
 8008964:	dc02      	bgt.n	800896c <__ieee754_sqrt+0xc8>
 8008966:	d113      	bne.n	8008990 <__ieee754_sqrt+0xec>
 8008968:	459c      	cmp	ip, r3
 800896a:	d811      	bhi.n	8008990 <__ieee754_sqrt+0xec>
 800896c:	f1bc 0f00 	cmp.w	ip, #0
 8008970:	eb0c 0506 	add.w	r5, ip, r6
 8008974:	da43      	bge.n	80089fe <__ieee754_sqrt+0x15a>
 8008976:	2d00      	cmp	r5, #0
 8008978:	db41      	blt.n	80089fe <__ieee754_sqrt+0x15a>
 800897a:	f100 0801 	add.w	r8, r0, #1
 800897e:	1a09      	subs	r1, r1, r0
 8008980:	459c      	cmp	ip, r3
 8008982:	bf88      	it	hi
 8008984:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8008988:	eba3 030c 	sub.w	r3, r3, ip
 800898c:	4432      	add	r2, r6
 800898e:	4640      	mov	r0, r8
 8008990:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008994:	f1be 0e01 	subs.w	lr, lr, #1
 8008998:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800899c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80089a0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80089a4:	d1db      	bne.n	800895e <__ieee754_sqrt+0xba>
 80089a6:	430b      	orrs	r3, r1
 80089a8:	d006      	beq.n	80089b8 <__ieee754_sqrt+0x114>
 80089aa:	1c50      	adds	r0, r2, #1
 80089ac:	bf13      	iteet	ne
 80089ae:	3201      	addne	r2, #1
 80089b0:	3401      	addeq	r4, #1
 80089b2:	4672      	moveq	r2, lr
 80089b4:	f022 0201 	bicne.w	r2, r2, #1
 80089b8:	1063      	asrs	r3, r4, #1
 80089ba:	0852      	lsrs	r2, r2, #1
 80089bc:	07e1      	lsls	r1, r4, #31
 80089be:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80089c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80089c6:	bf48      	it	mi
 80089c8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80089cc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80089d0:	4614      	mov	r4, r2
 80089d2:	e781      	b.n	80088d8 <__ieee754_sqrt+0x34>
 80089d4:	0ad9      	lsrs	r1, r3, #11
 80089d6:	3815      	subs	r0, #21
 80089d8:	055b      	lsls	r3, r3, #21
 80089da:	2900      	cmp	r1, #0
 80089dc:	d0fa      	beq.n	80089d4 <__ieee754_sqrt+0x130>
 80089de:	02cd      	lsls	r5, r1, #11
 80089e0:	d50a      	bpl.n	80089f8 <__ieee754_sqrt+0x154>
 80089e2:	f1c2 0420 	rsb	r4, r2, #32
 80089e6:	fa23 f404 	lsr.w	r4, r3, r4
 80089ea:	1e55      	subs	r5, r2, #1
 80089ec:	4093      	lsls	r3, r2
 80089ee:	4321      	orrs	r1, r4
 80089f0:	1b42      	subs	r2, r0, r5
 80089f2:	e78a      	b.n	800890a <__ieee754_sqrt+0x66>
 80089f4:	4610      	mov	r0, r2
 80089f6:	e7f0      	b.n	80089da <__ieee754_sqrt+0x136>
 80089f8:	0049      	lsls	r1, r1, #1
 80089fa:	3201      	adds	r2, #1
 80089fc:	e7ef      	b.n	80089de <__ieee754_sqrt+0x13a>
 80089fe:	4680      	mov	r8, r0
 8008a00:	e7bd      	b.n	800897e <__ieee754_sqrt+0xda>
 8008a02:	bf00      	nop
 8008a04:	7ff00000 	.word	0x7ff00000

08008a08 <with_errno>:
 8008a08:	b570      	push	{r4, r5, r6, lr}
 8008a0a:	4604      	mov	r4, r0
 8008a0c:	460d      	mov	r5, r1
 8008a0e:	4616      	mov	r6, r2
 8008a10:	f7fc fc1a 	bl	8005248 <__errno>
 8008a14:	4629      	mov	r1, r5
 8008a16:	6006      	str	r6, [r0, #0]
 8008a18:	4620      	mov	r0, r4
 8008a1a:	bd70      	pop	{r4, r5, r6, pc}

08008a1c <xflow>:
 8008a1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a1e:	4614      	mov	r4, r2
 8008a20:	461d      	mov	r5, r3
 8008a22:	b108      	cbz	r0, 8008a28 <xflow+0xc>
 8008a24:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008a28:	e9cd 2300 	strd	r2, r3, [sp]
 8008a2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a30:	4620      	mov	r0, r4
 8008a32:	4629      	mov	r1, r5
 8008a34:	f7f7 fdf8 	bl	8000628 <__aeabi_dmul>
 8008a38:	2222      	movs	r2, #34	; 0x22
 8008a3a:	b003      	add	sp, #12
 8008a3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a40:	f7ff bfe2 	b.w	8008a08 <with_errno>

08008a44 <__math_uflow>:
 8008a44:	b508      	push	{r3, lr}
 8008a46:	2200      	movs	r2, #0
 8008a48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008a4c:	f7ff ffe6 	bl	8008a1c <xflow>
 8008a50:	ec41 0b10 	vmov	d0, r0, r1
 8008a54:	bd08      	pop	{r3, pc}

08008a56 <__math_oflow>:
 8008a56:	b508      	push	{r3, lr}
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008a5e:	f7ff ffdd 	bl	8008a1c <xflow>
 8008a62:	ec41 0b10 	vmov	d0, r0, r1
 8008a66:	bd08      	pop	{r3, pc}

08008a68 <fabs>:
 8008a68:	ec51 0b10 	vmov	r0, r1, d0
 8008a6c:	ee10 2a10 	vmov	r2, s0
 8008a70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008a74:	ec43 2b10 	vmov	d0, r2, r3
 8008a78:	4770      	bx	lr

08008a7a <finite>:
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	ed8d 0b00 	vstr	d0, [sp]
 8008a80:	9801      	ldr	r0, [sp, #4]
 8008a82:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008a86:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008a8a:	0fc0      	lsrs	r0, r0, #31
 8008a8c:	b002      	add	sp, #8
 8008a8e:	4770      	bx	lr

08008a90 <scalbn>:
 8008a90:	b570      	push	{r4, r5, r6, lr}
 8008a92:	ec55 4b10 	vmov	r4, r5, d0
 8008a96:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008a9a:	4606      	mov	r6, r0
 8008a9c:	462b      	mov	r3, r5
 8008a9e:	b99a      	cbnz	r2, 8008ac8 <scalbn+0x38>
 8008aa0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008aa4:	4323      	orrs	r3, r4
 8008aa6:	d036      	beq.n	8008b16 <scalbn+0x86>
 8008aa8:	4b39      	ldr	r3, [pc, #228]	; (8008b90 <scalbn+0x100>)
 8008aaa:	4629      	mov	r1, r5
 8008aac:	ee10 0a10 	vmov	r0, s0
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f7f7 fdb9 	bl	8000628 <__aeabi_dmul>
 8008ab6:	4b37      	ldr	r3, [pc, #220]	; (8008b94 <scalbn+0x104>)
 8008ab8:	429e      	cmp	r6, r3
 8008aba:	4604      	mov	r4, r0
 8008abc:	460d      	mov	r5, r1
 8008abe:	da10      	bge.n	8008ae2 <scalbn+0x52>
 8008ac0:	a32b      	add	r3, pc, #172	; (adr r3, 8008b70 <scalbn+0xe0>)
 8008ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac6:	e03a      	b.n	8008b3e <scalbn+0xae>
 8008ac8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008acc:	428a      	cmp	r2, r1
 8008ace:	d10c      	bne.n	8008aea <scalbn+0x5a>
 8008ad0:	ee10 2a10 	vmov	r2, s0
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	4629      	mov	r1, r5
 8008ad8:	f7f7 fbf0 	bl	80002bc <__adddf3>
 8008adc:	4604      	mov	r4, r0
 8008ade:	460d      	mov	r5, r1
 8008ae0:	e019      	b.n	8008b16 <scalbn+0x86>
 8008ae2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	3a36      	subs	r2, #54	; 0x36
 8008aea:	4432      	add	r2, r6
 8008aec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008af0:	428a      	cmp	r2, r1
 8008af2:	dd08      	ble.n	8008b06 <scalbn+0x76>
 8008af4:	2d00      	cmp	r5, #0
 8008af6:	a120      	add	r1, pc, #128	; (adr r1, 8008b78 <scalbn+0xe8>)
 8008af8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008afc:	da1c      	bge.n	8008b38 <scalbn+0xa8>
 8008afe:	a120      	add	r1, pc, #128	; (adr r1, 8008b80 <scalbn+0xf0>)
 8008b00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b04:	e018      	b.n	8008b38 <scalbn+0xa8>
 8008b06:	2a00      	cmp	r2, #0
 8008b08:	dd08      	ble.n	8008b1c <scalbn+0x8c>
 8008b0a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008b0e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008b12:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008b16:	ec45 4b10 	vmov	d0, r4, r5
 8008b1a:	bd70      	pop	{r4, r5, r6, pc}
 8008b1c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008b20:	da19      	bge.n	8008b56 <scalbn+0xc6>
 8008b22:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008b26:	429e      	cmp	r6, r3
 8008b28:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008b2c:	dd0a      	ble.n	8008b44 <scalbn+0xb4>
 8008b2e:	a112      	add	r1, pc, #72	; (adr r1, 8008b78 <scalbn+0xe8>)
 8008b30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d1e2      	bne.n	8008afe <scalbn+0x6e>
 8008b38:	a30f      	add	r3, pc, #60	; (adr r3, 8008b78 <scalbn+0xe8>)
 8008b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3e:	f7f7 fd73 	bl	8000628 <__aeabi_dmul>
 8008b42:	e7cb      	b.n	8008adc <scalbn+0x4c>
 8008b44:	a10a      	add	r1, pc, #40	; (adr r1, 8008b70 <scalbn+0xe0>)
 8008b46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d0b8      	beq.n	8008ac0 <scalbn+0x30>
 8008b4e:	a10e      	add	r1, pc, #56	; (adr r1, 8008b88 <scalbn+0xf8>)
 8008b50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b54:	e7b4      	b.n	8008ac0 <scalbn+0x30>
 8008b56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008b5a:	3236      	adds	r2, #54	; 0x36
 8008b5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008b60:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008b64:	4620      	mov	r0, r4
 8008b66:	4b0c      	ldr	r3, [pc, #48]	; (8008b98 <scalbn+0x108>)
 8008b68:	2200      	movs	r2, #0
 8008b6a:	e7e8      	b.n	8008b3e <scalbn+0xae>
 8008b6c:	f3af 8000 	nop.w
 8008b70:	c2f8f359 	.word	0xc2f8f359
 8008b74:	01a56e1f 	.word	0x01a56e1f
 8008b78:	8800759c 	.word	0x8800759c
 8008b7c:	7e37e43c 	.word	0x7e37e43c
 8008b80:	8800759c 	.word	0x8800759c
 8008b84:	fe37e43c 	.word	0xfe37e43c
 8008b88:	c2f8f359 	.word	0xc2f8f359
 8008b8c:	81a56e1f 	.word	0x81a56e1f
 8008b90:	43500000 	.word	0x43500000
 8008b94:	ffff3cb0 	.word	0xffff3cb0
 8008b98:	3c900000 	.word	0x3c900000

08008b9c <_init>:
 8008b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b9e:	bf00      	nop
 8008ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ba2:	bc08      	pop	{r3}
 8008ba4:	469e      	mov	lr, r3
 8008ba6:	4770      	bx	lr

08008ba8 <_fini>:
 8008ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008baa:	bf00      	nop
 8008bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bae:	bc08      	pop	{r3}
 8008bb0:	469e      	mov	lr, r3
 8008bb2:	4770      	bx	lr
