
lab1new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001588  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08001744  08001744  00011744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017ac  080017ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080017ac  080017ac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017ac  080017ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017ac  080017ac  000117ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017b0  080017b0  000117b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080017b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080017c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080017c0  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_line   000058ff  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0000454e  00000000  00000000  0002593b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f88  00000000  00000000  00029e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000598  00000000  00000000  0002ae18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000fa6eb  00000000  00000000  0002b3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000004e0  00000000  00000000  00125aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000011c9  00000000  00000000  00125f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00127149  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013e8  00000000  00000000  0012719c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800172c 	.word	0x0800172c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	0800172c 	.word	0x0800172c

080001fc <kalmanfilter_asm2>:
*
* R0 = pointer to kstate [q r x p k]
* S0 = measurement
*/
kalmanfilter_asm2:
    vldr.f32 s2, [r0] //q
 80001fc:	ed90 1a00 	vldr	s2, [r0]
    vldr.f32 s1, [r0, #12] //p
 8000200:	edd0 0a03 	vldr	s1, [r0, #12]
    vadd.f32 s1, s1, s2 //p+=q,
 8000204:	ee70 0a81 	vadd.f32	s1, s1, s2
    vstr.f32 s1, [r0, #12] //update p
 8000208:	edc0 0a03 	vstr	s1, [r0, #12]

    vldr.f32 s2, [r0, #4] //r
 800020c:	ed90 1a01 	vldr	s2, [r0, #4]
    vadd.f32 s2, s2, s1 //s2=r+p,
 8000210:	ee31 1a20 	vadd.f32	s2, s2, s1
    vcmp.f32 s2, #0.0 // compare s2 to 0.0 to avoid division by 0
 8000214:	eeb5 1a40 	vcmp.f32	s2, #0.0
    vmrs APSR_nzcv, FPSCR
 8000218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    beq division_by_0 // branch to division_by_0 if s2 is equal to 0.0
 800021c:	d02f      	beq.n	800027e <division_by_0>
    vdiv.f32 s1, s1, s2 //p/(r+p),
 800021e:	eec0 0a81 	vdiv.f32	s1, s1, s2
    vstr.f32 s1, [r0, #16]//k=p/(r+p)
 8000222:	edc0 0a04 	vstr	s1, [r0, #16]

    vmov.f32 s2, s0 //s2 = meas
 8000226:	eeb0 1a40 	vmov.f32	s2, s0
    vldr.f32 s1, [r0, #8] //x
 800022a:	edd0 0a02 	vldr	s1, [r0, #8]
    vsub.f32 s2, s2, s1 //s2 = meas - x,
 800022e:	ee31 1a60 	vsub.f32	s2, s2, s1
    vldr.f32 s1, [r0, #16] //k
 8000232:	edd0 0a04 	vldr	s1, [r0, #16]
    vmul.f32 s2, s2, s1 //s2 = k*(meas-x),
 8000236:	ee21 1a20 	vmul.f32	s2, s2, s1
    vldr.f32 s1, [r0, #8] //x
 800023a:	edd0 0a02 	vldr	s1, [r0, #8]
    vadd.f32 s1, s1, s2 //s1=x+k*(meas-x),
 800023e:	ee70 0a81 	vadd.f32	s1, s1, s2
    vstr.f32 s1, [r0, #8]
 8000242:	edc0 0a02 	vstr	s1, [r0, #8]

	vldr.f32 s1, [r0, #16] //k
 8000246:	edd0 0a04 	vldr	s1, [r0, #16]
	vmov.f32 s2, #1
 800024a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	vsub.f32 s1, s2, s1
 800024e:	ee71 0a60 	vsub.f32	s1, s2, s1
	vldr.f32 s2, [r0, #12]
 8000252:	ed90 1a03 	vldr	s2, [r0, #12]
	vmul.f32 s2, s2, s1
 8000256:	ee21 1a20 	vmul.f32	s2, s2, s1
	mrs r3,APSR   // save MCU flags
 800025a:	f3ef 8300 	mrs	r3, CPSR
	// only once at the end, underflow, divide by 0 cases
	vmrs APSR_nzcv, FPSCR //move the value of FPSCR to the APSR register
 800025e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bvs overflow //branch to overflow if the overflow bit in APSR is set
 8000262:	d606      	bvs.n	8000272 <overflow>
    // Check for underflow
	//vmsr FPSCR, APSR_nzcv //move the value of APSR to the FPSCR register
	//tst r2, #(1<<24) //test the underflow bit
	//bne underflow //branch to underflow if the underflow bit is set

	vstr.f32 s2, [r0, #12]
 8000264:	ed80 1a03 	vstr	s2, [r0, #12]
	msr APSR_nzcvq, r3  // restore MCU flags
 8000268:	f383 8800 	msr	CPSR_f, r3
	mov r0, #0
 800026c:	f04f 0000 	mov.w	r0, #0
	bx lr
 8000270:	4770      	bx	lr

08000272 <overflow>:
overflow:
	mov r0, #-1
 8000272:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	bx lr
 8000276:	4770      	bx	lr

08000278 <underflow>:
underflow:
	mov r0, #-2 // return -2 to indicate underflow error
 8000278:	f06f 0001 	mvn.w	r0, #1
	bx lr
 800027c:	4770      	bx	lr

0800027e <division_by_0>:
division_by_0:
	// handle division by 0 here
	mov r0, #-3
 800027e:	f06f 0002 	mvn.w	r0, #2
	bx lr
 8000282:	4770      	bx	lr

08000284 <kf_asm>:
 */
#include "utility.h"

extern int kalmanfilter_asm2(kstate* ks, float meas);

int kf_asm(float* InputArray, float* OutputArray, kstate* ks, uint32_t length){
 8000284:	b580      	push	{r7, lr}
 8000286:	b088      	sub	sp, #32
 8000288:	af00      	add	r7, sp, #0
 800028a:	60f8      	str	r0, [r7, #12]
 800028c:	60b9      	str	r1, [r7, #8]
 800028e:	607a      	str	r2, [r7, #4]
 8000290:	603b      	str	r3, [r7, #0]
	for(uint32_t i=0; i<length; i++){
 8000292:	2300      	movs	r3, #0
 8000294:	61fb      	str	r3, [r7, #28]
 8000296:	e01c      	b.n	80002d2 <kf_asm+0x4e>
		float measurement = InputArray[i];
 8000298:	69fb      	ldr	r3, [r7, #28]
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	68fa      	ldr	r2, [r7, #12]
 800029e:	4413      	add	r3, r2
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	61bb      	str	r3, [r7, #24]
		int error = kalmanfilter_asm2(&ks, measurement); //error code returned by the assembly function
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	ed97 0a06 	vldr	s0, [r7, #24]
 80002aa:	4618      	mov	r0, r3
 80002ac:	f7ff ffa6 	bl	80001fc <kalmanfilter_asm2>
 80002b0:	6178      	str	r0, [r7, #20]
		OutputArray[i] = ks->x;
 80002b2:	687a      	ldr	r2, [r7, #4]
 80002b4:	69fb      	ldr	r3, [r7, #28]
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	68b9      	ldr	r1, [r7, #8]
 80002ba:	440b      	add	r3, r1
 80002bc:	6892      	ldr	r2, [r2, #8]
 80002be:	601a      	str	r2, [r3, #0]
		if(error<0){ //overflow:-1, underflow:-2, div by 0: -3
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	da02      	bge.n	80002cc <kf_asm+0x48>
			return -1;
 80002c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80002ca:	e007      	b.n	80002dc <kf_asm+0x58>
	for(uint32_t i=0; i<length; i++){
 80002cc:	69fb      	ldr	r3, [r7, #28]
 80002ce:	3301      	adds	r3, #1
 80002d0:	61fb      	str	r3, [r7, #28]
 80002d2:	69fa      	ldr	r2, [r7, #28]
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d3de      	bcc.n	8000298 <kf_asm+0x14>
		}
	}
	return 0;
 80002da:	2300      	movs	r3, #0
}
 80002dc:	4618      	mov	r0, r3
 80002de:	3720      	adds	r7, #32
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e4:	b5b0      	push	{r4, r5, r7, lr}
 80002e6:	b092      	sub	sp, #72	; 0x48
 80002e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ea:	f000 f934 	bl	8000556 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ee:	f000 f82d 	bl	800034c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f2:	f000 f87d 	bl	80003f0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  kstate kalman_state = { .k =0.0, .p=0.1, .q=0.1, .r=0.1, .x =5.0};
 80002f6:	4b11      	ldr	r3, [pc, #68]	; (800033c <main+0x58>)
 80002f8:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80002fc:	461d      	mov	r5, r3
 80002fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000302:	682b      	ldr	r3, [r5, #0]
 8000304:	6023      	str	r3, [r4, #0]
  float InputArray[5] = {0,1,2,3,4};
 8000306:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <main+0x5c>)
 8000308:	f107 0418 	add.w	r4, r7, #24
 800030c:	461d      	mov	r5, r3
 800030e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000312:	682b      	ldr	r3, [r5, #0]
 8000314:	6023      	str	r3, [r4, #0]
  float OutputArray[5];
  uint32_t length = 5;
 8000316:	2305      	movs	r3, #5
 8000318:	647b      	str	r3, [r7, #68]	; 0x44
  float meas = 3.57;
 800031a:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <main+0x60>)
 800031c:	643b      	str	r3, [r7, #64]	; 0x40
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ITM_Port32(31) =1;
 800031e:	4b0a      	ldr	r3, [pc, #40]	; (8000348 <main+0x64>)
 8000320:	2201      	movs	r2, #1
 8000322:	601a      	str	r2, [r3, #0]
	  //assembly
//	  kalmanfilter_asm2(&kalman_state, meas);
	  kf_asm(&InputArray, &OutputArray, &kalman_state, length);
 8000324:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000328:	1d39      	adds	r1, r7, #4
 800032a:	f107 0018 	add.w	r0, r7, #24
 800032e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000330:	f7ff ffa8 	bl	8000284 <kf_asm>
//	  ITM_Port32(31) =2;
//	  //c
//	  kalmanfilter(&InputArray, &OutputArray, &kalman_state, length);
	  ITM_Port32(31) = 3;
 8000334:	4b04      	ldr	r3, [pc, #16]	; (8000348 <main+0x64>)
 8000336:	2203      	movs	r2, #3
 8000338:	601a      	str	r2, [r3, #0]
	  ITM_Port32(31) =1;
 800033a:	e7f0      	b.n	800031e <main+0x3a>
 800033c:	08001744 	.word	0x08001744
 8000340:	08001758 	.word	0x08001758
 8000344:	40647ae1 	.word	0x40647ae1
 8000348:	e000007c 	.word	0xe000007c

0800034c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b096      	sub	sp, #88	; 0x58
 8000350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000352:	f107 0314 	add.w	r3, r7, #20
 8000356:	2244      	movs	r2, #68	; 0x44
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f001 f9de 	bl	800171c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000360:	463b      	mov	r3, r7
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]
 800036c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800036e:	2000      	movs	r0, #0
 8000370:	f000 fa6c 	bl	800084c <HAL_PWREx_ControlVoltageScaling>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800037a:	f000 f85d 	bl	8000438 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800037e:	2310      	movs	r3, #16
 8000380:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000382:	2301      	movs	r3, #1
 8000384:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000386:	2300      	movs	r3, #0
 8000388:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800038a:	2360      	movs	r3, #96	; 0x60
 800038c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800038e:	2302      	movs	r3, #2
 8000390:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000392:	2301      	movs	r3, #1
 8000394:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000396:	2301      	movs	r3, #1
 8000398:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800039a:	233c      	movs	r3, #60	; 0x3c
 800039c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800039e:	2302      	movs	r3, #2
 80003a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003a2:	2302      	movs	r3, #2
 80003a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003a6:	2302      	movs	r3, #2
 80003a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003aa:	f107 0314 	add.w	r3, r7, #20
 80003ae:	4618      	mov	r0, r3
 80003b0:	f000 faf0 	bl	8000994 <HAL_RCC_OscConfig>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <SystemClock_Config+0x72>
  {
    Error_Handler();
 80003ba:	f000 f83d 	bl	8000438 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003be:	230f      	movs	r3, #15
 80003c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c2:	2303      	movs	r3, #3
 80003c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c6:	2300      	movs	r3, #0
 80003c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80003d2:	463b      	mov	r3, r7
 80003d4:	2105      	movs	r1, #5
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 fef6 	bl	80011c8 <HAL_RCC_ClockConfig>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003e2:	f000 f829 	bl	8000438 <Error_Handler>
  }
}
 80003e6:	bf00      	nop
 80003e8:	3758      	adds	r7, #88	; 0x58
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
	...

080003f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f6:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <MX_GPIO_Init+0x44>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fa:	4a0e      	ldr	r2, [pc, #56]	; (8000434 <MX_GPIO_Init+0x44>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000402:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <MX_GPIO_Init+0x44>)
 8000404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800040e:	4b09      	ldr	r3, [pc, #36]	; (8000434 <MX_GPIO_Init+0x44>)
 8000410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000412:	4a08      	ldr	r2, [pc, #32]	; (8000434 <MX_GPIO_Init+0x44>)
 8000414:	f043 0302 	orr.w	r3, r3, #2
 8000418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800041a:	4b06      	ldr	r3, [pc, #24]	; (8000434 <MX_GPIO_Init+0x44>)
 800041c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041e:	f003 0302 	and.w	r3, r3, #2
 8000422:	603b      	str	r3, [r7, #0]
 8000424:	683b      	ldr	r3, [r7, #0]

}
 8000426:	bf00      	nop
 8000428:	370c      	adds	r7, #12
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	40021000 	.word	0x40021000

08000438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800043c:	b672      	cpsid	i
}
 800043e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000440:	e7fe      	b.n	8000440 <Error_Handler+0x8>
	...

08000444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800044a:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <HAL_MspInit+0x44>)
 800044c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800044e:	4a0e      	ldr	r2, [pc, #56]	; (8000488 <HAL_MspInit+0x44>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	6613      	str	r3, [r2, #96]	; 0x60
 8000456:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <HAL_MspInit+0x44>)
 8000458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800045a:	f003 0301 	and.w	r3, r3, #1
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000462:	4b09      	ldr	r3, [pc, #36]	; (8000488 <HAL_MspInit+0x44>)
 8000464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000466:	4a08      	ldr	r2, [pc, #32]	; (8000488 <HAL_MspInit+0x44>)
 8000468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800046c:	6593      	str	r3, [r2, #88]	; 0x58
 800046e:	4b06      	ldr	r3, [pc, #24]	; (8000488 <HAL_MspInit+0x44>)
 8000470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000476:	603b      	str	r3, [r7, #0]
 8000478:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	40021000 	.word	0x40021000

0800048c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000490:	e7fe      	b.n	8000490 <NMI_Handler+0x4>

08000492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000492:	b480      	push	{r7}
 8000494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000496:	e7fe      	b.n	8000496 <HardFault_Handler+0x4>

08000498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800049c:	e7fe      	b.n	800049c <MemManage_Handler+0x4>

0800049e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004a2:	e7fe      	b.n	80004a2 <BusFault_Handler+0x4>

080004a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <UsageFault_Handler+0x4>

080004aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ae:	bf00      	nop
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr

080004c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr

080004d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004d8:	f000 f892 	bl	8000600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}

080004e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <SystemInit+0x20>)
 80004e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004ea:	4a05      	ldr	r2, [pc, #20]	; (8000500 <SystemInit+0x20>)
 80004ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	e000ed00 	.word	0xe000ed00

08000504 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000504:	f8df d034 	ldr.w	sp, [pc, #52]	; 800053c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000508:	f7ff ffea 	bl	80004e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800050c:	480c      	ldr	r0, [pc, #48]	; (8000540 <LoopForever+0x6>)
  ldr r1, =_edata
 800050e:	490d      	ldr	r1, [pc, #52]	; (8000544 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000510:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <LoopForever+0xe>)
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000514:	e002      	b.n	800051c <LoopCopyDataInit>

08000516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800051a:	3304      	adds	r3, #4

0800051c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800051c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800051e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000520:	d3f9      	bcc.n	8000516 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000522:	4a0a      	ldr	r2, [pc, #40]	; (800054c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000524:	4c0a      	ldr	r4, [pc, #40]	; (8000550 <LoopForever+0x16>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000528:	e001      	b.n	800052e <LoopFillZerobss>

0800052a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800052a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800052c:	3204      	adds	r2, #4

0800052e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800052e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000530:	d3fb      	bcc.n	800052a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000532:	f001 f8cf 	bl	80016d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000536:	f7ff fed5 	bl	80002e4 <main>

0800053a <LoopForever>:

LoopForever:
    b LoopForever
 800053a:	e7fe      	b.n	800053a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800053c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000544:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000548:	080017b4 	.word	0x080017b4
  ldr r2, =_sbss
 800054c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000550:	2000002c 	.word	0x2000002c

08000554 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000554:	e7fe      	b.n	8000554 <ADC1_IRQHandler>

08000556 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000556:	b580      	push	{r7, lr}
 8000558:	b082      	sub	sp, #8
 800055a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800055c:	2300      	movs	r3, #0
 800055e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000560:	2003      	movs	r0, #3
 8000562:	f000 f91f 	bl	80007a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000566:	2000      	movs	r0, #0
 8000568:	f000 f80e 	bl	8000588 <HAL_InitTick>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d002      	beq.n	8000578 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	71fb      	strb	r3, [r7, #7]
 8000576:	e001      	b.n	800057c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000578:	f7ff ff64 	bl	8000444 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800057c:	79fb      	ldrb	r3, [r7, #7]
}
 800057e:	4618      	mov	r0, r3
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
	...

08000588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000590:	2300      	movs	r3, #0
 8000592:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000594:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <HAL_InitTick+0x6c>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d023      	beq.n	80005e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800059c:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <HAL_InitTick+0x70>)
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <HAL_InitTick+0x6c>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4619      	mov	r1, r3
 80005a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 f91d 	bl	80007f2 <HAL_SYSTICK_Config>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d10f      	bne.n	80005de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2b0f      	cmp	r3, #15
 80005c2:	d809      	bhi.n	80005d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c4:	2200      	movs	r2, #0
 80005c6:	6879      	ldr	r1, [r7, #4]
 80005c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005cc:	f000 f8f5 	bl	80007ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005d0:	4a0a      	ldr	r2, [pc, #40]	; (80005fc <HAL_InitTick+0x74>)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	6013      	str	r3, [r2, #0]
 80005d6:	e007      	b.n	80005e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80005d8:	2301      	movs	r3, #1
 80005da:	73fb      	strb	r3, [r7, #15]
 80005dc:	e004      	b.n	80005e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005de:	2301      	movs	r3, #1
 80005e0:	73fb      	strb	r3, [r7, #15]
 80005e2:	e001      	b.n	80005e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005e4:	2301      	movs	r3, #1
 80005e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000008 	.word	0x20000008
 80005f8:	20000000 	.word	0x20000000
 80005fc:	20000004 	.word	0x20000004

08000600 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <HAL_IncTick+0x20>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	461a      	mov	r2, r3
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <HAL_IncTick+0x24>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4413      	add	r3, r2
 8000610:	4a04      	ldr	r2, [pc, #16]	; (8000624 <HAL_IncTick+0x24>)
 8000612:	6013      	str	r3, [r2, #0]
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	20000008 	.word	0x20000008
 8000624:	20000028 	.word	0x20000028

08000628 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  return uwTick;
 800062c:	4b03      	ldr	r3, [pc, #12]	; (800063c <HAL_GetTick+0x14>)
 800062e:	681b      	ldr	r3, [r3, #0]
}
 8000630:	4618      	mov	r0, r3
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000028 	.word	0x20000028

08000640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	f003 0307 	and.w	r3, r3, #7
 800064e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <__NVIC_SetPriorityGrouping+0x44>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000656:	68ba      	ldr	r2, [r7, #8]
 8000658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800065c:	4013      	ands	r3, r2
 800065e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800066c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000672:	4a04      	ldr	r2, [pc, #16]	; (8000684 <__NVIC_SetPriorityGrouping+0x44>)
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	60d3      	str	r3, [r2, #12]
}
 8000678:	bf00      	nop
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800068c:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <__NVIC_GetPriorityGrouping+0x18>)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	0a1b      	lsrs	r3, r3, #8
 8000692:	f003 0307 	and.w	r3, r3, #7
}
 8000696:	4618      	mov	r0, r3
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	6039      	str	r1, [r7, #0]
 80006ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	db0a      	blt.n	80006ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	490c      	ldr	r1, [pc, #48]	; (80006f0 <__NVIC_SetPriority+0x4c>)
 80006be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c2:	0112      	lsls	r2, r2, #4
 80006c4:	b2d2      	uxtb	r2, r2
 80006c6:	440b      	add	r3, r1
 80006c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006cc:	e00a      	b.n	80006e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4908      	ldr	r1, [pc, #32]	; (80006f4 <__NVIC_SetPriority+0x50>)
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	f003 030f 	and.w	r3, r3, #15
 80006da:	3b04      	subs	r3, #4
 80006dc:	0112      	lsls	r2, r2, #4
 80006de:	b2d2      	uxtb	r2, r2
 80006e0:	440b      	add	r3, r1
 80006e2:	761a      	strb	r2, [r3, #24]
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	e000e100 	.word	0xe000e100
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b089      	sub	sp, #36	; 0x24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f003 0307 	and.w	r3, r3, #7
 800070a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	f1c3 0307 	rsb	r3, r3, #7
 8000712:	2b04      	cmp	r3, #4
 8000714:	bf28      	it	cs
 8000716:	2304      	movcs	r3, #4
 8000718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	3304      	adds	r3, #4
 800071e:	2b06      	cmp	r3, #6
 8000720:	d902      	bls.n	8000728 <NVIC_EncodePriority+0x30>
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	3b03      	subs	r3, #3
 8000726:	e000      	b.n	800072a <NVIC_EncodePriority+0x32>
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800072c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000730:	69bb      	ldr	r3, [r7, #24]
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	43da      	mvns	r2, r3
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	401a      	ands	r2, r3
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000740:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	fa01 f303 	lsl.w	r3, r1, r3
 800074a:	43d9      	mvns	r1, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000750:	4313      	orrs	r3, r2
         );
}
 8000752:	4618      	mov	r0, r3
 8000754:	3724      	adds	r7, #36	; 0x24
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
	...

08000760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3b01      	subs	r3, #1
 800076c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000770:	d301      	bcc.n	8000776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000772:	2301      	movs	r3, #1
 8000774:	e00f      	b.n	8000796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000776:	4a0a      	ldr	r2, [pc, #40]	; (80007a0 <SysTick_Config+0x40>)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3b01      	subs	r3, #1
 800077c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800077e:	210f      	movs	r1, #15
 8000780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000784:	f7ff ff8e 	bl	80006a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <SysTick_Config+0x40>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800078e:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <SysTick_Config+0x40>)
 8000790:	2207      	movs	r2, #7
 8000792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000794:	2300      	movs	r3, #0
}
 8000796:	4618      	mov	r0, r3
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	e000e010 	.word	0xe000e010

080007a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f7ff ff47 	bl	8000640 <__NVIC_SetPriorityGrouping>
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b086      	sub	sp, #24
 80007be:	af00      	add	r7, sp, #0
 80007c0:	4603      	mov	r3, r0
 80007c2:	60b9      	str	r1, [r7, #8]
 80007c4:	607a      	str	r2, [r7, #4]
 80007c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007cc:	f7ff ff5c 	bl	8000688 <__NVIC_GetPriorityGrouping>
 80007d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	68b9      	ldr	r1, [r7, #8]
 80007d6:	6978      	ldr	r0, [r7, #20]
 80007d8:	f7ff ff8e 	bl	80006f8 <NVIC_EncodePriority>
 80007dc:	4602      	mov	r2, r0
 80007de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007e2:	4611      	mov	r1, r2
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ff5d 	bl	80006a4 <__NVIC_SetPriority>
}
 80007ea:	bf00      	nop
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b082      	sub	sp, #8
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ffb0 	bl	8000760 <SysTick_Config>
 8000800:	4603      	mov	r3, r0
}
 8000802:	4618      	mov	r0, r3
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000810:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800081c:	d102      	bne.n	8000824 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800081e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000822:	e00b      	b.n	800083c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800082a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800082e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000832:	d102      	bne.n	800083a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000834:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000838:	e000      	b.n	800083c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800083a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800083c:	4618      	mov	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	40007000 	.word	0x40007000

0800084c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d141      	bne.n	80008de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800085a:	4b4b      	ldr	r3, [pc, #300]	; (8000988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000866:	d131      	bne.n	80008cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000868:	4b47      	ldr	r3, [pc, #284]	; (8000988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800086a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800086e:	4a46      	ldr	r2, [pc, #280]	; (8000988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000874:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000878:	4b43      	ldr	r3, [pc, #268]	; (8000988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000880:	4a41      	ldr	r2, [pc, #260]	; (8000988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000886:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000888:	4b40      	ldr	r3, [pc, #256]	; (800098c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2232      	movs	r2, #50	; 0x32
 800088e:	fb02 f303 	mul.w	r3, r2, r3
 8000892:	4a3f      	ldr	r2, [pc, #252]	; (8000990 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000894:	fba2 2303 	umull	r2, r3, r2, r3
 8000898:	0c9b      	lsrs	r3, r3, #18
 800089a:	3301      	adds	r3, #1
 800089c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800089e:	e002      	b.n	80008a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80008a6:	4b38      	ldr	r3, [pc, #224]	; (8000988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008b2:	d102      	bne.n	80008ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1f2      	bne.n	80008a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80008ba:	4b33      	ldr	r3, [pc, #204]	; (8000988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008c6:	d158      	bne.n	800097a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80008c8:	2303      	movs	r3, #3
 80008ca:	e057      	b.n	800097c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80008cc:	4b2e      	ldr	r3, [pc, #184]	; (8000988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008d2:	4a2d      	ldr	r2, [pc, #180]	; (8000988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80008dc:	e04d      	b.n	800097a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008e4:	d141      	bne.n	800096a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80008e6:	4b28      	ldr	r3, [pc, #160]	; (8000988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80008ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008f2:	d131      	bne.n	8000958 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80008f4:	4b24      	ldr	r3, [pc, #144]	; (8000988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008fa:	4a23      	ldr	r2, [pc, #140]	; (8000988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000900:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000904:	4b20      	ldr	r3, [pc, #128]	; (8000988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800090c:	4a1e      	ldr	r2, [pc, #120]	; (8000988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800090e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000912:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000914:	4b1d      	ldr	r3, [pc, #116]	; (800098c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2232      	movs	r2, #50	; 0x32
 800091a:	fb02 f303 	mul.w	r3, r2, r3
 800091e:	4a1c      	ldr	r2, [pc, #112]	; (8000990 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000920:	fba2 2303 	umull	r2, r3, r2, r3
 8000924:	0c9b      	lsrs	r3, r3, #18
 8000926:	3301      	adds	r3, #1
 8000928:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800092a:	e002      	b.n	8000932 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	3b01      	subs	r3, #1
 8000930:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800093a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800093e:	d102      	bne.n	8000946 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d1f2      	bne.n	800092c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800094e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000952:	d112      	bne.n	800097a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000954:	2303      	movs	r3, #3
 8000956:	e011      	b.n	800097c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000958:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800095a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800095e:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000964:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000968:	e007      	b.n	800097a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800096a:	4b07      	ldr	r3, [pc, #28]	; (8000988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000972:	4a05      	ldr	r2, [pc, #20]	; (8000988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000974:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000978:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800097a:	2300      	movs	r3, #0
}
 800097c:	4618      	mov	r0, r3
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	40007000 	.word	0x40007000
 800098c:	20000000 	.word	0x20000000
 8000990:	431bde83 	.word	0x431bde83

08000994 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b088      	sub	sp, #32
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d102      	bne.n	80009a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	f000 bc08 	b.w	80011b8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80009a8:	4b96      	ldr	r3, [pc, #600]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	f003 030c 	and.w	r3, r3, #12
 80009b0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80009b2:	4b94      	ldr	r3, [pc, #592]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	f003 0303 	and.w	r3, r3, #3
 80009ba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f003 0310 	and.w	r3, r3, #16
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	f000 80e4 	beq.w	8000b92 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80009ca:	69bb      	ldr	r3, [r7, #24]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d007      	beq.n	80009e0 <HAL_RCC_OscConfig+0x4c>
 80009d0:	69bb      	ldr	r3, [r7, #24]
 80009d2:	2b0c      	cmp	r3, #12
 80009d4:	f040 808b 	bne.w	8000aee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	f040 8087 	bne.w	8000aee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80009e0:	4b88      	ldr	r3, [pc, #544]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f003 0302 	and.w	r3, r3, #2
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d005      	beq.n	80009f8 <HAL_RCC_OscConfig+0x64>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d101      	bne.n	80009f8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80009f4:	2301      	movs	r3, #1
 80009f6:	e3df      	b.n	80011b8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6a1a      	ldr	r2, [r3, #32]
 80009fc:	4b81      	ldr	r3, [pc, #516]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f003 0308 	and.w	r3, r3, #8
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d004      	beq.n	8000a12 <HAL_RCC_OscConfig+0x7e>
 8000a08:	4b7e      	ldr	r3, [pc, #504]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a10:	e005      	b.n	8000a1e <HAL_RCC_OscConfig+0x8a>
 8000a12:	4b7c      	ldr	r3, [pc, #496]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a18:	091b      	lsrs	r3, r3, #4
 8000a1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d223      	bcs.n	8000a6a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6a1b      	ldr	r3, [r3, #32]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 fd94 	bl	8001554 <RCC_SetFlashLatencyFromMSIRange>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
 8000a34:	e3c0      	b.n	80011b8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a36:	4b73      	ldr	r3, [pc, #460]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a72      	ldr	r2, [pc, #456]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000a3c:	f043 0308 	orr.w	r3, r3, #8
 8000a40:	6013      	str	r3, [r2, #0]
 8000a42:	4b70      	ldr	r3, [pc, #448]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6a1b      	ldr	r3, [r3, #32]
 8000a4e:	496d      	ldr	r1, [pc, #436]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000a50:	4313      	orrs	r3, r2
 8000a52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a54:	4b6b      	ldr	r3, [pc, #428]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	69db      	ldr	r3, [r3, #28]
 8000a60:	021b      	lsls	r3, r3, #8
 8000a62:	4968      	ldr	r1, [pc, #416]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000a64:	4313      	orrs	r3, r2
 8000a66:	604b      	str	r3, [r1, #4]
 8000a68:	e025      	b.n	8000ab6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a6a:	4b66      	ldr	r3, [pc, #408]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a65      	ldr	r2, [pc, #404]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000a70:	f043 0308 	orr.w	r3, r3, #8
 8000a74:	6013      	str	r3, [r2, #0]
 8000a76:	4b63      	ldr	r3, [pc, #396]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6a1b      	ldr	r3, [r3, #32]
 8000a82:	4960      	ldr	r1, [pc, #384]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000a84:	4313      	orrs	r3, r2
 8000a86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a88:	4b5e      	ldr	r3, [pc, #376]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	69db      	ldr	r3, [r3, #28]
 8000a94:	021b      	lsls	r3, r3, #8
 8000a96:	495b      	ldr	r1, [pc, #364]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d109      	bne.n	8000ab6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6a1b      	ldr	r3, [r3, #32]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 fd54 	bl	8001554 <RCC_SetFlashLatencyFromMSIRange>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e380      	b.n	80011b8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000ab6:	f000 fcc1 	bl	800143c <HAL_RCC_GetSysClockFreq>
 8000aba:	4602      	mov	r2, r0
 8000abc:	4b51      	ldr	r3, [pc, #324]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	091b      	lsrs	r3, r3, #4
 8000ac2:	f003 030f 	and.w	r3, r3, #15
 8000ac6:	4950      	ldr	r1, [pc, #320]	; (8000c08 <HAL_RCC_OscConfig+0x274>)
 8000ac8:	5ccb      	ldrb	r3, [r1, r3]
 8000aca:	f003 031f 	and.w	r3, r3, #31
 8000ace:	fa22 f303 	lsr.w	r3, r2, r3
 8000ad2:	4a4e      	ldr	r2, [pc, #312]	; (8000c0c <HAL_RCC_OscConfig+0x278>)
 8000ad4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000ad6:	4b4e      	ldr	r3, [pc, #312]	; (8000c10 <HAL_RCC_OscConfig+0x27c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fd54 	bl	8000588 <HAL_InitTick>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d052      	beq.n	8000b90 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
 8000aec:	e364      	b.n	80011b8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d032      	beq.n	8000b5c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000af6:	4b43      	ldr	r3, [pc, #268]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a42      	ldr	r2, [pc, #264]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000b02:	f7ff fd91 	bl	8000628 <HAL_GetTick>
 8000b06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000b08:	e008      	b.n	8000b1c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b0a:	f7ff fd8d 	bl	8000628 <HAL_GetTick>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	1ad3      	subs	r3, r2, r3
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d901      	bls.n	8000b1c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	e34d      	b.n	80011b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000b1c:	4b39      	ldr	r3, [pc, #228]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f003 0302 	and.w	r3, r3, #2
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d0f0      	beq.n	8000b0a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b28:	4b36      	ldr	r3, [pc, #216]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a35      	ldr	r2, [pc, #212]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000b2e:	f043 0308 	orr.w	r3, r3, #8
 8000b32:	6013      	str	r3, [r2, #0]
 8000b34:	4b33      	ldr	r3, [pc, #204]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6a1b      	ldr	r3, [r3, #32]
 8000b40:	4930      	ldr	r1, [pc, #192]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000b42:	4313      	orrs	r3, r2
 8000b44:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b46:	4b2f      	ldr	r3, [pc, #188]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	69db      	ldr	r3, [r3, #28]
 8000b52:	021b      	lsls	r3, r3, #8
 8000b54:	492b      	ldr	r1, [pc, #172]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000b56:	4313      	orrs	r3, r2
 8000b58:	604b      	str	r3, [r1, #4]
 8000b5a:	e01a      	b.n	8000b92 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000b5c:	4b29      	ldr	r3, [pc, #164]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a28      	ldr	r2, [pc, #160]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000b62:	f023 0301 	bic.w	r3, r3, #1
 8000b66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000b68:	f7ff fd5e 	bl	8000628 <HAL_GetTick>
 8000b6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000b6e:	e008      	b.n	8000b82 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b70:	f7ff fd5a 	bl	8000628 <HAL_GetTick>
 8000b74:	4602      	mov	r2, r0
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d901      	bls.n	8000b82 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	e31a      	b.n	80011b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000b82:	4b20      	ldr	r3, [pc, #128]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d1f0      	bne.n	8000b70 <HAL_RCC_OscConfig+0x1dc>
 8000b8e:	e000      	b.n	8000b92 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000b90:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d073      	beq.n	8000c86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	2b08      	cmp	r3, #8
 8000ba2:	d005      	beq.n	8000bb0 <HAL_RCC_OscConfig+0x21c>
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	2b0c      	cmp	r3, #12
 8000ba8:	d10e      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	2b03      	cmp	r3, #3
 8000bae:	d10b      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bb0:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d063      	beq.n	8000c84 <HAL_RCC_OscConfig+0x2f0>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d15f      	bne.n	8000c84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e2f7      	b.n	80011b8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bd0:	d106      	bne.n	8000be0 <HAL_RCC_OscConfig+0x24c>
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bdc:	6013      	str	r3, [r2, #0]
 8000bde:	e025      	b.n	8000c2c <HAL_RCC_OscConfig+0x298>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000be8:	d114      	bne.n	8000c14 <HAL_RCC_OscConfig+0x280>
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bf4:	6013      	str	r3, [r2, #0]
 8000bf6:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a02      	ldr	r2, [pc, #8]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c00:	6013      	str	r3, [r2, #0]
 8000c02:	e013      	b.n	8000c2c <HAL_RCC_OscConfig+0x298>
 8000c04:	40021000 	.word	0x40021000
 8000c08:	0800176c 	.word	0x0800176c
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	20000004 	.word	0x20000004
 8000c14:	4ba0      	ldr	r3, [pc, #640]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a9f      	ldr	r2, [pc, #636]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c1e:	6013      	str	r3, [r2, #0]
 8000c20:	4b9d      	ldr	r3, [pc, #628]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a9c      	ldr	r2, [pc, #624]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d013      	beq.n	8000c5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c34:	f7ff fcf8 	bl	8000628 <HAL_GetTick>
 8000c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c3a:	e008      	b.n	8000c4e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c3c:	f7ff fcf4 	bl	8000628 <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	2b64      	cmp	r3, #100	; 0x64
 8000c48:	d901      	bls.n	8000c4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	e2b4      	b.n	80011b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c4e:	4b92      	ldr	r3, [pc, #584]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d0f0      	beq.n	8000c3c <HAL_RCC_OscConfig+0x2a8>
 8000c5a:	e014      	b.n	8000c86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c5c:	f7ff fce4 	bl	8000628 <HAL_GetTick>
 8000c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c62:	e008      	b.n	8000c76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c64:	f7ff fce0 	bl	8000628 <HAL_GetTick>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	2b64      	cmp	r3, #100	; 0x64
 8000c70:	d901      	bls.n	8000c76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000c72:	2303      	movs	r3, #3
 8000c74:	e2a0      	b.n	80011b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c76:	4b88      	ldr	r3, [pc, #544]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1f0      	bne.n	8000c64 <HAL_RCC_OscConfig+0x2d0>
 8000c82:	e000      	b.n	8000c86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d060      	beq.n	8000d54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	2b04      	cmp	r3, #4
 8000c96:	d005      	beq.n	8000ca4 <HAL_RCC_OscConfig+0x310>
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	2b0c      	cmp	r3, #12
 8000c9c:	d119      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d116      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ca4:	4b7c      	ldr	r3, [pc, #496]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d005      	beq.n	8000cbc <HAL_RCC_OscConfig+0x328>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d101      	bne.n	8000cbc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e27d      	b.n	80011b8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cbc:	4b76      	ldr	r3, [pc, #472]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	061b      	lsls	r3, r3, #24
 8000cca:	4973      	ldr	r1, [pc, #460]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000cd0:	e040      	b.n	8000d54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d023      	beq.n	8000d22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cda:	4b6f      	ldr	r3, [pc, #444]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a6e      	ldr	r2, [pc, #440]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ce6:	f7ff fc9f 	bl	8000628 <HAL_GetTick>
 8000cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000cec:	e008      	b.n	8000d00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cee:	f7ff fc9b 	bl	8000628 <HAL_GetTick>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d901      	bls.n	8000d00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	e25b      	b.n	80011b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d00:	4b65      	ldr	r3, [pc, #404]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d0f0      	beq.n	8000cee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d0c:	4b62      	ldr	r3, [pc, #392]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	691b      	ldr	r3, [r3, #16]
 8000d18:	061b      	lsls	r3, r3, #24
 8000d1a:	495f      	ldr	r1, [pc, #380]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	604b      	str	r3, [r1, #4]
 8000d20:	e018      	b.n	8000d54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d22:	4b5d      	ldr	r3, [pc, #372]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a5c      	ldr	r2, [pc, #368]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d2e:	f7ff fc7b 	bl	8000628 <HAL_GetTick>
 8000d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d34:	e008      	b.n	8000d48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d36:	f7ff fc77 	bl	8000628 <HAL_GetTick>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d901      	bls.n	8000d48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000d44:	2303      	movs	r3, #3
 8000d46:	e237      	b.n	80011b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d48:	4b53      	ldr	r3, [pc, #332]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d1f0      	bne.n	8000d36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f003 0308 	and.w	r3, r3, #8
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d03c      	beq.n	8000dda <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	695b      	ldr	r3, [r3, #20]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d01c      	beq.n	8000da2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d68:	4b4b      	ldr	r3, [pc, #300]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d6e:	4a4a      	ldr	r2, [pc, #296]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d78:	f7ff fc56 	bl	8000628 <HAL_GetTick>
 8000d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000d7e:	e008      	b.n	8000d92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d80:	f7ff fc52 	bl	8000628 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d901      	bls.n	8000d92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e212      	b.n	80011b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000d92:	4b41      	ldr	r3, [pc, #260]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d98:	f003 0302 	and.w	r3, r3, #2
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d0ef      	beq.n	8000d80 <HAL_RCC_OscConfig+0x3ec>
 8000da0:	e01b      	b.n	8000dda <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000da2:	4b3d      	ldr	r3, [pc, #244]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000da8:	4a3b      	ldr	r2, [pc, #236]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000daa:	f023 0301 	bic.w	r3, r3, #1
 8000dae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000db2:	f7ff fc39 	bl	8000628 <HAL_GetTick>
 8000db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000db8:	e008      	b.n	8000dcc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dba:	f7ff fc35 	bl	8000628 <HAL_GetTick>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d901      	bls.n	8000dcc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	e1f5      	b.n	80011b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000dcc:	4b32      	ldr	r3, [pc, #200]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1ef      	bne.n	8000dba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 0304 	and.w	r3, r3, #4
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f000 80a6 	beq.w	8000f34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000de8:	2300      	movs	r3, #0
 8000dea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000dec:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d10d      	bne.n	8000e14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000df8:	4b27      	ldr	r3, [pc, #156]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfc:	4a26      	ldr	r2, [pc, #152]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e02:	6593      	str	r3, [r2, #88]	; 0x58
 8000e04:	4b24      	ldr	r3, [pc, #144]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e10:	2301      	movs	r3, #1
 8000e12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e14:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <HAL_RCC_OscConfig+0x508>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d118      	bne.n	8000e52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000e20:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <HAL_RCC_OscConfig+0x508>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a1d      	ldr	r2, [pc, #116]	; (8000e9c <HAL_RCC_OscConfig+0x508>)
 8000e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e2c:	f7ff fbfc 	bl	8000628 <HAL_GetTick>
 8000e30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e32:	e008      	b.n	8000e46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e34:	f7ff fbf8 	bl	8000628 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d901      	bls.n	8000e46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e1b8      	b.n	80011b8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <HAL_RCC_OscConfig+0x508>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d0f0      	beq.n	8000e34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d108      	bne.n	8000e6c <HAL_RCC_OscConfig+0x4d8>
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e60:	4a0d      	ldr	r2, [pc, #52]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e6a:	e029      	b.n	8000ec0 <HAL_RCC_OscConfig+0x52c>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	2b05      	cmp	r3, #5
 8000e72:	d115      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x50c>
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e7a:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000e7c:	f043 0304 	orr.w	r3, r3, #4
 8000e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e8a:	4a03      	ldr	r2, [pc, #12]	; (8000e98 <HAL_RCC_OscConfig+0x504>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e94:	e014      	b.n	8000ec0 <HAL_RCC_OscConfig+0x52c>
 8000e96:	bf00      	nop
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40007000 	.word	0x40007000
 8000ea0:	4b9d      	ldr	r3, [pc, #628]	; (8001118 <HAL_RCC_OscConfig+0x784>)
 8000ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ea6:	4a9c      	ldr	r2, [pc, #624]	; (8001118 <HAL_RCC_OscConfig+0x784>)
 8000ea8:	f023 0301 	bic.w	r3, r3, #1
 8000eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000eb0:	4b99      	ldr	r3, [pc, #612]	; (8001118 <HAL_RCC_OscConfig+0x784>)
 8000eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000eb6:	4a98      	ldr	r2, [pc, #608]	; (8001118 <HAL_RCC_OscConfig+0x784>)
 8000eb8:	f023 0304 	bic.w	r3, r3, #4
 8000ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d016      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ec8:	f7ff fbae 	bl	8000628 <HAL_GetTick>
 8000ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000ece:	e00a      	b.n	8000ee6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ed0:	f7ff fbaa 	bl	8000628 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d901      	bls.n	8000ee6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e168      	b.n	80011b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000ee6:	4b8c      	ldr	r3, [pc, #560]	; (8001118 <HAL_RCC_OscConfig+0x784>)
 8000ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d0ed      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x53c>
 8000ef4:	e015      	b.n	8000f22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ef6:	f7ff fb97 	bl	8000628 <HAL_GetTick>
 8000efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000efc:	e00a      	b.n	8000f14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000efe:	f7ff fb93 	bl	8000628 <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d901      	bls.n	8000f14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000f10:	2303      	movs	r3, #3
 8000f12:	e151      	b.n	80011b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000f14:	4b80      	ldr	r3, [pc, #512]	; (8001118 <HAL_RCC_OscConfig+0x784>)
 8000f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1ed      	bne.n	8000efe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f22:	7ffb      	ldrb	r3, [r7, #31]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d105      	bne.n	8000f34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f28:	4b7b      	ldr	r3, [pc, #492]	; (8001118 <HAL_RCC_OscConfig+0x784>)
 8000f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2c:	4a7a      	ldr	r2, [pc, #488]	; (8001118 <HAL_RCC_OscConfig+0x784>)
 8000f2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f32:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 0320 	and.w	r3, r3, #32
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d03c      	beq.n	8000fba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d01c      	beq.n	8000f82 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000f48:	4b73      	ldr	r3, [pc, #460]	; (8001118 <HAL_RCC_OscConfig+0x784>)
 8000f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f4e:	4a72      	ldr	r2, [pc, #456]	; (8001118 <HAL_RCC_OscConfig+0x784>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f58:	f7ff fb66 	bl	8000628 <HAL_GetTick>
 8000f5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000f5e:	e008      	b.n	8000f72 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f60:	f7ff fb62 	bl	8000628 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e122      	b.n	80011b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000f72:	4b69      	ldr	r3, [pc, #420]	; (8001118 <HAL_RCC_OscConfig+0x784>)
 8000f74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0ef      	beq.n	8000f60 <HAL_RCC_OscConfig+0x5cc>
 8000f80:	e01b      	b.n	8000fba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000f82:	4b65      	ldr	r3, [pc, #404]	; (8001118 <HAL_RCC_OscConfig+0x784>)
 8000f84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f88:	4a63      	ldr	r2, [pc, #396]	; (8001118 <HAL_RCC_OscConfig+0x784>)
 8000f8a:	f023 0301 	bic.w	r3, r3, #1
 8000f8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f92:	f7ff fb49 	bl	8000628 <HAL_GetTick>
 8000f96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000f98:	e008      	b.n	8000fac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f9a:	f7ff fb45 	bl	8000628 <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d901      	bls.n	8000fac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e105      	b.n	80011b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000fac:	4b5a      	ldr	r3, [pc, #360]	; (8001118 <HAL_RCC_OscConfig+0x784>)
 8000fae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1ef      	bne.n	8000f9a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f000 80f9 	beq.w	80011b6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	f040 80cf 	bne.w	800116c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8000fce:	4b52      	ldr	r3, [pc, #328]	; (8001118 <HAL_RCC_OscConfig+0x784>)
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f003 0203 	and.w	r2, r3, #3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d12c      	bne.n	800103c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fec:	3b01      	subs	r3, #1
 8000fee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d123      	bne.n	800103c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ffe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001000:	429a      	cmp	r2, r3
 8001002:	d11b      	bne.n	800103c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800100e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001010:	429a      	cmp	r2, r3
 8001012:	d113      	bne.n	800103c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800101e:	085b      	lsrs	r3, r3, #1
 8001020:	3b01      	subs	r3, #1
 8001022:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001024:	429a      	cmp	r2, r3
 8001026:	d109      	bne.n	800103c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	085b      	lsrs	r3, r3, #1
 8001034:	3b01      	subs	r3, #1
 8001036:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001038:	429a      	cmp	r2, r3
 800103a:	d071      	beq.n	8001120 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	2b0c      	cmp	r3, #12
 8001040:	d068      	beq.n	8001114 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001042:	4b35      	ldr	r3, [pc, #212]	; (8001118 <HAL_RCC_OscConfig+0x784>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d105      	bne.n	800105a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800104e:	4b32      	ldr	r3, [pc, #200]	; (8001118 <HAL_RCC_OscConfig+0x784>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e0ac      	b.n	80011b8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800105e:	4b2e      	ldr	r3, [pc, #184]	; (8001118 <HAL_RCC_OscConfig+0x784>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a2d      	ldr	r2, [pc, #180]	; (8001118 <HAL_RCC_OscConfig+0x784>)
 8001064:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001068:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800106a:	f7ff fadd 	bl	8000628 <HAL_GetTick>
 800106e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001070:	e008      	b.n	8001084 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001072:	f7ff fad9 	bl	8000628 <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e099      	b.n	80011b8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001084:	4b24      	ldr	r3, [pc, #144]	; (8001118 <HAL_RCC_OscConfig+0x784>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1f0      	bne.n	8001072 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001090:	4b21      	ldr	r3, [pc, #132]	; (8001118 <HAL_RCC_OscConfig+0x784>)
 8001092:	68da      	ldr	r2, [r3, #12]
 8001094:	4b21      	ldr	r3, [pc, #132]	; (800111c <HAL_RCC_OscConfig+0x788>)
 8001096:	4013      	ands	r3, r2
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80010a0:	3a01      	subs	r2, #1
 80010a2:	0112      	lsls	r2, r2, #4
 80010a4:	4311      	orrs	r1, r2
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80010aa:	0212      	lsls	r2, r2, #8
 80010ac:	4311      	orrs	r1, r2
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80010b2:	0852      	lsrs	r2, r2, #1
 80010b4:	3a01      	subs	r2, #1
 80010b6:	0552      	lsls	r2, r2, #21
 80010b8:	4311      	orrs	r1, r2
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80010be:	0852      	lsrs	r2, r2, #1
 80010c0:	3a01      	subs	r2, #1
 80010c2:	0652      	lsls	r2, r2, #25
 80010c4:	4311      	orrs	r1, r2
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80010ca:	06d2      	lsls	r2, r2, #27
 80010cc:	430a      	orrs	r2, r1
 80010ce:	4912      	ldr	r1, [pc, #72]	; (8001118 <HAL_RCC_OscConfig+0x784>)
 80010d0:	4313      	orrs	r3, r2
 80010d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80010d4:	4b10      	ldr	r3, [pc, #64]	; (8001118 <HAL_RCC_OscConfig+0x784>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <HAL_RCC_OscConfig+0x784>)
 80010da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HAL_RCC_OscConfig+0x784>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	4a0c      	ldr	r2, [pc, #48]	; (8001118 <HAL_RCC_OscConfig+0x784>)
 80010e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80010ec:	f7ff fa9c 	bl	8000628 <HAL_GetTick>
 80010f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010f4:	f7ff fa98 	bl	8000628 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e058      	b.n	80011b8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <HAL_RCC_OscConfig+0x784>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0f0      	beq.n	80010f4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001112:	e050      	b.n	80011b6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e04f      	b.n	80011b8 <HAL_RCC_OscConfig+0x824>
 8001118:	40021000 	.word	0x40021000
 800111c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001120:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <HAL_RCC_OscConfig+0x82c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d144      	bne.n	80011b6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800112c:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <HAL_RCC_OscConfig+0x82c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a23      	ldr	r2, [pc, #140]	; (80011c0 <HAL_RCC_OscConfig+0x82c>)
 8001132:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001136:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001138:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <HAL_RCC_OscConfig+0x82c>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	4a20      	ldr	r2, [pc, #128]	; (80011c0 <HAL_RCC_OscConfig+0x82c>)
 800113e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001142:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001144:	f7ff fa70 	bl	8000628 <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800114c:	f7ff fa6c 	bl	8000628 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e02c      	b.n	80011b8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <HAL_RCC_OscConfig+0x82c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0f0      	beq.n	800114c <HAL_RCC_OscConfig+0x7b8>
 800116a:	e024      	b.n	80011b6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	2b0c      	cmp	r3, #12
 8001170:	d01f      	beq.n	80011b2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001172:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <HAL_RCC_OscConfig+0x82c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <HAL_RCC_OscConfig+0x82c>)
 8001178:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800117c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800117e:	f7ff fa53 	bl	8000628 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001186:	f7ff fa4f 	bl	8000628 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e00f      	b.n	80011b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <HAL_RCC_OscConfig+0x82c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1f0      	bne.n	8001186 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_RCC_OscConfig+0x82c>)
 80011a6:	68da      	ldr	r2, [r3, #12]
 80011a8:	4905      	ldr	r1, [pc, #20]	; (80011c0 <HAL_RCC_OscConfig+0x82c>)
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_RCC_OscConfig+0x830>)
 80011ac:	4013      	ands	r3, r2
 80011ae:	60cb      	str	r3, [r1, #12]
 80011b0:	e001      	b.n	80011b6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e000      	b.n	80011b8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3720      	adds	r7, #32
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40021000 	.word	0x40021000
 80011c4:	feeefffc 	.word	0xfeeefffc

080011c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d101      	bne.n	80011e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e11d      	b.n	800141c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011e0:	4b90      	ldr	r3, [pc, #576]	; (8001424 <HAL_RCC_ClockConfig+0x25c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 030f 	and.w	r3, r3, #15
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d910      	bls.n	8001210 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ee:	4b8d      	ldr	r3, [pc, #564]	; (8001424 <HAL_RCC_ClockConfig+0x25c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f023 020f 	bic.w	r2, r3, #15
 80011f6:	498b      	ldr	r1, [pc, #556]	; (8001424 <HAL_RCC_ClockConfig+0x25c>)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fe:	4b89      	ldr	r3, [pc, #548]	; (8001424 <HAL_RCC_ClockConfig+0x25c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	683a      	ldr	r2, [r7, #0]
 8001208:	429a      	cmp	r2, r3
 800120a:	d001      	beq.n	8001210 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e105      	b.n	800141c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d010      	beq.n	800123e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	4b81      	ldr	r3, [pc, #516]	; (8001428 <HAL_RCC_ClockConfig+0x260>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001228:	429a      	cmp	r2, r3
 800122a:	d908      	bls.n	800123e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800122c:	4b7e      	ldr	r3, [pc, #504]	; (8001428 <HAL_RCC_ClockConfig+0x260>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	497b      	ldr	r1, [pc, #492]	; (8001428 <HAL_RCC_ClockConfig+0x260>)
 800123a:	4313      	orrs	r3, r2
 800123c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b00      	cmp	r3, #0
 8001248:	d079      	beq.n	800133e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b03      	cmp	r3, #3
 8001250:	d11e      	bne.n	8001290 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001252:	4b75      	ldr	r3, [pc, #468]	; (8001428 <HAL_RCC_ClockConfig+0x260>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e0dc      	b.n	800141c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001262:	f000 f9d1 	bl	8001608 <RCC_GetSysClockFreqFromPLLSource>
 8001266:	4603      	mov	r3, r0
 8001268:	4a70      	ldr	r2, [pc, #448]	; (800142c <HAL_RCC_ClockConfig+0x264>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d946      	bls.n	80012fc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800126e:	4b6e      	ldr	r3, [pc, #440]	; (8001428 <HAL_RCC_ClockConfig+0x260>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d140      	bne.n	80012fc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800127a:	4b6b      	ldr	r3, [pc, #428]	; (8001428 <HAL_RCC_ClockConfig+0x260>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001282:	4a69      	ldr	r2, [pc, #420]	; (8001428 <HAL_RCC_ClockConfig+0x260>)
 8001284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001288:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800128a:	2380      	movs	r3, #128	; 0x80
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	e035      	b.n	80012fc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d107      	bne.n	80012a8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001298:	4b63      	ldr	r3, [pc, #396]	; (8001428 <HAL_RCC_ClockConfig+0x260>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d115      	bne.n	80012d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e0b9      	b.n	800141c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d107      	bne.n	80012c0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012b0:	4b5d      	ldr	r3, [pc, #372]	; (8001428 <HAL_RCC_ClockConfig+0x260>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d109      	bne.n	80012d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e0ad      	b.n	800141c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012c0:	4b59      	ldr	r3, [pc, #356]	; (8001428 <HAL_RCC_ClockConfig+0x260>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d101      	bne.n	80012d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e0a5      	b.n	800141c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80012d0:	f000 f8b4 	bl	800143c <HAL_RCC_GetSysClockFreq>
 80012d4:	4603      	mov	r3, r0
 80012d6:	4a55      	ldr	r2, [pc, #340]	; (800142c <HAL_RCC_ClockConfig+0x264>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d90f      	bls.n	80012fc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80012dc:	4b52      	ldr	r3, [pc, #328]	; (8001428 <HAL_RCC_ClockConfig+0x260>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d109      	bne.n	80012fc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80012e8:	4b4f      	ldr	r3, [pc, #316]	; (8001428 <HAL_RCC_ClockConfig+0x260>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012f0:	4a4d      	ldr	r2, [pc, #308]	; (8001428 <HAL_RCC_ClockConfig+0x260>)
 80012f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80012fc:	4b4a      	ldr	r3, [pc, #296]	; (8001428 <HAL_RCC_ClockConfig+0x260>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f023 0203 	bic.w	r2, r3, #3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	4947      	ldr	r1, [pc, #284]	; (8001428 <HAL_RCC_ClockConfig+0x260>)
 800130a:	4313      	orrs	r3, r2
 800130c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800130e:	f7ff f98b 	bl	8000628 <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001314:	e00a      	b.n	800132c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001316:	f7ff f987 	bl	8000628 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	f241 3288 	movw	r2, #5000	; 0x1388
 8001324:	4293      	cmp	r3, r2
 8001326:	d901      	bls.n	800132c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e077      	b.n	800141c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800132c:	4b3e      	ldr	r3, [pc, #248]	; (8001428 <HAL_RCC_ClockConfig+0x260>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 020c 	and.w	r2, r3, #12
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	429a      	cmp	r2, r3
 800133c:	d1eb      	bne.n	8001316 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	2b80      	cmp	r3, #128	; 0x80
 8001342:	d105      	bne.n	8001350 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001344:	4b38      	ldr	r3, [pc, #224]	; (8001428 <HAL_RCC_ClockConfig+0x260>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	4a37      	ldr	r2, [pc, #220]	; (8001428 <HAL_RCC_ClockConfig+0x260>)
 800134a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800134e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d010      	beq.n	800137e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	4b31      	ldr	r3, [pc, #196]	; (8001428 <HAL_RCC_ClockConfig+0x260>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001368:	429a      	cmp	r2, r3
 800136a:	d208      	bcs.n	800137e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800136c:	4b2e      	ldr	r3, [pc, #184]	; (8001428 <HAL_RCC_ClockConfig+0x260>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	492b      	ldr	r1, [pc, #172]	; (8001428 <HAL_RCC_ClockConfig+0x260>)
 800137a:	4313      	orrs	r3, r2
 800137c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800137e:	4b29      	ldr	r3, [pc, #164]	; (8001424 <HAL_RCC_ClockConfig+0x25c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	429a      	cmp	r2, r3
 800138a:	d210      	bcs.n	80013ae <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800138c:	4b25      	ldr	r3, [pc, #148]	; (8001424 <HAL_RCC_ClockConfig+0x25c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f023 020f 	bic.w	r2, r3, #15
 8001394:	4923      	ldr	r1, [pc, #140]	; (8001424 <HAL_RCC_ClockConfig+0x25c>)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	4313      	orrs	r3, r2
 800139a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800139c:	4b21      	ldr	r3, [pc, #132]	; (8001424 <HAL_RCC_ClockConfig+0x25c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 030f 	and.w	r3, r3, #15
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d001      	beq.n	80013ae <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e036      	b.n	800141c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d008      	beq.n	80013cc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013ba:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <HAL_RCC_ClockConfig+0x260>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	4918      	ldr	r1, [pc, #96]	; (8001428 <HAL_RCC_ClockConfig+0x260>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0308 	and.w	r3, r3, #8
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d009      	beq.n	80013ec <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013d8:	4b13      	ldr	r3, [pc, #76]	; (8001428 <HAL_RCC_ClockConfig+0x260>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	4910      	ldr	r1, [pc, #64]	; (8001428 <HAL_RCC_ClockConfig+0x260>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013ec:	f000 f826 	bl	800143c <HAL_RCC_GetSysClockFreq>
 80013f0:	4602      	mov	r2, r0
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <HAL_RCC_ClockConfig+0x260>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	091b      	lsrs	r3, r3, #4
 80013f8:	f003 030f 	and.w	r3, r3, #15
 80013fc:	490c      	ldr	r1, [pc, #48]	; (8001430 <HAL_RCC_ClockConfig+0x268>)
 80013fe:	5ccb      	ldrb	r3, [r1, r3]
 8001400:	f003 031f 	and.w	r3, r3, #31
 8001404:	fa22 f303 	lsr.w	r3, r2, r3
 8001408:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <HAL_RCC_ClockConfig+0x26c>)
 800140a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <HAL_RCC_ClockConfig+0x270>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff f8b9 	bl	8000588 <HAL_InitTick>
 8001416:	4603      	mov	r3, r0
 8001418:	73fb      	strb	r3, [r7, #15]

  return status;
 800141a:	7bfb      	ldrb	r3, [r7, #15]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40022000 	.word	0x40022000
 8001428:	40021000 	.word	0x40021000
 800142c:	04c4b400 	.word	0x04c4b400
 8001430:	0800176c 	.word	0x0800176c
 8001434:	20000000 	.word	0x20000000
 8001438:	20000004 	.word	0x20000004

0800143c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800143c:	b480      	push	{r7}
 800143e:	b089      	sub	sp, #36	; 0x24
 8001440:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
 8001446:	2300      	movs	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800144a:	4b3e      	ldr	r3, [pc, #248]	; (8001544 <HAL_RCC_GetSysClockFreq+0x108>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001454:	4b3b      	ldr	r3, [pc, #236]	; (8001544 <HAL_RCC_GetSysClockFreq+0x108>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d005      	beq.n	8001470 <HAL_RCC_GetSysClockFreq+0x34>
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	2b0c      	cmp	r3, #12
 8001468:	d121      	bne.n	80014ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d11e      	bne.n	80014ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001470:	4b34      	ldr	r3, [pc, #208]	; (8001544 <HAL_RCC_GetSysClockFreq+0x108>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	2b00      	cmp	r3, #0
 800147a:	d107      	bne.n	800148c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800147c:	4b31      	ldr	r3, [pc, #196]	; (8001544 <HAL_RCC_GetSysClockFreq+0x108>)
 800147e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001482:	0a1b      	lsrs	r3, r3, #8
 8001484:	f003 030f 	and.w	r3, r3, #15
 8001488:	61fb      	str	r3, [r7, #28]
 800148a:	e005      	b.n	8001498 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800148c:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <HAL_RCC_GetSysClockFreq+0x108>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	091b      	lsrs	r3, r3, #4
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001498:	4a2b      	ldr	r2, [pc, #172]	; (8001548 <HAL_RCC_GetSysClockFreq+0x10c>)
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d10d      	bne.n	80014c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014ac:	e00a      	b.n	80014c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	d102      	bne.n	80014ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80014b4:	4b25      	ldr	r3, [pc, #148]	; (800154c <HAL_RCC_GetSysClockFreq+0x110>)
 80014b6:	61bb      	str	r3, [r7, #24]
 80014b8:	e004      	b.n	80014c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	2b08      	cmp	r3, #8
 80014be:	d101      	bne.n	80014c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80014c0:	4b23      	ldr	r3, [pc, #140]	; (8001550 <HAL_RCC_GetSysClockFreq+0x114>)
 80014c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	2b0c      	cmp	r3, #12
 80014c8:	d134      	bne.n	8001534 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80014ca:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <HAL_RCC_GetSysClockFreq+0x108>)
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d003      	beq.n	80014e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	2b03      	cmp	r3, #3
 80014de:	d003      	beq.n	80014e8 <HAL_RCC_GetSysClockFreq+0xac>
 80014e0:	e005      	b.n	80014ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80014e2:	4b1a      	ldr	r3, [pc, #104]	; (800154c <HAL_RCC_GetSysClockFreq+0x110>)
 80014e4:	617b      	str	r3, [r7, #20]
      break;
 80014e6:	e005      	b.n	80014f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80014e8:	4b19      	ldr	r3, [pc, #100]	; (8001550 <HAL_RCC_GetSysClockFreq+0x114>)
 80014ea:	617b      	str	r3, [r7, #20]
      break;
 80014ec:	e002      	b.n	80014f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	617b      	str	r3, [r7, #20]
      break;
 80014f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80014f4:	4b13      	ldr	r3, [pc, #76]	; (8001544 <HAL_RCC_GetSysClockFreq+0x108>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	091b      	lsrs	r3, r3, #4
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	3301      	adds	r3, #1
 8001500:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <HAL_RCC_GetSysClockFreq+0x108>)
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	0a1b      	lsrs	r3, r3, #8
 8001508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	fb03 f202 	mul.w	r2, r3, r2
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	fbb2 f3f3 	udiv	r3, r2, r3
 8001518:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <HAL_RCC_GetSysClockFreq+0x108>)
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	0e5b      	lsrs	r3, r3, #25
 8001520:	f003 0303 	and.w	r3, r3, #3
 8001524:	3301      	adds	r3, #1
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001532:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001534:	69bb      	ldr	r3, [r7, #24]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3724      	adds	r7, #36	; 0x24
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40021000 	.word	0x40021000
 8001548:	0800177c 	.word	0x0800177c
 800154c:	00f42400 	.word	0x00f42400
 8001550:	007a1200 	.word	0x007a1200

08001554 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800155c:	2300      	movs	r3, #0
 800155e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001560:	4b27      	ldr	r3, [pc, #156]	; (8001600 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800156c:	f7ff f94e 	bl	800080c <HAL_PWREx_GetVoltageRange>
 8001570:	6178      	str	r0, [r7, #20]
 8001572:	e014      	b.n	800159e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001574:	4b22      	ldr	r3, [pc, #136]	; (8001600 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001578:	4a21      	ldr	r2, [pc, #132]	; (8001600 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800157a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157e:	6593      	str	r3, [r2, #88]	; 0x58
 8001580:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800158c:	f7ff f93e 	bl	800080c <HAL_PWREx_GetVoltageRange>
 8001590:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001592:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001596:	4a1a      	ldr	r2, [pc, #104]	; (8001600 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800159c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015a4:	d10b      	bne.n	80015be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b80      	cmp	r3, #128	; 0x80
 80015aa:	d913      	bls.n	80015d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2ba0      	cmp	r3, #160	; 0xa0
 80015b0:	d902      	bls.n	80015b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80015b2:	2302      	movs	r3, #2
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	e00d      	b.n	80015d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80015b8:	2301      	movs	r3, #1
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	e00a      	b.n	80015d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b7f      	cmp	r3, #127	; 0x7f
 80015c2:	d902      	bls.n	80015ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80015c4:	2302      	movs	r3, #2
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	e004      	b.n	80015d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b70      	cmp	r3, #112	; 0x70
 80015ce:	d101      	bne.n	80015d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80015d0:	2301      	movs	r3, #1
 80015d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80015d4:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f023 020f 	bic.w	r2, r3, #15
 80015dc:	4909      	ldr	r1, [pc, #36]	; (8001604 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80015e4:	4b07      	ldr	r3, [pc, #28]	; (8001604 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 030f 	and.w	r3, r3, #15
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d001      	beq.n	80015f6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e000      	b.n	80015f8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40021000 	.word	0x40021000
 8001604:	40022000 	.word	0x40022000

08001608 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001608:	b480      	push	{r7}
 800160a:	b087      	sub	sp, #28
 800160c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800160e:	4b2d      	ldr	r3, [pc, #180]	; (80016c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2b03      	cmp	r3, #3
 800161c:	d00b      	beq.n	8001636 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2b03      	cmp	r3, #3
 8001622:	d825      	bhi.n	8001670 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d008      	beq.n	800163c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2b02      	cmp	r3, #2
 800162e:	d11f      	bne.n	8001670 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001630:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001632:	613b      	str	r3, [r7, #16]
    break;
 8001634:	e01f      	b.n	8001676 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001636:	4b25      	ldr	r3, [pc, #148]	; (80016cc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001638:	613b      	str	r3, [r7, #16]
    break;
 800163a:	e01c      	b.n	8001676 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800163c:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0308 	and.w	r3, r3, #8
 8001644:	2b00      	cmp	r3, #0
 8001646:	d107      	bne.n	8001658 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001648:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800164a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800164e:	0a1b      	lsrs	r3, r3, #8
 8001650:	f003 030f 	and.w	r3, r3, #15
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	e005      	b.n	8001664 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001658:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	091b      	lsrs	r3, r3, #4
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8001664:	4a1a      	ldr	r2, [pc, #104]	; (80016d0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166c:	613b      	str	r3, [r7, #16]
    break;
 800166e:	e002      	b.n	8001676 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	613b      	str	r3, [r7, #16]
    break;
 8001674:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	091b      	lsrs	r3, r3, #4
 800167c:	f003 030f 	and.w	r3, r3, #15
 8001680:	3301      	adds	r3, #1
 8001682:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	0a1b      	lsrs	r3, r3, #8
 800168a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	fb03 f202 	mul.w	r2, r3, r2
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	fbb2 f3f3 	udiv	r3, r2, r3
 800169a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	0e5b      	lsrs	r3, r3, #25
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	3301      	adds	r3, #1
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80016b6:	683b      	ldr	r3, [r7, #0]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	371c      	adds	r7, #28
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	40021000 	.word	0x40021000
 80016c8:	00f42400 	.word	0x00f42400
 80016cc:	007a1200 	.word	0x007a1200
 80016d0:	0800177c 	.word	0x0800177c

080016d4 <__libc_init_array>:
 80016d4:	b570      	push	{r4, r5, r6, lr}
 80016d6:	4d0d      	ldr	r5, [pc, #52]	; (800170c <__libc_init_array+0x38>)
 80016d8:	4c0d      	ldr	r4, [pc, #52]	; (8001710 <__libc_init_array+0x3c>)
 80016da:	1b64      	subs	r4, r4, r5
 80016dc:	10a4      	asrs	r4, r4, #2
 80016de:	2600      	movs	r6, #0
 80016e0:	42a6      	cmp	r6, r4
 80016e2:	d109      	bne.n	80016f8 <__libc_init_array+0x24>
 80016e4:	4d0b      	ldr	r5, [pc, #44]	; (8001714 <__libc_init_array+0x40>)
 80016e6:	4c0c      	ldr	r4, [pc, #48]	; (8001718 <__libc_init_array+0x44>)
 80016e8:	f000 f820 	bl	800172c <_init>
 80016ec:	1b64      	subs	r4, r4, r5
 80016ee:	10a4      	asrs	r4, r4, #2
 80016f0:	2600      	movs	r6, #0
 80016f2:	42a6      	cmp	r6, r4
 80016f4:	d105      	bne.n	8001702 <__libc_init_array+0x2e>
 80016f6:	bd70      	pop	{r4, r5, r6, pc}
 80016f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80016fc:	4798      	blx	r3
 80016fe:	3601      	adds	r6, #1
 8001700:	e7ee      	b.n	80016e0 <__libc_init_array+0xc>
 8001702:	f855 3b04 	ldr.w	r3, [r5], #4
 8001706:	4798      	blx	r3
 8001708:	3601      	adds	r6, #1
 800170a:	e7f2      	b.n	80016f2 <__libc_init_array+0x1e>
 800170c:	080017ac 	.word	0x080017ac
 8001710:	080017ac 	.word	0x080017ac
 8001714:	080017ac 	.word	0x080017ac
 8001718:	080017b0 	.word	0x080017b0

0800171c <memset>:
 800171c:	4402      	add	r2, r0
 800171e:	4603      	mov	r3, r0
 8001720:	4293      	cmp	r3, r2
 8001722:	d100      	bne.n	8001726 <memset+0xa>
 8001724:	4770      	bx	lr
 8001726:	f803 1b01 	strb.w	r1, [r3], #1
 800172a:	e7f9      	b.n	8001720 <memset+0x4>

0800172c <_init>:
 800172c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800172e:	bf00      	nop
 8001730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001732:	bc08      	pop	{r3}
 8001734:	469e      	mov	lr, r3
 8001736:	4770      	bx	lr

08001738 <_fini>:
 8001738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800173a:	bf00      	nop
 800173c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800173e:	bc08      	pop	{r3}
 8001740:	469e      	mov	lr, r3
 8001742:	4770      	bx	lr
